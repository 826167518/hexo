{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/spff/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/spff/source/css/loading-style.css","path":"css/loading-style.css","modified":0,"renderable":1},{"_id":"themes/spff/source/css/showshare.css","path":"css/showshare.css","modified":0,"renderable":1},{"_id":"themes/spff/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/spff/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/qq.png","path":"img/qq.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/spff/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/spff/source/js/TweenMax.js","path":"js/TweenMax.js","modified":0,"renderable":1},{"_id":"themes/spff/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/spff/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/spff/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/spff/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/spff/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/spff/source/js/pace.js","path":"js/pace.js","modified":0,"renderable":1},{"_id":"themes/spff/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/spff/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/spff/source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":0,"renderable":1},{"_id":"themes/spff/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-109.jpg","path":"background/bg-109.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-11.jpg","path":"background/bg-11.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-17.jpg","path":"background/bg-17.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-20.jpg","path":"background/bg-20.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg.jpg","path":"background/bg.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/spff/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/spff/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/spff/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/spff/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-15.jpg","path":"background/bg-15.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-23.jpg","path":"background/bg-23.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/spff/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/spff/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/spff/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/spff/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-14.jpg","path":"background/bg-14.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-19.jpg","path":"background/bg-19.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-21.jpg","path":"background/bg-21.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-22.jpg","path":"background/bg-22.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-24.jpg","path":"background/bg-24.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-12.jpg","path":"background/bg-12.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-18.jpg","path":"background/bg-18.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-111.jpg","path":"background/bg-111.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-13.jpg","path":"background/bg-13.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-16.jpg","path":"background/bg-16.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/spff/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/spff/README.md","hash":"d549f7441186cf124996ea878934c8934f70412a","modified":1470138343000},{"_id":"themes/spff/_config.yml","hash":"fda26755d24b2b5e7cdc5cb4aed478a685ced276","modified":1472798464000},{"_id":"themes/spff/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1470138342000},{"_id":"source/_posts/hello-world.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472787198000},{"_id":"themes/spff/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1470138342000},{"_id":"themes/spff/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1470138342000},{"_id":"themes/spff/languages/en.yml","hash":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1470138342000},{"_id":"themes/spff/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1470138342000},{"_id":"themes/spff/languages/pt-BR","hash":"922b6d836cc690742b2d55a725e3886c5d0cbb75","modified":1470138342000},{"_id":"themes/spff/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1470138342000},{"_id":"themes/spff/languages/zh-Hans.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1470138342000},{"_id":"themes/spff/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1470138342000},{"_id":"themes/spff/languages/zh.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1470138342000},{"_id":"themes/spff/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1470138342000},{"_id":"themes/spff/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1470138342000},{"_id":"themes/spff/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1470138342000},{"_id":"themes/spff/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1470138342000},{"_id":"themes/spff/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1470138342000},{"_id":"themes/spff/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470138342000},{"_id":"themes/spff/layout/plugins.swig","hash":"f809b5e62e968a80921c56e5d7658325b48b7263","modified":1470138342000},{"_id":"themes/spff/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1470138342000},{"_id":"source/Home/index.md","hash":"202c470bfd52c09aaae3960258480135711fc132","modified":1472788724000},{"_id":"themes/spff/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1470138342000},{"_id":"themes/spff/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1470138343000},{"_id":"source/_posts/hello.md","hash":"a70df14897a531f7e5c57839a0d6512a8b41b291","modified":1472796604000},{"_id":"source/_posts/keepalive+nginx实现高可用.md","hash":"1a09ed5bffa7b074195654af28772b7e35ef965e","modified":1472796877000},{"_id":"source/_posts/搭建WordPress.md","hash":"5e665589e101f44dbf0f1aae6125e3c673a4d300","modified":1472797002000},{"_id":"source/about/index-1.md","hash":"29c1c87269a5114b401d8afbe9cc82e1525aca18","modified":1472789805000},{"_id":"source/about/index.md","hash":"2d41e732c0aff996e56e4568af35b90a4b0ab1d6","modified":1472788890000},{"_id":"source/categories/index.md","hash":"e9b71e9785dce38d564e84be4ab85d99703aa247","modified":1469842682000},{"_id":"source/_posts/zabbix2.6安装.md","hash":"ed890e8dfc607ce84ea1f8e0102d815fbcd62dad","modified":1472796822000},{"_id":"source/_posts/linux—SSH（二）Rsync备份.md","hash":"fecfc08239e2adb923adf66fae9b65446d7d6d98","modified":1472796922000},{"_id":"source/_posts/linux—SSH1.md","hash":"1ec85a7790f3bdbd1e8ba58bc524b2f7f6983533","modified":1472796953000},{"_id":"themes/spff/layout/_partial/after-footer.ejs","hash":"54e262b6025026b3125868826c64527c3b8a4ca5","modified":1470138343000},{"_id":"themes/spff/layout/_partial/archive-post.ejs","hash":"8af583c5f60c69ffdc97bee4e8fdac1ba34ebecd","modified":1470138343000},{"_id":"themes/spff/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1470138343000},{"_id":"themes/spff/layout/_partial/article.ejs","hash":"13f788f96eec6cad9c29a6f373b88c164b279856","modified":1470138343000},{"_id":"themes/spff/layout/_partial/background.ejs","hash":"e566c3804a25e4c76f025db511dbaa0d008757e2","modified":1470138343000},{"_id":"themes/spff/layout/_partial/bodybackground.ejs","hash":"931700a928b84577cc33dfff68a009188885f6c0","modified":1470138343000},{"_id":"themes/spff/layout/_partial/case.swig","hash":"a2a7ec0e4c203e49fd32335c60c3b9851ed6e4a5","modified":1470138343000},{"_id":"themes/spff/layout/_partial/footer.ejs","hash":"0e54ea8678e6d6f0bf98a4b76f5c4ee4d424893f","modified":1470138343000},{"_id":"themes/spff/layout/_partial/head.ejs","hash":"8670e539351a3d248c299905e700d05e0a9b0f9a","modified":1470138343000},{"_id":"themes/spff/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1470138343000},{"_id":"themes/spff/layout/_partial/hide-labels.ejs","hash":"e981795db4954ba5cc9d6844a6a2799bffdc0af3","modified":1470138343000},{"_id":"themes/spff/layout/_partial/left-col.ejs","hash":"aa5acf4b363a925bb958ea08d161aaf7b75a8d70","modified":1470138343000},{"_id":"themes/spff/layout/_partial/mathjax.ejs","hash":"cdfd21f079933f3a275bc4088e1ca5e6068e75b4","modified":1470138343000},{"_id":"themes/spff/layout/_partial/mobile-nav.ejs","hash":"1ddd03edfb88867eff99bc0060466ea7cca3825c","modified":1470138343000},{"_id":"themes/spff/layout/_partial/page.ejs","hash":"55ffdcc87b5fa50afdc370f439c0e812e307cbff","modified":1470138343000},{"_id":"themes/spff/layout/_partial/plugin.swig","hash":"17b6c6945e4b1b41dbb10d851f85ca10100c28ea","modified":1470138343000},{"_id":"themes/spff/layout/_partial/scrolling-button.ejs","hash":"b3a28974f37375796687e6100b48c3da6f662640","modified":1470138343000},{"_id":"themes/spff/layout/_partial/post-nav-button.ejs","hash":"89b0b0bc70dcebfae064e2e7355177cd8f9e526b","modified":1470138343000},{"_id":"themes/spff/layout/_partial/theme.swig","hash":"5a279ad8f6c6b7c104cce495faa563d8b7a7c74a","modified":1470138343000},{"_id":"themes/spff/layout/_partial/toc.ejs","hash":"84bbda825793de643d5a40190fab2160af1e75e3","modified":1470138343000},{"_id":"themes/spff/layout/_partial/work.swig","hash":"6bdb6ec45f6179875e5a33bfdc7568a3831638fd","modified":1470138343000},{"_id":"themes/spff/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1470138343000},{"_id":"themes/spff/source/css/_variables.styl","hash":"47b0536f118d75fc9705c437faf89fd5a93b3615","modified":1470138343000},{"_id":"themes/spff/source/css/loading-style.css","hash":"1f67362d809e85edc9f122db7bc3711af1ed1d8b","modified":1470138343000},{"_id":"themes/spff/source/css/showshare.css","hash":"3efc4afd0d136fb5dec993e9cd9ce85b9d1cf589","modified":1470138343000},{"_id":"themes/spff/source/css/style.styl","hash":"998204af28e814cbb5a70f7534f1a67c23d5103d","modified":1470138343000},{"_id":"themes/spff/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1470138343000},{"_id":"themes/spff/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1470138343000},{"_id":"themes/spff/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1470138343000},{"_id":"themes/spff/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1470138343000},{"_id":"themes/spff/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1470138343000},{"_id":"themes/spff/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1470138343000},{"_id":"themes/spff/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1470138343000},{"_id":"themes/spff/source/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1470138343000},{"_id":"themes/spff/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1470138343000},{"_id":"themes/spff/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1470138343000},{"_id":"themes/spff/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1470138343000},{"_id":"themes/spff/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1470138343000},{"_id":"themes/spff/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1470138343000},{"_id":"themes/spff/source/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1470138343000},{"_id":"themes/spff/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1470138343000},{"_id":"themes/spff/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1470138343000},{"_id":"themes/spff/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1470138343000},{"_id":"themes/spff/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1470138343000},{"_id":"themes/spff/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1470138343000},{"_id":"themes/spff/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1470138343000},{"_id":"themes/spff/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1470138343000},{"_id":"themes/spff/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1470138343000},{"_id":"themes/spff/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1470138343000},{"_id":"themes/spff/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1470138343000},{"_id":"themes/spff/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1470138343000},{"_id":"themes/spff/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1470138343000},{"_id":"themes/spff/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1470138343000},{"_id":"themes/spff/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1470138343000},{"_id":"themes/spff/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1470138343000},{"_id":"themes/spff/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1470138343000},{"_id":"themes/spff/source/js/TweenMax.js","hash":"0ba64564a4fde4085fa3971dd53b7d64a41751e1","modified":1470138344000},{"_id":"themes/spff/source/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1470138344000},{"_id":"themes/spff/source/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1470138344000},{"_id":"themes/spff/source/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1470138344000},{"_id":"themes/spff/source/js/main.js","hash":"153b4796d6c22f3bfaa28a4f8a361d4685286c6f","modified":1470138344000},{"_id":"themes/spff/source/js/mobile.js","hash":"d3847e5bcaf39108931724ecb02770c62b10889f","modified":1470138344000},{"_id":"themes/spff/source/js/pace.js","hash":"b49c10cd65d9488f7338e3c778e55ac6628650f3","modified":1470138344000},{"_id":"themes/spff/source/js/pc.js","hash":"ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40","modified":1470138344000},{"_id":"themes/spff/source/js/plugins.js","hash":"c1cf96b2d852b5803228a34d99014b005623bc06","modified":1470138344000},{"_id":"themes/spff/source/img/head.jpg","hash":"80c0999acfc1173183d3dd243b4b90d077ab97cb","modified":1470138343000},{"_id":"themes/spff/source/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1470138344000},{"_id":"themes/spff/source/js/embed.js","hash":"8d2d4a812ab639bc02fdd8749d3a39f6b9406c54","modified":1470138344000},{"_id":"themes/spff/layout/_partial/analytics/baidu-analytics.ejs","hash":"b21500b87d79a0068e3ca0408b4e125e3e749d01","modified":1470138343000},{"_id":"themes/spff/layout/_partial/analytics/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1470138343000},{"_id":"themes/spff/layout/_partial/comments/disqus.ejs","hash":"7792a79ab85ef28551cc2a793735973b1d5521a7","modified":1470138343000},{"_id":"themes/spff/layout/_partial/comments/duoshuo.ejs","hash":"8d90eb435739eae6f0282c67899ba768b1d9cc7c","modified":1470138343000},{"_id":"themes/spff/layout/_partial/comments/youyan.ejs","hash":"a6853b59ee60e775de1ed90b242084f83774d195","modified":1470138343000},{"_id":"themes/spff/layout/_partial/post/TipTitle.ejs","hash":"65b0956edca84e0bc0eb616ec236309822d5f803","modified":1470138343000},{"_id":"themes/spff/layout/_partial/post/date.ejs","hash":"1cfcf2e06ab9b1c6dcd44f41825dfe98d400c7ea","modified":1470138343000},{"_id":"themes/spff/layout/_partial/post/category.ejs","hash":"265bb12f7cfa5e0bcbb74fdd409ba13a6d9d2e22","modified":1470138343000},{"_id":"themes/spff/layout/_partial/post/loading.ejs","hash":"52a576a8afee08d33c6f69a61c496e1820132e91","modified":1470138343000},{"_id":"themes/spff/layout/_partial/post/nav.ejs","hash":"d22cfc20d9a94a33b7e790c0fc4cb11136cb3059","modified":1472799530000},{"_id":"themes/spff/layout/_partial/post/tag.ejs","hash":"9dad471e27de9e066666f3082137eccaede2e67b","modified":1470138343000},{"_id":"themes/spff/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1470138343000},{"_id":"themes/spff/layout/_partial/post/swiftype.ejs","hash":"76374e601d911e1279e1944d2a6b7eb3391c7c7c","modified":1470138343000},{"_id":"themes/spff/layout/_partial/share/baidu-share.ejs","hash":"21fbd6dbdcc631c61194ea04fc19b298133b0e2f","modified":1470138343000},{"_id":"themes/spff/layout/_partial/share/share.ejs","hash":"62467610ba6df9b63350d163e806be774dcf5a00","modified":1470138343000},{"_id":"themes/spff/layout/_partial/share/showshare.ejs","hash":"410b809eb6c50bacfd9e1e573f1e0251841bc79d","modified":1470138343000},{"_id":"themes/spff/source/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1470138343000},{"_id":"themes/spff/source/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1470138343000},{"_id":"themes/spff/source/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1470138343000},{"_id":"themes/spff/source/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1470138343000},{"_id":"themes/spff/source/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1470138343000},{"_id":"themes/spff/source/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/article.styl","hash":"8a7383c57181800add514705455d09f40975b758","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/archive.styl","hash":"a8bc2e2458bcc51fa68122274a41f5e4e52a8ebd","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/baidushare.styl","hash":"fe36e3d8933b1b0b674aaf16e50dbf6090099912","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/footer.styl","hash":"cbf916a5338e69e05d0815c53aeb818d636b6d99","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/highlight.styl","hash":"f317abc2669a5b71c0f6661fdade86c630453fd0","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/instagram.styl","hash":"db9cc156c7df27f7f54b0e7ff34b5949f55f99eb","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/main.styl","hash":"667567c3ea25cd4acbaab98867a92fefd098fcc1","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/mains.styl","hash":"530f74b0c32eb9554032004217b29d1df42161af","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/mobile-slider.styl","hash":"3bf9f2359f68c700e21618ad6262db81038c3d96","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/mobile.styl","hash":"53b1a06e08df81427505cbc76cc8eb02bea54356","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/page.styl","hash":"46b9c91428c1e1f42cc8a1010f600f70fb8edc82","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/plugins.styl","hash":"629ae10dfc053dbfc074966f0bf7f0115acf65e2","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/scroll.styl","hash":"1932774d30b8706919342f9cf36ea2d99987ce14","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/share.styl","hash":"2dde7c9ea40c71fce3dbd8d5e2bcc8d9682141b8","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/tagcloud.styl","hash":"91e6553775ca931a1b3db1ab11c4cf227df68c21","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1470138343000},{"_id":"themes/spff/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1470138343000},{"_id":"themes/spff/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1470138343000},{"_id":"themes/spff/source/css/pace/pace-theme-flash.css","hash":"508bce8b59a1fbc1f1443a7c4ab3b026e5517dab","modified":1470138343000},{"_id":"themes/spff/source/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1470138343000},{"_id":"themes/spff/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1470138343000},{"_id":"themes/spff/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1470138343000},{"_id":"themes/spff/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1470138343000},{"_id":"themes/spff/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1470138343000},{"_id":"themes/spff/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1470138343000},{"_id":"themes/spff/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1470138343000},{"_id":"themes/spff/source/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1470138343000},{"_id":"themes/spff/source/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1470138343000},{"_id":"themes/spff/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1470138344000},{"_id":"themes/spff/source/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1470138343000},{"_id":"themes/spff/source/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1470138343000},{"_id":"themes/spff/source/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1470138343000},{"_id":"themes/spff/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1470138343000},{"_id":"themes/spff/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1470138343000},{"_id":"themes/spff/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1470138343000},{"_id":"themes/spff/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1470138343000},{"_id":"themes/spff/source/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1470138344000},{"_id":"themes/spff/source/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1470138343000},{"_id":"themes/spff/source/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/customise/blockquote.styl","hash":"83179f1d0e12b025cd433a6071b2826c2b4168cc","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/customise/code-block.styl","hash":"ebf7ca8598d93235479460ea7d1be97d44224b05","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/customise/inline-code.styl","hash":"1f15986381f7b7b0953ba30733e473b12ea46800","modified":1470138343000},{"_id":"themes/spff/source/css/_partial/post/youyan.styl","hash":"ac2869e2e0fb3a1ee0df4b0c0a233a2b1923ea20","modified":1470138343000},{"_id":"themes/spff/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1470138343000},{"_id":"themes/spff/source/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1470138343000},{"_id":"themes/spff/source/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1470138343000},{"_id":"themes/spff/source/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1470138343000},{"_id":"themes/spff/source/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1470138343000},{"_id":"themes/spff/source/background/bg-4.jpg","hash":"da47f889e02241c8b095f852fb7efd89c114599d","modified":1470138343000},{"_id":"themes/spff/source/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1470138343000},{"_id":"themes/spff/source/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1470138343000},{"_id":"themes/spff/source/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1470138343000},{"_id":"themes/spff/source/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1470138343000},{"_id":"themes/spff/source/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1470138343000},{"_id":"themes/spff/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1470138343000},{"_id":"themes/spff/source/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1470138343000},{"_id":"themes/spff/source/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1470138343000},{"_id":"themes/spff/source/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1470138343000},{"_id":"themes/spff/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1470138343000},{"_id":"themes/spff/source/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1470138343000},{"_id":"themes/spff/source/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1470138343000}],"Category":[],"Data":[],"Page":[{"title":"Home","date":"2016-09-02T03:58:44.000Z","_content":"","source":"Home/index.md","raw":"---\ntitle: Home\ndate: 2016-09-01 20:58:44\n---\n","updated":"2016-09-02T03:58:44.000Z","path":"Home/index.html","comments":1,"layout":"page","_id":"cisld5j0k0001kgpvfw4frdf9","content":"","excerpt":"","more":""},{"title":"about","date":"2016-09-02T04:16:45.000Z","_content":"","source":"about/index-1.md","raw":"---\ntitle: about\ndate: 2016-09-01 21:16:45\n---\n","updated":"2016-09-02T04:16:45.000Z","path":"about/index-1.html","comments":1,"layout":"page","_id":"cisld5j190005kgpvx86a7cbm","content":"","excerpt":"","more":""},{"title":"about","date":"2016-09-02T04:01:30.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-09-01 21:01:30\n---\n","updated":"2016-09-02T04:01:30.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cisld5j1a0006kgpvgja2m3q6","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-07-30T01:38:02.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-07-29 18:38:02\n---\n","updated":"2016-07-30T01:38:02.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cisld5j1b0007kgpv1ar115g0","content":"","excerpt":"","more":""}],"Post":[{"_content":"","source":"_posts/hello-world.md","raw":"","slug":"hello-world","published":1,"date":"2016-09-02T06:12:21.735Z","updated":"2016-09-02T03:33:18.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cisld5izs0000kgpvxso7se8m","content":"","excerpt":"","more":""},{"title":"keepalive+nginx实现高可用","date":"2016-09-02T06:19:28.804Z","_content":"1安装相应基础服务\n\n    yum install openssl-devel\n    yum install popt-devel\n2下载并安装keepalive安装包\n    wget http://www.keepalived.org/software/keepalived-1.2.12.tar.gz\n    tar xzf keepalived-1.2.12.tar.gz;\n    cd keepalived-1.2.12\n    ./configure –prefix=/usr/local/keepalived-1.2.12;\n    make && make install\n<!--more-->\n3制作keepalive服务\n    cp /usr/local/keepalived-1.2.12/etc/rc.d/init.d/keepalived /etc/init.d/\n    cp /usr/local/keepalived-1.2.12/etc/sysconfig/keepalived /etc/sysconfig/\n    chmod +x /etc/init.d/keepalived;\n    chkconfig –add keepalived;\n    mkdir -p /etc/keepalived\n    ln -s /usr/local/keepalived-1.2.12/sbin/keepalived /usr/sbin/\n    cp /usr/local/keepalived-1.2.12/etc/keepalived/keepalived.conf /etc/keepalived/\n    ln -s /usr/local/keepalived-1.2.12/sbin/keepalived /sbin/\n    service keepalived restart\n4更改keepalive的配置文件\n    vim /etc/keepalived/keepalived.conf\n    keepalive主\n    ! Configuration File for keepalived\n    \n    global_defs {\n    \n       router_id nginx_master\n    \n    }\n    \n    #监控服务.NGINX mysql等\n    \n    vrrp_script chk_nginx {\n    \n    script “/usr/local/nginx/check_nginx.sh”\n    \n    interval 2\n    \n    weight 2\n    \n    }\n    \n    vrrp_instance VI_1 {\n    \n    state MASTER\n    \n    interface eth0\n    \n    virtual_router_id 51   #通道\n    \n    priority 101#优先级，数值越高优先级越高\n    \n    advert_int 1\n    \n    authentication {\n    \n    auth_type PASS\n    \n    auth_pass 1111\n    \n    }\n    \n    virtual_ipaddress {\n    \n    192.168.1.254   #虚拟IP\n    \n    }\n    \n    track_script {\n    \n    chk_nginx  #检测脚本 上面配置的\n    \n    }\n\n \n\nkeepalive从\n\n    ! Configuration File for keepalived\n     \n    global_defs {\n       router_id nginx_backup\n    }\n    #监控服务.NGINX mysql等\n    vrrp_script chk_nginx {\n    script “/usr/local/nginx/check_nginx.sh”\n    interval 2\n    weight 2\n    }\n     \n    vrrp_instance VI_1 {\n    state BACKUP\n    interface eth0\n    virtual_router_id 51#通道\n    priority 99#优先级，数值越高优先级越高\n    advert_int 1\n    authentication {\n    auth_type PASS\n    auth_pass 1111\n    }\n    virtual_ipaddress {\n    192.168.1.254   #虚拟IP\n    }\n    track_script {\n    chk_nginx  #检测脚本 上面配置的\n    }\n    }\n5脚本/usr/local/nginx/check_nginx.sh”内容：\n    #!/bin/bash\n    \n    if [ “$(ps -ef | grep “nginx: master process“| grep -v grep )” == “” ]\n    \n    then\n    \n    /usr/local/nginx/sbin/nginx\n    \n    sleep 5\n    \n    if [ “$(ps -ef | grep “nginx: master process“| grep -v grep )” == “” ]\n    \n    then\n    \n    killall keepalived\n    \n    fi\n    \n    fi\n\n6编写keepalive和nginx共存脚本\n\n    vim /data/apps/jiance.sh\n    \n    #!/bin/bash\n    while :\n    do\n    nginxpid=`ps -C nginx –no-header |wc -l`\n    if [ $nginxpid -eq 0 ];then\n       /etc/init.d/nginx restart\n      sleep 5\n    nginxpid=`ps -C nginx –no-header |wc -l`\n      if [ $nginxpid -eq 0 ];then\n      /etc/init.d/keepalived stop\n      fi\n    fi\n    sleep 5\n    done\n    }\n7把该脚本制作成系统服务并且开机启动\n    chmod 755 /data/apps/jiance.sh\n    vim /etc/init.d/jiance\n    #!/bin/bash\n    # chkconfig: 2345 10 90\n    # description: jiance ….\n    start() {\n    echo “Starting my process “\n    cd /data/apps/\n    ./jiance.sh\n    }\n    stop() {\n    killall jiance.sh\n    echo “Stoped”\n    }\n    chmod a+wrx /etc/init.d/jiance\n    /etc/init.d/jiance start\n    chmod +x jiance   #增加执行权限\n    chkconfig –add jiance #把jiance添加到系统服务列表\n    chkconfig jiance on #设定jiance的开关（on/off）\n    chkconfig –list jiance   #就可以看到已经注册了jiance的服务\n完成如上步骤keepalive+nginx高可用即搭建完成。","source":"_posts/keepalive+nginx实现高可用.md","raw":"---\ntitle: keepalive+nginx实现高可用\ndate: \ntags:\n---\n1安装相应基础服务\n\n    yum install openssl-devel\n    yum install popt-devel\n2下载并安装keepalive安装包\n    wget http://www.keepalived.org/software/keepalived-1.2.12.tar.gz\n    tar xzf keepalived-1.2.12.tar.gz;\n    cd keepalived-1.2.12\n    ./configure –prefix=/usr/local/keepalived-1.2.12;\n    make && make install\n<!--more-->\n3制作keepalive服务\n    cp /usr/local/keepalived-1.2.12/etc/rc.d/init.d/keepalived /etc/init.d/\n    cp /usr/local/keepalived-1.2.12/etc/sysconfig/keepalived /etc/sysconfig/\n    chmod +x /etc/init.d/keepalived;\n    chkconfig –add keepalived;\n    mkdir -p /etc/keepalived\n    ln -s /usr/local/keepalived-1.2.12/sbin/keepalived /usr/sbin/\n    cp /usr/local/keepalived-1.2.12/etc/keepalived/keepalived.conf /etc/keepalived/\n    ln -s /usr/local/keepalived-1.2.12/sbin/keepalived /sbin/\n    service keepalived restart\n4更改keepalive的配置文件\n    vim /etc/keepalived/keepalived.conf\n    keepalive主\n    ! Configuration File for keepalived\n    \n    global_defs {\n    \n       router_id nginx_master\n    \n    }\n    \n    #监控服务.NGINX mysql等\n    \n    vrrp_script chk_nginx {\n    \n    script “/usr/local/nginx/check_nginx.sh”\n    \n    interval 2\n    \n    weight 2\n    \n    }\n    \n    vrrp_instance VI_1 {\n    \n    state MASTER\n    \n    interface eth0\n    \n    virtual_router_id 51   #通道\n    \n    priority 101#优先级，数值越高优先级越高\n    \n    advert_int 1\n    \n    authentication {\n    \n    auth_type PASS\n    \n    auth_pass 1111\n    \n    }\n    \n    virtual_ipaddress {\n    \n    192.168.1.254   #虚拟IP\n    \n    }\n    \n    track_script {\n    \n    chk_nginx  #检测脚本 上面配置的\n    \n    }\n\n \n\nkeepalive从\n\n    ! Configuration File for keepalived\n     \n    global_defs {\n       router_id nginx_backup\n    }\n    #监控服务.NGINX mysql等\n    vrrp_script chk_nginx {\n    script “/usr/local/nginx/check_nginx.sh”\n    interval 2\n    weight 2\n    }\n     \n    vrrp_instance VI_1 {\n    state BACKUP\n    interface eth0\n    virtual_router_id 51#通道\n    priority 99#优先级，数值越高优先级越高\n    advert_int 1\n    authentication {\n    auth_type PASS\n    auth_pass 1111\n    }\n    virtual_ipaddress {\n    192.168.1.254   #虚拟IP\n    }\n    track_script {\n    chk_nginx  #检测脚本 上面配置的\n    }\n    }\n5脚本/usr/local/nginx/check_nginx.sh”内容：\n    #!/bin/bash\n    \n    if [ “$(ps -ef | grep “nginx: master process“| grep -v grep )” == “” ]\n    \n    then\n    \n    /usr/local/nginx/sbin/nginx\n    \n    sleep 5\n    \n    if [ “$(ps -ef | grep “nginx: master process“| grep -v grep )” == “” ]\n    \n    then\n    \n    killall keepalived\n    \n    fi\n    \n    fi\n\n6编写keepalive和nginx共存脚本\n\n    vim /data/apps/jiance.sh\n    \n    #!/bin/bash\n    while :\n    do\n    nginxpid=`ps -C nginx –no-header |wc -l`\n    if [ $nginxpid -eq 0 ];then\n       /etc/init.d/nginx restart\n      sleep 5\n    nginxpid=`ps -C nginx –no-header |wc -l`\n      if [ $nginxpid -eq 0 ];then\n      /etc/init.d/keepalived stop\n      fi\n    fi\n    sleep 5\n    done\n    }\n7把该脚本制作成系统服务并且开机启动\n    chmod 755 /data/apps/jiance.sh\n    vim /etc/init.d/jiance\n    #!/bin/bash\n    # chkconfig: 2345 10 90\n    # description: jiance ….\n    start() {\n    echo “Starting my process “\n    cd /data/apps/\n    ./jiance.sh\n    }\n    stop() {\n    killall jiance.sh\n    echo “Stoped”\n    }\n    chmod a+wrx /etc/init.d/jiance\n    /etc/init.d/jiance start\n    chmod +x jiance   #增加执行权限\n    chkconfig –add jiance #把jiance添加到系统服务列表\n    chkconfig jiance on #设定jiance的开关（on/off）\n    chkconfig –list jiance   #就可以看到已经注册了jiance的服务\n完成如上步骤keepalive+nginx高可用即搭建完成。","slug":"keepalive+nginx实现高可用","published":1,"updated":"2016-09-02T06:14:37.000Z","_id":"cisldejjd000bkgpvbtf4kf6z","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1安装相应基础服务</p>\n<pre><code>yum install openssl-devel\nyum install popt-devel\n</code></pre><p>2下载并安装keepalive安装包<br>    wget <a href=\"http://www.keepalived.org/software/keepalived-1.2.12.tar.gz\" target=\"_blank\" rel=\"external\">http://www.keepalived.org/software/keepalived-1.2.12.tar.gz</a><br>    tar xzf keepalived-1.2.12.tar.gz;<br>    cd keepalived-1.2.12<br>    ./configure –prefix=/usr/local/keepalived-1.2.12;<br>    make &amp;&amp; make install<br><a id=\"more\"></a><br>3制作keepalive服务<br>    cp /usr/local/keepalived-1.2.12/etc/rc.d/init.d/keepalived /etc/init.d/<br>    cp /usr/local/keepalived-1.2.12/etc/sysconfig/keepalived /etc/sysconfig/<br>    chmod +x /etc/init.d/keepalived;<br>    chkconfig –add keepalived;<br>    mkdir -p /etc/keepalived<br>    ln -s /usr/local/keepalived-1.2.12/sbin/keepalived /usr/sbin/<br>    cp /usr/local/keepalived-1.2.12/etc/keepalived/keepalived.conf /etc/keepalived/<br>    ln -s /usr/local/keepalived-1.2.12/sbin/keepalived /sbin/<br>    service keepalived restart<br>4更改keepalive的配置文件<br>    vim /etc/keepalived/keepalived.conf<br>    keepalive主<br>    ! Configuration File for keepalived</p>\n<pre><code>global_defs {\n\n   router_id nginx_master\n\n}\n\n#监控服务.NGINX mysql等\n\nvrrp_script chk_nginx {\n\nscript “/usr/local/nginx/check_nginx.sh”\n\ninterval 2\n\nweight 2\n\n}\n\nvrrp_instance VI_1 {\n\nstate MASTER\n\ninterface eth0\n\nvirtual_router_id 51   #通道\n\npriority 101#优先级，数值越高优先级越高\n\nadvert_int 1\n\nauthentication {\n\nauth_type PASS\n\nauth_pass 1111\n\n}\n\nvirtual_ipaddress {\n\n192.168.1.254   #虚拟IP\n\n}\n\ntrack_script {\n\nchk_nginx  #检测脚本 上面配置的\n\n}\n</code></pre><p>keepalive从</p>\n<pre><code>! Configuration File for keepalived\n\nglobal_defs {\n   router_id nginx_backup\n}\n#监控服务.NGINX mysql等\nvrrp_script chk_nginx {\nscript “/usr/local/nginx/check_nginx.sh”\ninterval 2\nweight 2\n}\n\nvrrp_instance VI_1 {\nstate BACKUP\ninterface eth0\nvirtual_router_id 51#通道\npriority 99#优先级，数值越高优先级越高\nadvert_int 1\nauthentication {\nauth_type PASS\nauth_pass 1111\n}\nvirtual_ipaddress {\n192.168.1.254   #虚拟IP\n}\ntrack_script {\nchk_nginx  #检测脚本 上面配置的\n}\n}\n</code></pre><p>5脚本/usr/local/nginx/check_nginx.sh”内容：</p>\n<pre><code>#!/bin/bash\n\nif [ “$(ps -ef | grep “nginx: master process“| grep -v grep )” == “” ]\n\nthen\n\n/usr/local/nginx/sbin/nginx\n\nsleep 5\n\nif [ “$(ps -ef | grep “nginx: master process“| grep -v grep )” == “” ]\n\nthen\n\nkillall keepalived\n\nfi\n\nfi\n</code></pre><p>6编写keepalive和nginx共存脚本</p>\n<pre><code>vim /data/apps/jiance.sh\n\n#!/bin/bash\nwhile :\ndo\nnginxpid=`ps -C nginx –no-header |wc -l`\nif [ $nginxpid -eq 0 ];then\n   /etc/init.d/nginx restart\n  sleep 5\nnginxpid=`ps -C nginx –no-header |wc -l`\n  if [ $nginxpid -eq 0 ];then\n  /etc/init.d/keepalived stop\n  fi\nfi\nsleep 5\ndone\n}\n</code></pre><p>7把该脚本制作成系统服务并且开机启动<br>    chmod 755 /data/apps/jiance.sh<br>    vim /etc/init.d/jiance</p>\n<pre><code>#!/bin/bash\n# chkconfig: 2345 10 90\n# description: jiance ….\nstart() {\necho “Starting my process “\ncd /data/apps/\n./jiance.sh\n}\nstop() {\nkillall jiance.sh\necho “Stoped”\n}\nchmod a+wrx /etc/init.d/jiance\n/etc/init.d/jiance start\nchmod +x jiance   #增加执行权限\nchkconfig –add jiance #把jiance添加到系统服务列表\nchkconfig jiance on #设定jiance的开关（on/off）\nchkconfig –list jiance   #就可以看到已经注册了jiance的服务\n</code></pre><p>完成如上步骤keepalive+nginx高可用即搭建完成。</p>\n","excerpt":"<p>1安装相应基础服务</p>\n<pre><code>yum install openssl-devel\nyum install popt-devel\n</code></pre><p>2下载并安装keepalive安装包<br>    wget <a href=\"http://www.keepalived.org/software/keepalived-1.2.12.tar.gz\">http://www.keepalived.org/software/keepalived-1.2.12.tar.gz</a><br>    tar xzf keepalived-1.2.12.tar.gz;<br>    cd keepalived-1.2.12<br>    ./configure –prefix=/usr/local/keepalived-1.2.12;<br>    make &amp;&amp; make install<br>","more":"<br>3制作keepalive服务<br>    cp /usr/local/keepalived-1.2.12/etc/rc.d/init.d/keepalived /etc/init.d/<br>    cp /usr/local/keepalived-1.2.12/etc/sysconfig/keepalived /etc/sysconfig/<br>    chmod +x /etc/init.d/keepalived;<br>    chkconfig –add keepalived;<br>    mkdir -p /etc/keepalived<br>    ln -s /usr/local/keepalived-1.2.12/sbin/keepalived /usr/sbin/<br>    cp /usr/local/keepalived-1.2.12/etc/keepalived/keepalived.conf /etc/keepalived/<br>    ln -s /usr/local/keepalived-1.2.12/sbin/keepalived /sbin/<br>    service keepalived restart<br>4更改keepalive的配置文件<br>    vim /etc/keepalived/keepalived.conf<br>    keepalive主<br>    ! Configuration File for keepalived</p>\n<pre><code>global_defs {\n\n   router_id nginx_master\n\n}\n\n#监控服务.NGINX mysql等\n\nvrrp_script chk_nginx {\n\nscript “/usr/local/nginx/check_nginx.sh”\n\ninterval 2\n\nweight 2\n\n}\n\nvrrp_instance VI_1 {\n\nstate MASTER\n\ninterface eth0\n\nvirtual_router_id 51   #通道\n\npriority 101#优先级，数值越高优先级越高\n\nadvert_int 1\n\nauthentication {\n\nauth_type PASS\n\nauth_pass 1111\n\n}\n\nvirtual_ipaddress {\n\n192.168.1.254   #虚拟IP\n\n}\n\ntrack_script {\n\nchk_nginx  #检测脚本 上面配置的\n\n}\n</code></pre><p>keepalive从</p>\n<pre><code>! Configuration File for keepalived\n\nglobal_defs {\n   router_id nginx_backup\n}\n#监控服务.NGINX mysql等\nvrrp_script chk_nginx {\nscript “/usr/local/nginx/check_nginx.sh”\ninterval 2\nweight 2\n}\n\nvrrp_instance VI_1 {\nstate BACKUP\ninterface eth0\nvirtual_router_id 51#通道\npriority 99#优先级，数值越高优先级越高\nadvert_int 1\nauthentication {\nauth_type PASS\nauth_pass 1111\n}\nvirtual_ipaddress {\n192.168.1.254   #虚拟IP\n}\ntrack_script {\nchk_nginx  #检测脚本 上面配置的\n}\n}\n</code></pre><p>5脚本/usr/local/nginx/check_nginx.sh”内容：</p>\n<pre><code>#!/bin/bash\n\nif [ “$(ps -ef | grep “nginx: master process“| grep -v grep )” == “” ]\n\nthen\n\n/usr/local/nginx/sbin/nginx\n\nsleep 5\n\nif [ “$(ps -ef | grep “nginx: master process“| grep -v grep )” == “” ]\n\nthen\n\nkillall keepalived\n\nfi\n\nfi\n</code></pre><p>6编写keepalive和nginx共存脚本</p>\n<pre><code>vim /data/apps/jiance.sh\n\n#!/bin/bash\nwhile :\ndo\nnginxpid=`ps -C nginx –no-header |wc -l`\nif [ $nginxpid -eq 0 ];then\n   /etc/init.d/nginx restart\n  sleep 5\nnginxpid=`ps -C nginx –no-header |wc -l`\n  if [ $nginxpid -eq 0 ];then\n  /etc/init.d/keepalived stop\n  fi\nfi\nsleep 5\ndone\n}\n</code></pre><p>7把该脚本制作成系统服务并且开机启动<br>    chmod 755 /data/apps/jiance.sh<br>    vim /etc/init.d/jiance</p>\n<pre><code>#!/bin/bash\n# chkconfig: 2345 10 90\n# description: jiance ….\nstart() {\necho “Starting my process “\ncd /data/apps/\n./jiance.sh\n}\nstop() {\nkillall jiance.sh\necho “Stoped”\n}\nchmod a+wrx /etc/init.d/jiance\n/etc/init.d/jiance start\nchmod +x jiance   #增加执行权限\nchkconfig –add jiance #把jiance添加到系统服务列表\nchkconfig jiance on #设定jiance的开关（on/off）\nchkconfig –list jiance   #就可以看到已经注册了jiance的服务\n</code></pre><p>完成如上步骤keepalive+nginx高可用即搭建完成。</p>"},{"title":"linux—SSH（二）Rsync备份","date":"2016-09-02T06:19:28.810Z","_content":"一、Rsync软件介绍\n\nrsync从字面上的意思就是remote sync （远程同步）的意思，是类unix系统下的远程数据镜像备份工具，可以镜像保存整个目录树和文件系统，并保持原来文件的权限、时间、软硬链接等，此外它还支持匿名传输；Rsync不仅可以远程同步数据（类似于scp）还可以本地同步数据（类似于cp），但不同于cp或scp的是rsync不像cp/scp一样会覆盖以前的数据，Rsync使用所谓的“Rsync演算法”，这个算法在第一次连通完成时，会把整份文件传输一次，下一次就只传送二个文件之间不同的部份，因此速度相当快\n<!--more-->\n二、Rsync的传输方式（或工作模式）\n\nl  在本机直接运行拷贝本地文件（不使用冒号）\n\n命令格式为：rsync[OPTION]… SRC DEST。如下\n\n    [root@abao~]# rsync -av /etc /tmp\n    \nl  通过rsh或ssh的信道在server/client之间进行传输数据（使用一个冒号）\n\n需要登录到服务器上执行任务，并且需要输入账号的密码\n\n1、 将本地机器的内容拷贝到远程机器（目标路径中使用一个冒号）\n\n命令格式为：rsync[OPTION]… SRC [USER@]HOST:DEST。如下\n\n\n    [root@abao~]# rsync -av -e ssh /tmp axing@172.168.72.68:~\n\n2、 将远程机器的内容拷贝到本地机器（源路径中使用一个冒号）\n\n命令格式为：rsync[OPTION]… [USER@]HOST:SRC DEST。如下\n\n\n    [root@abao~]# rsync -av -e ssh axing@172.168.72.68:~ /tmp\n\nl  直接通过rsync的服务来传输（此时服务器端需要启动873端口，并且使用两个冒号）\n\n这种方式在远程主机上建立一个rsync的服务器，在服务器上配置好rsync的各种应用，然后本机作为rsync的一个客户端去连接远程的rsync服务器\n\n1、 从远程rsync服务器中拷贝文件到本地机（源路径中使用一个冒号）\n\n命令格式为：rsync[OPTION]… [USER@]HOST::模块名 本地位置。如下\n\n\n    [root@abao~]# rsync -av axing@172.168.72.68:：back /databack\n\n2、从本地机器拷贝文件到远程rsync服务器中（目标路径中使用一个冒号）\n\n命令格式为：rsync[OPTION]… SRC [USER@]HOST::DEST。如下\n\n    [root@abao~]# rsync -av /databack axing@172.168.72.68:：back\n    \n以上3中传输方式的差异在于有没有冒号“：”，本地端传输不需要冒号，通过rsh或ssh传输时需要一个冒号，而通过rsync传输时需要两个冒号\n\n三、Rsync的语法\n\n    -v： 查看模式可以列出很多信息包括文件名\n    \n    -r： 递归复制，可以针对目录来复制\n    \n    -u： 仅更新，如果目标文件比较新那么则保留新文件不会覆盖\n    \n    -l： 复制链接文件的属性\n    \n    -p： 连同属性一起复制\n    \n    -g： 保存源文件的属组\n    \n    -o： 保存源文件的属主\n    \n    -D： 保存源文件的设备属性\n    \n    -t： 保存原文件的时间参数\n    \n    -z： 在传输时加上压缩\n    \n    -e： 使用的协议，例如使用ssh通道就是-e ssh\n    \n    -a： 相当于-rlptgoD，是最常用的参数\n    \n    -L： 把SRC中软连接的目标文件给拷贝到DST.\n    \n    –delete：如果在DST增加文件了，而SRC当中没有这些文件，同步时会删除新增的文件\n    \n    –exclude=filename：  指定排除不需要传输的文件，等号后面跟文件名（如*.txt）\n    \n    –progress：  可以看到同步的过程状态，比如文件数量、文件传输速度等\n\n四、在本机直接运行拷贝本地文件实例\n\n    [root@abao ~]# rsync -av /etc/tmp#首次本地备份\n    \n    …………………………………………………………………\n    \n    sent 33899909 bytes  received 35626 bytes  5220851.54 bytes/sec\n    \n    total size is 33759697  speedup is 0.99\n    \n    [root@abao ~]# ll -d /tmp/etc/etc#两文件相同\n    \n    drwxr-xr-x. 126 root root12288 10月 10 08:23 /etc\n    \n    drwxr-xr-x. 126 root root12288 10月 10 08:23 /tmp/etc\n    \n    [root@abao ~]# rsync -av /etc/tmp#再次备份时只备份差异文件\n    \n    sending incremental file list\n    \n    sent 77528 bytes  received 293 bytes  155642.00 bytes/sec\n    \n    total size is 33759697  speedup is 433.81\n\n五、通过rsh或ssh的信道在server/client之间进行传输数据实例\n\n    [root@abao ~]# /etc/init.d/sshd restart\n    \n    停止 sshd：[确定]\n    \n    正在启动 sshd：[确定]\n    \nl  将本地机器的内容拷贝到远程机器\n\n    [root@abao ~]# rsync -av -e ssh /tmp admin@172.168.72.68:~\n    \n    admin@172.168.72.68’s password:   #需要输入账户密码\n    \n    …………………………………………………………………………\n    \n    sent 238637037 bytes received 60045 bytes  3819153.31bytes/sec\n    \n    total size is 238396030 speedup is 1.00\n\nl  将远程机器的内容拷贝到本地机器\n\n    [root@abao ~]# rsync -av -e ssh axing@172.168.72.68:~ /tmp\n    \n    axing@172.168.72.68’s password:   #需要输入账户密码\n    \n    receiving incremental file list\n    \n    axing/\n    \n    axing/.ICEauthority\n    \n    …………………………………………………………………\n    \n    sent 1732 bytes  received758924 bytes  80069.05 bytes/sec\n    \n    total size is 751474 speedup is 0.99\n    \n    [root@abao ~]# ll -d /tmp/axing\n    \n    drwx——. 27 500 500 4096 10月 10 08:23 /tmp/axing\n\nl  利用crontab通过ssh进行免密码异地备份脚本（常用）\n\n我们可以针对用户admin制作一个免密码登陆的ssh秘钥，这样以后异地备份系统就可以使用crontab自动备份了，前提是先根据下面（六、直接通过rsync的服务来传输实例）安装并设置好rsync\n\n1、ssh服务器端和客户端账户建立\n\n    [root@baobao ~]# mkdir /home/back; touch /home/back/wo#创建要备份的文件\n    \n    [root@baobao ~]# chmod -R 755 /home/back/\n    \n    [root@baobao ~]# useradd admin#先在ssh服务器端ssh账号\n    \n    [root@baobao ~]# passwd admin\n    \n    更改用户 admin 的密码 。\n    \n    新的 密码：\n    \n    重新输入新的 密码：\n    \n    passwd： 所有的身份验证令牌已经成功更新。\n    \n    [root@abao ~]# useradd admin  #客户端上建立ssh账号\n    \n    [root@abao ~]# passwd admin\n    \n    更改用户 admin 的密码 。\n    \n    新的 密码：\n    \n    重新输入新的 密码：\n    \n    passwd： 所有的身份验证令牌已经成功更新。\n\n2、客户端建立两把钥匙\n\n    [root@abao ~]# su – admin\n    \n    [admin@abao ~]$ ssh-keygen\n    \n    Generating public/private rsa key pair.\n    \n    Enter file in which to save the key (/home/admin/.ssh/id_rsa):\n    \n    Created directory ‘/home/admin/.ssh’.\n    \n    Enter passphrase (empty for no passphrase):\n    \n    Enter same passphrase again:\n    \n    Your identification has been saved in /home/admin/.ssh/id_rsa.\n    \n    Your public key has been saved in /home/admin/.ssh/id_rsa.pub.\n    \n    The key fingerprint is:\n    \n    61:01:c2:9b:26:00:0a:01:c9:a0:58:7e:38:f9:85:6c admin@abao\n    \n    The key’s randomart image is:\n    \n    +–[ RSA 2048]—-+\n    \n    |@o… …|\n    \n    |B+ +.o   .   |\n    \n    |+.= Eo. o|\n    \n    |  .=+. . .   |\n    \n    |   o.   S   |\n    \n    | |\n    \n    | |\n    \n    | |\n    \n    | |\n    \n    +—————–+\n    \n    [admin@abao ~]$ ls -ld ~/.ssh; ls -l ~/.ssh\n    \n    drwx——. 2 admin admin 4096 10月 10 09:21 /home/admin/.ssh\n    \n    总用量 8\n    \n    -rw——-. 1 admin admin 1675 10月 10 09:21 id_rsa\n    \n    -rw-r–r–. 1 admin admin 392 10月 10 09:21 id_rsa.pub\n\n3、将公钥文件数据上传到服务器\n\n    [admin@abao ~]$ scp ~/.ssh/id_rsa.pub admin@172.168.72.68:~#客户端上传公钥文件\n    \n    admin@172.168.72.68’s password:\n    \n    id_rsa.pub100%  3920.4KB/s   00:00\n\n4、将公钥放置到服务器端的正确目录与文件名（服务器上操作）\n\n    [root@baobao ~]# su – admin\n    \n    [admin@baobao ~]$ ls -ld .ssh\n    \n    ls: 无法访问.ssh: 没有那个文件或目录\n    \n    [admin@baobao ~]$ mkdir .ssh; chmod 700 .ssh #服务器上建立文件~/.ssh\n    \n    [admin@baobao ~]$ ls -ld .ssh\n    \n    drwx—— 2 admin admin 4096 10月 10 09:36 .ssh\n    \n    [admin@baobao ~]$ ls -l *pub\n    \n    -rw-r–r– 1 admin admin 392 10月 10 09:27 id_rsa.pub\n    \n    [admin@baobao ~]$ cat id_rsa.pub >> .ssh/authorized_keys\n    \n    [admin@baobao ~]$ chmod 644 .ssh/authorized_keys\n    \n    [admin@baobao ~]$ ls -l .ssh\n    \n    总用量 4\n    \n    -rw-r–r– 1 admin admin 392 10月 10 09:38 authorized_keys\n\n5、在客户端建立异地备份脚本\n\n    [root@abao ~]# mkdir /backups\n    \n    [root@abao ~]# chmod -R 755 /backups/\n    \n    [root@abao ~]# su – admin\n    \n    [admin@abao ~]$ mkdir ~/bin; vim ~/bin/backup.sh\n    \n    #!/bin/bash\n    \n    localdir=/backups\n    \n    remotedir=/home/back/\n    \n    remoteip=”172.168.72.68″\n    \n    [ -d ${localdir} ] || mkdir ${localdir}   #-d是判断是否有这个目录；符号“||”是逻辑或意思，左边为假时执行右边命令；小括号一般用作执行命令，而自定义变量一般用大括号括起来\n    \n    for dir in ${remotedir}\n    \n    do\n    \n    rsync -av -essh admin@${remoteip}:${dir} ${localdir}\n    \n    done\n    \n    [admin@abao ~]$ chmod 755 ~/bin/backup.sh\n    \n    [admin@abao ~]$ ls -ld /home/admin/bin/backup.sh\n    \n    -rwxrwxr-x. 1 admin admin 224 10月 11 08:49 /home/admin/bin/backup.sh\n    \n    [admin@abao ~]$ ~/bin/backup.sh   #执行脚本\n    \n    receiving incremental filelist\n    \n    sent 11 bytes  received 43 bytes  5.68 bytes/sec\n    \n    total size is 1010  speedup is 18.70\n    \n6、制作crontab计划任务\n\n    [root@abao ~]# crontab –e #每天的凌晨02:00异地备份服务器上的/etc /root /home目录到本地的/backups/下\n    0 2 * * * /home/admin/bin/backup.sh\n\n六、直接通过rsync的服务来传输实例\n\nl  创建用户账号和rsync配置文件\n\n    [root@baobao ~]# useraddadmin   #创建链接用户\n    \n    [root@baobao ~]# passwd admin\n    \n    更改用户 admin 的密码。\n    \n    新的 密码：\n    \n    重新输入新的 密码：\n    \n    passwd： 所有的身份验证令牌已经成功更新。\n    \n    [root@baobao ~]# mkdir /home/back   #创建要进行备份的目录或文件\n    \n    [root@baobao ~]# touch/home/back/guo\n    \n    [root@baobao ~]# vim/home/back/guo\n    \n    [root@baobao ~]# chmod -R 755/home/back/#设定要备份的目录或文件权限\n    \n    [root@baobao ~]# yum -yinstall xinetd\n    \n    [root@baobao ~]# yum -yinstall rsync#安装rsync\n    \n    [root@baobao ~]# yum -yinstall rsync#客户端也安装rsync\n    \n    [root@baobao ~]# touch/etc/rsyncd.conf  #默认该文件是没有的\n    \n    [root@baobao ~]# chmod 600/etc/rsyncd.conf  #修改配置文件权限\n\nl  Rsync服务器端配置文件设置\n\n配置文件时即时生效的，不用重启服务\n\n1、/etc/rsyncd.conf配置\n\n1)  全局参数配置\n\n    [root@baobao ~]# manrsyncd.conf   #查看说明文档看下面部分参数是yes/no还是true/false\n    \n    [root@baobao ~]# vim/etc/rsyncd.conf\n    \n    uid=root  #运行RSYNC守护进程的用户\n    \n    gid=root  #运行RSYNC守护进程的组\n    \n    use chroot=false  #不使用chroot\n    \n    max connections=8 #最大连接数是4\n    \n    pid file=/var/run/rsyncd.pid  #pid文件默认存放位置\n    \n    lock file=/var/run/rsync.lock #锁文件默认存放位置（锁住rsync正在操作的文件不让其他的程序对其进行写操作）\n    \n    log file=/var/log/rsyncd.log  #日志文件默认存放位置\n    \n    strict modes=true #是否检查口令文件的权限\n    port=873  #默认端口873\n    \n2)  模块参数配置(多台客户端需要设置多个模块)\n\n    [backup]   #认证的模块名，在client端需要指定\n    \n    path=/etc  #需要做备份的目录\n    \n    comment=This is backup #这个模块的注释信息\n    \n    list=true  #当用户查询该服务器上的可用模块时，该模块是被列出（true）还是被隐藏（false）\n    \n    max connections=6  #客户端最大连接数(默认0没限制)，模块里可以不设置\n    ignore errors  #可以忽略一些无关的IO错误\n    read only=false#“yes”只读客户端不能上传；“no”客户端可以上传\n    write only=false   #“yes”客户端不能下载；“no”客户端可以下载\n    \n    uid=root   #指定该模块传输文件时守护进程应该具有的uid\n    gid=root   #指定该模块传输文件时守护进程应该具有的gid\n    hosts allow=172.168.0.0/16 #允许连接的主机（“*”充许任何主机连接），多个主机用“，”分开；多个网段用空格隔开\n    hosts deny=192.168.10.0/32 #禁止连接的主机或网段\n    \n    auth users=admin   #登陆系统使用的用户名（系统必须存在的用户），没有默认为匿名\n    secrets file= /etc/rsyncd.secrets #登陆用户的密码文件（需要自己生成）\n\n2、rsync server启动文件配置\n\n    [root@baobao ~]# vim /etc/xinetd.d/rsync#只修改disable = no即可\n    \n    # default: off\n    \n    # description: The rsyncserver is a good addition to an ftp server, as it \\\n    \n    #   allows crc checksumming etc.\n    \n    service rsync\n    \n    {\n    \n    disable = no\n    \n    flags   = IPv6\n    \n    socket_type = stream\n    \n    wait= no\n    \n    user= root\n    \n    server  = /usr/bin/rsync\n    \n    server_args = –daemon\n    \n    log_on_failure  += USERID\n    \n    }\n    \n    [root@baobao ~]# chkconfigrsync on\n    \nl  创建密码文件、欢迎信息\n\n1、生成rsync密码文件并设置该文件相应权限\n    [root@baobao ~]# touch /etc/rsyncd.secrets\n    \n    [root@baobao ~]# vim /etc/rsyncd.secrets\n    \n    admin:guobaobao!1314#格式为“账号：密码”且一行一个\n    [root@baobao ~]# chown root.root /etc/rsyncd.secrets\n    \n    [root@baobao ~]# chmod 600 /etc/rsyncd.secrets\n    \n    因为rsyncd.secrets存储了rsync服务的用户名和密码，所以要将rsyncd.secrets设置为root拥有, 且权限为600\n\n2、配置欢迎信息rsyncd.motd（可有可无）\n    [root@baobao ~]# vim /etc/rsyncd.motd   #rsyncd.motd记录了rsync服务的欢迎信息\n    \n    Welcome to use the rsyncservices!\n    [root@baobao ~]# service xinetd restart\n    \n    停止 xinetd：  [确定]\n    \n    正在启动 xinetd：  [确定]\n    \nl  Rsync的启动与开机启动\n\n1、Rsync服务端启动\n\n1)  载入配置\n\n    [root@baobao ~]# rsync –daemon–config=/etc/rsyncd.conf   #载入配置并启动\n    \n    或\n    \n    [root@baobao ~]# /etc/rc.d/init.d/xinetdreload\n    \n    重新载入配置： [确定]\n\n2)  重启rsync\n\n    [root@baobao ~]# /usr/bin/rsync –daemon\n    \n    failed to create pid file/var/run/rsyncd.pid: File exists\n    \n    或\n    \n    [root@baobao ~]# /etc/rc.d/init.d/xinetdrestart#重新启动\n    \n    停止 xinetd：  [确定]\n    \n    正在启动 xinetd：  [确定]\n\n3)  检查rsync是否启动\n\n    [root@baobao ~]# netstat -lnp | grep 873#由超级进程启动\n    \n    tcp   0  0 0.0.0.0:8730.0.0.0:*LISTEN  3133/rsync\n    \n    tcp   0  0 :::873 :::*LISTEN 3133/rsync\n    \n    或\n    \n    [root@baobao ~]# netstat -a |grep rsync\n    \n    tcp0  0*:rsync *:* LISTEN\n    \n    或\n    \n    [root@baobao ~]# lsof -i:873 #端口没有被占用\n    \n    COMMAND  PID USER  FD   TYPE DEVICE SIZE/OFF NODENAME\n    \n    rsync   3133 root   4u  IPv4  22973 0t0  TCP *:rsync (LISTEN)\n    \n    rsync   3133 root   5u  IPv6  22974 0t0  TCP *:rsync (LISTEN)\n\n4)  查看rsync日志\n\n    [root@baobao ~]# cat /var/log/rsyncd.log #查看rsync日志\n    \n    2014/10/14 15:29:13 [35681] rsyncdversion 3.0.6 starting, listening on port 873\n    \n2、将rsync加入开机启动\n\n    [root@baobao ~]# echo”/usr/bin/rsync –daemon –config=/etc/rsyncd.conf”>>/etc/rc.local\n    \n    [root@baobao ~]# cat/etc/rc.local\n    \n    #!/bin/sh\n    \n    #\n    \n    # This script will beexecuted *after* all the other init scripts.\n    \n    # You can put your owninitialization stuff in here if you don’t\n    \n    # want to do the full Sys Vstyle init stuff.\n    \n    touch /var/lock/subsys/local\n    \n    /usr/bin/rsync –daemon–config=/etc/rsyncd.conf\n\nl  Rsync服务器端配置防火墙\n\n1、防火墙设置\n\n    [root@baobao ~]# iptables -F\n    \n    [root@baobao ~]# iptables -X\n    \n    [root@baobao ~]# iptables -Z\n    \n    [root@baobao ~]# iptables -AINPUT -i eth0 -s 172.168.0.0/16 -p tcp –dport 22 -j ACCEPT\n    \n    [root@baobao ~]# iptables -L\n    \n    Chain INPUT (policy ACCEPT)\n    \n    target prot opt source   destination\n    \n    ACCEPT tcp —  ACA80000.ipt.aol.com/16  anywheretcp dpt:ssh\n    \n    Chain FORWARD (policy ACCEPT)\n    \n    target prot opt source   destination\n    \n    Chain OUTPUT (policy ACCEPT)\n    \n    target prot opt source   destination\n    \n    [root@baobao ~]#/etc/init.d/iptables save\n    \n    iptables：将防火墙规则保存到 /etc/sysconfig/iptables： [确定]\n    \n    [root@baobao ~]#/etc/init.d/iptables restart\n    \n    iptables：清除防火墙规则：[确定]\n    \n    iptables：将链设置为政策 ACCEPT：filter[确定]\n    \n    iptables：正在卸载模块：  [确定]\n    \n    iptables：应用防火墙规则：[确定]\n\n2、selinux设置\n\n\n    [root@baobao ~]# setenforce 0\n\nl  客户端测试\n\n    [root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/\n    \n    Password:\n    \n    receiving incremental filelist\n    \n    created directory /backups\n    \n    ./\n    \n    guo\n    \n    sent 79 bytes  received 1162 bytes  275.78 bytes/sec\n    \n    total size is 1010  speedup is 0.81\n\n可以看到这里还是需要输入密码，这样同样也不能写入脚本中自动执行\n\nl  常见问题处理\n\n1、错误一\n\n@ERROR: chroot failed\n\nrsync error: error startingclient-server protocol (code 5) at main.c(1522) [receiver=3.0.3]\n\n原因：服务器端的目录不存在或无权限\n\n2、错误二\n\n@ERROR: auth failed on moduletee\n\nrsync error: error startingclient-server protocol (code 5) at main.c(1522) [receiver=3.0.3]\n\n原因：服务器端该模块（tee）需要验证用户名密码，但客户端没有提供正确的用户名密码，认证失败。\n\n3、错误三\n\n@ERROR: Unknown module‘tee_nonexists’\n\nrsync error: error startingclient-server protocol (code 5) at main.c(1522) [receiver=3.0.3]\n\n原因：服务器不存在指定模块\n\n4、错误四\n\npassword file must not beother-accessible\n\ncontinuing without passwordfile\n\nPassword:\n\n原因：这是因为rsyncd.pwdrsyncd.secrets的权限不对，应该设置为600\n\n5、错误五\n\nrsync: failed to connect to218.107.243.2: No route to host (113)\n\nrsync error: error in socketIO (code 10) at clientserver.c(104) [receiver=2.6.9]\n\n原因：对方没开机、防火墙阻挡、通过的网络上有防火墙阻挡，都有可能\n\n6、错误六\n\nrsync error: error startingclient-server protocol (code 5) at main.c(1524) [Receiver=3.0.7]\n\n原因：/etc/rsyncd.conf配置文件内容有错误\n\n7、错误七\n\nrsync: chown “”failed: Invalid argument (22)\n\n原因：权限无法复制，去掉同步权限的参数即可(这种情况多见于Linux向Windows的时候)\n\n8、错误八\n\n@ERROR: daemon security issue– contact admin\nrsync error: error starting client-server protocol (code 5) at main.c(1530)[sender=3.0.6]\n\n原因：同步的目录里面有软连接文件，需要服务器端的/etc/rsyncd.conf打开use chroot = yes掠过软连接文件。\n\nl  建立不需输入密码的链接\n\n这样就可以将其写入脚本和任务计划自动运行了\n\n1、第一种方案：指定密码文件\n\n    [root@abao ~]# touch/etc/pass#客户端上建立密码文件\n    \n    [root@abao ~]# vim /etc/pass #将账户“admin”密码写入\n    \n    [root@abao ~]# cat /etc/pass\n    \n    guobaobao！1314\n    \n    [root@abao ~]# chmod 600/etc/pass\n    \n    [root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/\n    \n    Password:\n    \n    @ERROR: auth failed on modulebackup\n    \n    rsync error: error startingclient-server protocol (code 5) at main.c(1503) [receiver=3.0.6]\n    \n    [root@abao ~]#\n    \n    [root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/ –password-file=/etc/pass #注意黑体部分指定密码文件\n    \n    receiving incremental filelist\n    \n    sent 57 bytes  received 106 bytes  326.00 bytes/sec\n    \n    total size is 1010  speedup is 6.20\n    \n2、第二种方案：在rsync服务器端不指定用户\n\n    [root@baobao ~]# vim/etc/rsyncd.conf   #服务器端配置文件注释掉下面认证两行\n    \n    #auth users=admin\n    \n    #secretsfile=/etc/rsyncd.secrets\n    \n    [root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/\n    \n    receiving incremental filelist\n    \n    sent 28 bytes  received 65 bytes  37.20 bytes/sec\n    \n    total size is 1010  speedup is 10.86\n    \n    或\n    \n    [root@abao ~]# rsync -av172.168.72.68::backup /backups/#不加账户默认是root\n    \n    receiving incremental filelist\n    \n    sent 28 bytes  received 65 bytes  186.00 bytes/sec\n    \n    total size is 1010  speedup is 10.86","source":"_posts/linux—SSH（二）Rsync备份.md","raw":"---\ntitle: linux—SSH（二）Rsync备份\ndate: \ntags:\n---\n一、Rsync软件介绍\n\nrsync从字面上的意思就是remote sync （远程同步）的意思，是类unix系统下的远程数据镜像备份工具，可以镜像保存整个目录树和文件系统，并保持原来文件的权限、时间、软硬链接等，此外它还支持匿名传输；Rsync不仅可以远程同步数据（类似于scp）还可以本地同步数据（类似于cp），但不同于cp或scp的是rsync不像cp/scp一样会覆盖以前的数据，Rsync使用所谓的“Rsync演算法”，这个算法在第一次连通完成时，会把整份文件传输一次，下一次就只传送二个文件之间不同的部份，因此速度相当快\n<!--more-->\n二、Rsync的传输方式（或工作模式）\n\nl  在本机直接运行拷贝本地文件（不使用冒号）\n\n命令格式为：rsync[OPTION]… SRC DEST。如下\n\n    [root@abao~]# rsync -av /etc /tmp\n    \nl  通过rsh或ssh的信道在server/client之间进行传输数据（使用一个冒号）\n\n需要登录到服务器上执行任务，并且需要输入账号的密码\n\n1、 将本地机器的内容拷贝到远程机器（目标路径中使用一个冒号）\n\n命令格式为：rsync[OPTION]… SRC [USER@]HOST:DEST。如下\n\n\n    [root@abao~]# rsync -av -e ssh /tmp axing@172.168.72.68:~\n\n2、 将远程机器的内容拷贝到本地机器（源路径中使用一个冒号）\n\n命令格式为：rsync[OPTION]… [USER@]HOST:SRC DEST。如下\n\n\n    [root@abao~]# rsync -av -e ssh axing@172.168.72.68:~ /tmp\n\nl  直接通过rsync的服务来传输（此时服务器端需要启动873端口，并且使用两个冒号）\n\n这种方式在远程主机上建立一个rsync的服务器，在服务器上配置好rsync的各种应用，然后本机作为rsync的一个客户端去连接远程的rsync服务器\n\n1、 从远程rsync服务器中拷贝文件到本地机（源路径中使用一个冒号）\n\n命令格式为：rsync[OPTION]… [USER@]HOST::模块名 本地位置。如下\n\n\n    [root@abao~]# rsync -av axing@172.168.72.68:：back /databack\n\n2、从本地机器拷贝文件到远程rsync服务器中（目标路径中使用一个冒号）\n\n命令格式为：rsync[OPTION]… SRC [USER@]HOST::DEST。如下\n\n    [root@abao~]# rsync -av /databack axing@172.168.72.68:：back\n    \n以上3中传输方式的差异在于有没有冒号“：”，本地端传输不需要冒号，通过rsh或ssh传输时需要一个冒号，而通过rsync传输时需要两个冒号\n\n三、Rsync的语法\n\n    -v： 查看模式可以列出很多信息包括文件名\n    \n    -r： 递归复制，可以针对目录来复制\n    \n    -u： 仅更新，如果目标文件比较新那么则保留新文件不会覆盖\n    \n    -l： 复制链接文件的属性\n    \n    -p： 连同属性一起复制\n    \n    -g： 保存源文件的属组\n    \n    -o： 保存源文件的属主\n    \n    -D： 保存源文件的设备属性\n    \n    -t： 保存原文件的时间参数\n    \n    -z： 在传输时加上压缩\n    \n    -e： 使用的协议，例如使用ssh通道就是-e ssh\n    \n    -a： 相当于-rlptgoD，是最常用的参数\n    \n    -L： 把SRC中软连接的目标文件给拷贝到DST.\n    \n    –delete：如果在DST增加文件了，而SRC当中没有这些文件，同步时会删除新增的文件\n    \n    –exclude=filename：  指定排除不需要传输的文件，等号后面跟文件名（如*.txt）\n    \n    –progress：  可以看到同步的过程状态，比如文件数量、文件传输速度等\n\n四、在本机直接运行拷贝本地文件实例\n\n    [root@abao ~]# rsync -av /etc/tmp#首次本地备份\n    \n    …………………………………………………………………\n    \n    sent 33899909 bytes  received 35626 bytes  5220851.54 bytes/sec\n    \n    total size is 33759697  speedup is 0.99\n    \n    [root@abao ~]# ll -d /tmp/etc/etc#两文件相同\n    \n    drwxr-xr-x. 126 root root12288 10月 10 08:23 /etc\n    \n    drwxr-xr-x. 126 root root12288 10月 10 08:23 /tmp/etc\n    \n    [root@abao ~]# rsync -av /etc/tmp#再次备份时只备份差异文件\n    \n    sending incremental file list\n    \n    sent 77528 bytes  received 293 bytes  155642.00 bytes/sec\n    \n    total size is 33759697  speedup is 433.81\n\n五、通过rsh或ssh的信道在server/client之间进行传输数据实例\n\n    [root@abao ~]# /etc/init.d/sshd restart\n    \n    停止 sshd：[确定]\n    \n    正在启动 sshd：[确定]\n    \nl  将本地机器的内容拷贝到远程机器\n\n    [root@abao ~]# rsync -av -e ssh /tmp admin@172.168.72.68:~\n    \n    admin@172.168.72.68’s password:   #需要输入账户密码\n    \n    …………………………………………………………………………\n    \n    sent 238637037 bytes received 60045 bytes  3819153.31bytes/sec\n    \n    total size is 238396030 speedup is 1.00\n\nl  将远程机器的内容拷贝到本地机器\n\n    [root@abao ~]# rsync -av -e ssh axing@172.168.72.68:~ /tmp\n    \n    axing@172.168.72.68’s password:   #需要输入账户密码\n    \n    receiving incremental file list\n    \n    axing/\n    \n    axing/.ICEauthority\n    \n    …………………………………………………………………\n    \n    sent 1732 bytes  received758924 bytes  80069.05 bytes/sec\n    \n    total size is 751474 speedup is 0.99\n    \n    [root@abao ~]# ll -d /tmp/axing\n    \n    drwx——. 27 500 500 4096 10月 10 08:23 /tmp/axing\n\nl  利用crontab通过ssh进行免密码异地备份脚本（常用）\n\n我们可以针对用户admin制作一个免密码登陆的ssh秘钥，这样以后异地备份系统就可以使用crontab自动备份了，前提是先根据下面（六、直接通过rsync的服务来传输实例）安装并设置好rsync\n\n1、ssh服务器端和客户端账户建立\n\n    [root@baobao ~]# mkdir /home/back; touch /home/back/wo#创建要备份的文件\n    \n    [root@baobao ~]# chmod -R 755 /home/back/\n    \n    [root@baobao ~]# useradd admin#先在ssh服务器端ssh账号\n    \n    [root@baobao ~]# passwd admin\n    \n    更改用户 admin 的密码 。\n    \n    新的 密码：\n    \n    重新输入新的 密码：\n    \n    passwd： 所有的身份验证令牌已经成功更新。\n    \n    [root@abao ~]# useradd admin  #客户端上建立ssh账号\n    \n    [root@abao ~]# passwd admin\n    \n    更改用户 admin 的密码 。\n    \n    新的 密码：\n    \n    重新输入新的 密码：\n    \n    passwd： 所有的身份验证令牌已经成功更新。\n\n2、客户端建立两把钥匙\n\n    [root@abao ~]# su – admin\n    \n    [admin@abao ~]$ ssh-keygen\n    \n    Generating public/private rsa key pair.\n    \n    Enter file in which to save the key (/home/admin/.ssh/id_rsa):\n    \n    Created directory ‘/home/admin/.ssh’.\n    \n    Enter passphrase (empty for no passphrase):\n    \n    Enter same passphrase again:\n    \n    Your identification has been saved in /home/admin/.ssh/id_rsa.\n    \n    Your public key has been saved in /home/admin/.ssh/id_rsa.pub.\n    \n    The key fingerprint is:\n    \n    61:01:c2:9b:26:00:0a:01:c9:a0:58:7e:38:f9:85:6c admin@abao\n    \n    The key’s randomart image is:\n    \n    +–[ RSA 2048]—-+\n    \n    |@o… …|\n    \n    |B+ +.o   .   |\n    \n    |+.= Eo. o|\n    \n    |  .=+. . .   |\n    \n    |   o.   S   |\n    \n    | |\n    \n    | |\n    \n    | |\n    \n    | |\n    \n    +—————–+\n    \n    [admin@abao ~]$ ls -ld ~/.ssh; ls -l ~/.ssh\n    \n    drwx——. 2 admin admin 4096 10月 10 09:21 /home/admin/.ssh\n    \n    总用量 8\n    \n    -rw——-. 1 admin admin 1675 10月 10 09:21 id_rsa\n    \n    -rw-r–r–. 1 admin admin 392 10月 10 09:21 id_rsa.pub\n\n3、将公钥文件数据上传到服务器\n\n    [admin@abao ~]$ scp ~/.ssh/id_rsa.pub admin@172.168.72.68:~#客户端上传公钥文件\n    \n    admin@172.168.72.68’s password:\n    \n    id_rsa.pub100%  3920.4KB/s   00:00\n\n4、将公钥放置到服务器端的正确目录与文件名（服务器上操作）\n\n    [root@baobao ~]# su – admin\n    \n    [admin@baobao ~]$ ls -ld .ssh\n    \n    ls: 无法访问.ssh: 没有那个文件或目录\n    \n    [admin@baobao ~]$ mkdir .ssh; chmod 700 .ssh #服务器上建立文件~/.ssh\n    \n    [admin@baobao ~]$ ls -ld .ssh\n    \n    drwx—— 2 admin admin 4096 10月 10 09:36 .ssh\n    \n    [admin@baobao ~]$ ls -l *pub\n    \n    -rw-r–r– 1 admin admin 392 10月 10 09:27 id_rsa.pub\n    \n    [admin@baobao ~]$ cat id_rsa.pub >> .ssh/authorized_keys\n    \n    [admin@baobao ~]$ chmod 644 .ssh/authorized_keys\n    \n    [admin@baobao ~]$ ls -l .ssh\n    \n    总用量 4\n    \n    -rw-r–r– 1 admin admin 392 10月 10 09:38 authorized_keys\n\n5、在客户端建立异地备份脚本\n\n    [root@abao ~]# mkdir /backups\n    \n    [root@abao ~]# chmod -R 755 /backups/\n    \n    [root@abao ~]# su – admin\n    \n    [admin@abao ~]$ mkdir ~/bin; vim ~/bin/backup.sh\n    \n    #!/bin/bash\n    \n    localdir=/backups\n    \n    remotedir=/home/back/\n    \n    remoteip=”172.168.72.68″\n    \n    [ -d ${localdir} ] || mkdir ${localdir}   #-d是判断是否有这个目录；符号“||”是逻辑或意思，左边为假时执行右边命令；小括号一般用作执行命令，而自定义变量一般用大括号括起来\n    \n    for dir in ${remotedir}\n    \n    do\n    \n    rsync -av -essh admin@${remoteip}:${dir} ${localdir}\n    \n    done\n    \n    [admin@abao ~]$ chmod 755 ~/bin/backup.sh\n    \n    [admin@abao ~]$ ls -ld /home/admin/bin/backup.sh\n    \n    -rwxrwxr-x. 1 admin admin 224 10月 11 08:49 /home/admin/bin/backup.sh\n    \n    [admin@abao ~]$ ~/bin/backup.sh   #执行脚本\n    \n    receiving incremental filelist\n    \n    sent 11 bytes  received 43 bytes  5.68 bytes/sec\n    \n    total size is 1010  speedup is 18.70\n    \n6、制作crontab计划任务\n\n    [root@abao ~]# crontab –e #每天的凌晨02:00异地备份服务器上的/etc /root /home目录到本地的/backups/下\n    0 2 * * * /home/admin/bin/backup.sh\n\n六、直接通过rsync的服务来传输实例\n\nl  创建用户账号和rsync配置文件\n\n    [root@baobao ~]# useraddadmin   #创建链接用户\n    \n    [root@baobao ~]# passwd admin\n    \n    更改用户 admin 的密码。\n    \n    新的 密码：\n    \n    重新输入新的 密码：\n    \n    passwd： 所有的身份验证令牌已经成功更新。\n    \n    [root@baobao ~]# mkdir /home/back   #创建要进行备份的目录或文件\n    \n    [root@baobao ~]# touch/home/back/guo\n    \n    [root@baobao ~]# vim/home/back/guo\n    \n    [root@baobao ~]# chmod -R 755/home/back/#设定要备份的目录或文件权限\n    \n    [root@baobao ~]# yum -yinstall xinetd\n    \n    [root@baobao ~]# yum -yinstall rsync#安装rsync\n    \n    [root@baobao ~]# yum -yinstall rsync#客户端也安装rsync\n    \n    [root@baobao ~]# touch/etc/rsyncd.conf  #默认该文件是没有的\n    \n    [root@baobao ~]# chmod 600/etc/rsyncd.conf  #修改配置文件权限\n\nl  Rsync服务器端配置文件设置\n\n配置文件时即时生效的，不用重启服务\n\n1、/etc/rsyncd.conf配置\n\n1)  全局参数配置\n\n    [root@baobao ~]# manrsyncd.conf   #查看说明文档看下面部分参数是yes/no还是true/false\n    \n    [root@baobao ~]# vim/etc/rsyncd.conf\n    \n    uid=root  #运行RSYNC守护进程的用户\n    \n    gid=root  #运行RSYNC守护进程的组\n    \n    use chroot=false  #不使用chroot\n    \n    max connections=8 #最大连接数是4\n    \n    pid file=/var/run/rsyncd.pid  #pid文件默认存放位置\n    \n    lock file=/var/run/rsync.lock #锁文件默认存放位置（锁住rsync正在操作的文件不让其他的程序对其进行写操作）\n    \n    log file=/var/log/rsyncd.log  #日志文件默认存放位置\n    \n    strict modes=true #是否检查口令文件的权限\n    port=873  #默认端口873\n    \n2)  模块参数配置(多台客户端需要设置多个模块)\n\n    [backup]   #认证的模块名，在client端需要指定\n    \n    path=/etc  #需要做备份的目录\n    \n    comment=This is backup #这个模块的注释信息\n    \n    list=true  #当用户查询该服务器上的可用模块时，该模块是被列出（true）还是被隐藏（false）\n    \n    max connections=6  #客户端最大连接数(默认0没限制)，模块里可以不设置\n    ignore errors  #可以忽略一些无关的IO错误\n    read only=false#“yes”只读客户端不能上传；“no”客户端可以上传\n    write only=false   #“yes”客户端不能下载；“no”客户端可以下载\n    \n    uid=root   #指定该模块传输文件时守护进程应该具有的uid\n    gid=root   #指定该模块传输文件时守护进程应该具有的gid\n    hosts allow=172.168.0.0/16 #允许连接的主机（“*”充许任何主机连接），多个主机用“，”分开；多个网段用空格隔开\n    hosts deny=192.168.10.0/32 #禁止连接的主机或网段\n    \n    auth users=admin   #登陆系统使用的用户名（系统必须存在的用户），没有默认为匿名\n    secrets file= /etc/rsyncd.secrets #登陆用户的密码文件（需要自己生成）\n\n2、rsync server启动文件配置\n\n    [root@baobao ~]# vim /etc/xinetd.d/rsync#只修改disable = no即可\n    \n    # default: off\n    \n    # description: The rsyncserver is a good addition to an ftp server, as it \\\n    \n    #   allows crc checksumming etc.\n    \n    service rsync\n    \n    {\n    \n    disable = no\n    \n    flags   = IPv6\n    \n    socket_type = stream\n    \n    wait= no\n    \n    user= root\n    \n    server  = /usr/bin/rsync\n    \n    server_args = –daemon\n    \n    log_on_failure  += USERID\n    \n    }\n    \n    [root@baobao ~]# chkconfigrsync on\n    \nl  创建密码文件、欢迎信息\n\n1、生成rsync密码文件并设置该文件相应权限\n    [root@baobao ~]# touch /etc/rsyncd.secrets\n    \n    [root@baobao ~]# vim /etc/rsyncd.secrets\n    \n    admin:guobaobao!1314#格式为“账号：密码”且一行一个\n    [root@baobao ~]# chown root.root /etc/rsyncd.secrets\n    \n    [root@baobao ~]# chmod 600 /etc/rsyncd.secrets\n    \n    因为rsyncd.secrets存储了rsync服务的用户名和密码，所以要将rsyncd.secrets设置为root拥有, 且权限为600\n\n2、配置欢迎信息rsyncd.motd（可有可无）\n    [root@baobao ~]# vim /etc/rsyncd.motd   #rsyncd.motd记录了rsync服务的欢迎信息\n    \n    Welcome to use the rsyncservices!\n    [root@baobao ~]# service xinetd restart\n    \n    停止 xinetd：  [确定]\n    \n    正在启动 xinetd：  [确定]\n    \nl  Rsync的启动与开机启动\n\n1、Rsync服务端启动\n\n1)  载入配置\n\n    [root@baobao ~]# rsync –daemon–config=/etc/rsyncd.conf   #载入配置并启动\n    \n    或\n    \n    [root@baobao ~]# /etc/rc.d/init.d/xinetdreload\n    \n    重新载入配置： [确定]\n\n2)  重启rsync\n\n    [root@baobao ~]# /usr/bin/rsync –daemon\n    \n    failed to create pid file/var/run/rsyncd.pid: File exists\n    \n    或\n    \n    [root@baobao ~]# /etc/rc.d/init.d/xinetdrestart#重新启动\n    \n    停止 xinetd：  [确定]\n    \n    正在启动 xinetd：  [确定]\n\n3)  检查rsync是否启动\n\n    [root@baobao ~]# netstat -lnp | grep 873#由超级进程启动\n    \n    tcp   0  0 0.0.0.0:8730.0.0.0:*LISTEN  3133/rsync\n    \n    tcp   0  0 :::873 :::*LISTEN 3133/rsync\n    \n    或\n    \n    [root@baobao ~]# netstat -a |grep rsync\n    \n    tcp0  0*:rsync *:* LISTEN\n    \n    或\n    \n    [root@baobao ~]# lsof -i:873 #端口没有被占用\n    \n    COMMAND  PID USER  FD   TYPE DEVICE SIZE/OFF NODENAME\n    \n    rsync   3133 root   4u  IPv4  22973 0t0  TCP *:rsync (LISTEN)\n    \n    rsync   3133 root   5u  IPv6  22974 0t0  TCP *:rsync (LISTEN)\n\n4)  查看rsync日志\n\n    [root@baobao ~]# cat /var/log/rsyncd.log #查看rsync日志\n    \n    2014/10/14 15:29:13 [35681] rsyncdversion 3.0.6 starting, listening on port 873\n    \n2、将rsync加入开机启动\n\n    [root@baobao ~]# echo”/usr/bin/rsync –daemon –config=/etc/rsyncd.conf”>>/etc/rc.local\n    \n    [root@baobao ~]# cat/etc/rc.local\n    \n    #!/bin/sh\n    \n    #\n    \n    # This script will beexecuted *after* all the other init scripts.\n    \n    # You can put your owninitialization stuff in here if you don’t\n    \n    # want to do the full Sys Vstyle init stuff.\n    \n    touch /var/lock/subsys/local\n    \n    /usr/bin/rsync –daemon–config=/etc/rsyncd.conf\n\nl  Rsync服务器端配置防火墙\n\n1、防火墙设置\n\n    [root@baobao ~]# iptables -F\n    \n    [root@baobao ~]# iptables -X\n    \n    [root@baobao ~]# iptables -Z\n    \n    [root@baobao ~]# iptables -AINPUT -i eth0 -s 172.168.0.0/16 -p tcp –dport 22 -j ACCEPT\n    \n    [root@baobao ~]# iptables -L\n    \n    Chain INPUT (policy ACCEPT)\n    \n    target prot opt source   destination\n    \n    ACCEPT tcp —  ACA80000.ipt.aol.com/16  anywheretcp dpt:ssh\n    \n    Chain FORWARD (policy ACCEPT)\n    \n    target prot opt source   destination\n    \n    Chain OUTPUT (policy ACCEPT)\n    \n    target prot opt source   destination\n    \n    [root@baobao ~]#/etc/init.d/iptables save\n    \n    iptables：将防火墙规则保存到 /etc/sysconfig/iptables： [确定]\n    \n    [root@baobao ~]#/etc/init.d/iptables restart\n    \n    iptables：清除防火墙规则：[确定]\n    \n    iptables：将链设置为政策 ACCEPT：filter[确定]\n    \n    iptables：正在卸载模块：  [确定]\n    \n    iptables：应用防火墙规则：[确定]\n\n2、selinux设置\n\n\n    [root@baobao ~]# setenforce 0\n\nl  客户端测试\n\n    [root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/\n    \n    Password:\n    \n    receiving incremental filelist\n    \n    created directory /backups\n    \n    ./\n    \n    guo\n    \n    sent 79 bytes  received 1162 bytes  275.78 bytes/sec\n    \n    total size is 1010  speedup is 0.81\n\n可以看到这里还是需要输入密码，这样同样也不能写入脚本中自动执行\n\nl  常见问题处理\n\n1、错误一\n\n@ERROR: chroot failed\n\nrsync error: error startingclient-server protocol (code 5) at main.c(1522) [receiver=3.0.3]\n\n原因：服务器端的目录不存在或无权限\n\n2、错误二\n\n@ERROR: auth failed on moduletee\n\nrsync error: error startingclient-server protocol (code 5) at main.c(1522) [receiver=3.0.3]\n\n原因：服务器端该模块（tee）需要验证用户名密码，但客户端没有提供正确的用户名密码，认证失败。\n\n3、错误三\n\n@ERROR: Unknown module‘tee_nonexists’\n\nrsync error: error startingclient-server protocol (code 5) at main.c(1522) [receiver=3.0.3]\n\n原因：服务器不存在指定模块\n\n4、错误四\n\npassword file must not beother-accessible\n\ncontinuing without passwordfile\n\nPassword:\n\n原因：这是因为rsyncd.pwdrsyncd.secrets的权限不对，应该设置为600\n\n5、错误五\n\nrsync: failed to connect to218.107.243.2: No route to host (113)\n\nrsync error: error in socketIO (code 10) at clientserver.c(104) [receiver=2.6.9]\n\n原因：对方没开机、防火墙阻挡、通过的网络上有防火墙阻挡，都有可能\n\n6、错误六\n\nrsync error: error startingclient-server protocol (code 5) at main.c(1524) [Receiver=3.0.7]\n\n原因：/etc/rsyncd.conf配置文件内容有错误\n\n7、错误七\n\nrsync: chown “”failed: Invalid argument (22)\n\n原因：权限无法复制，去掉同步权限的参数即可(这种情况多见于Linux向Windows的时候)\n\n8、错误八\n\n@ERROR: daemon security issue– contact admin\nrsync error: error starting client-server protocol (code 5) at main.c(1530)[sender=3.0.6]\n\n原因：同步的目录里面有软连接文件，需要服务器端的/etc/rsyncd.conf打开use chroot = yes掠过软连接文件。\n\nl  建立不需输入密码的链接\n\n这样就可以将其写入脚本和任务计划自动运行了\n\n1、第一种方案：指定密码文件\n\n    [root@abao ~]# touch/etc/pass#客户端上建立密码文件\n    \n    [root@abao ~]# vim /etc/pass #将账户“admin”密码写入\n    \n    [root@abao ~]# cat /etc/pass\n    \n    guobaobao！1314\n    \n    [root@abao ~]# chmod 600/etc/pass\n    \n    [root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/\n    \n    Password:\n    \n    @ERROR: auth failed on modulebackup\n    \n    rsync error: error startingclient-server protocol (code 5) at main.c(1503) [receiver=3.0.6]\n    \n    [root@abao ~]#\n    \n    [root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/ –password-file=/etc/pass #注意黑体部分指定密码文件\n    \n    receiving incremental filelist\n    \n    sent 57 bytes  received 106 bytes  326.00 bytes/sec\n    \n    total size is 1010  speedup is 6.20\n    \n2、第二种方案：在rsync服务器端不指定用户\n\n    [root@baobao ~]# vim/etc/rsyncd.conf   #服务器端配置文件注释掉下面认证两行\n    \n    #auth users=admin\n    \n    #secretsfile=/etc/rsyncd.secrets\n    \n    [root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/\n    \n    receiving incremental filelist\n    \n    sent 28 bytes  received 65 bytes  37.20 bytes/sec\n    \n    total size is 1010  speedup is 10.86\n    \n    或\n    \n    [root@abao ~]# rsync -av172.168.72.68::backup /backups/#不加账户默认是root\n    \n    receiving incremental filelist\n    \n    sent 28 bytes  received 65 bytes  186.00 bytes/sec\n    \n    total size is 1010  speedup is 10.86","slug":"linux—SSH（二）Rsync备份","published":1,"updated":"2016-09-02T06:15:22.000Z","_id":"cisldejk9000ckgpvl7wtuuhu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一、Rsync软件介绍</p>\n<p>rsync从字面上的意思就是remote sync （远程同步）的意思，是类unix系统下的远程数据镜像备份工具，可以镜像保存整个目录树和文件系统，并保持原来文件的权限、时间、软硬链接等，此外它还支持匿名传输；Rsync不仅可以远程同步数据（类似于scp）还可以本地同步数据（类似于cp），但不同于cp或scp的是rsync不像cp/scp一样会覆盖以前的数据，Rsync使用所谓的“Rsync演算法”，这个算法在第一次连通完成时，会把整份文件传输一次，下一次就只传送二个文件之间不同的部份，因此速度相当快<br><a id=\"more\"></a><br>二、Rsync的传输方式（或工作模式）</p>\n<p>l  在本机直接运行拷贝本地文件（不使用冒号）</p>\n<p>命令格式为：rsync[OPTION]… SRC DEST。如下</p>\n<pre><code>[root@abao~]# rsync -av /etc /tmp\n</code></pre><p>l  通过rsh或ssh的信道在server/client之间进行传输数据（使用一个冒号）</p>\n<p>需要登录到服务器上执行任务，并且需要输入账号的密码</p>\n<p>1、 将本地机器的内容拷贝到远程机器（目标路径中使用一个冒号）</p>\n<p>命令格式为：rsync[OPTION]… SRC [USER@]HOST:DEST。如下</p>\n<pre><code>[root@abao~]# rsync -av -e ssh /tmp axing@172.168.72.68:~\n</code></pre><p>2、 将远程机器的内容拷贝到本地机器（源路径中使用一个冒号）</p>\n<p>命令格式为：rsync[OPTION]… [USER@]HOST:SRC DEST。如下</p>\n<pre><code>[root@abao~]# rsync -av -e ssh axing@172.168.72.68:~ /tmp\n</code></pre><p>l  直接通过rsync的服务来传输（此时服务器端需要启动873端口，并且使用两个冒号）</p>\n<p>这种方式在远程主机上建立一个rsync的服务器，在服务器上配置好rsync的各种应用，然后本机作为rsync的一个客户端去连接远程的rsync服务器</p>\n<p>1、 从远程rsync服务器中拷贝文件到本地机（源路径中使用一个冒号）</p>\n<p>命令格式为：rsync[OPTION]… [USER@]HOST::模块名 本地位置。如下</p>\n<pre><code>[root@abao~]# rsync -av axing@172.168.72.68:：back /databack\n</code></pre><p>2、从本地机器拷贝文件到远程rsync服务器中（目标路径中使用一个冒号）</p>\n<p>命令格式为：rsync[OPTION]… SRC [USER@]HOST::DEST。如下</p>\n<pre><code>[root@abao~]# rsync -av /databack axing@172.168.72.68:：back\n</code></pre><p>以上3中传输方式的差异在于有没有冒号“：”，本地端传输不需要冒号，通过rsh或ssh传输时需要一个冒号，而通过rsync传输时需要两个冒号</p>\n<p>三、Rsync的语法</p>\n<pre><code>-v： 查看模式可以列出很多信息包括文件名\n\n-r： 递归复制，可以针对目录来复制\n\n-u： 仅更新，如果目标文件比较新那么则保留新文件不会覆盖\n\n-l： 复制链接文件的属性\n\n-p： 连同属性一起复制\n\n-g： 保存源文件的属组\n\n-o： 保存源文件的属主\n\n-D： 保存源文件的设备属性\n\n-t： 保存原文件的时间参数\n\n-z： 在传输时加上压缩\n\n-e： 使用的协议，例如使用ssh通道就是-e ssh\n\n-a： 相当于-rlptgoD，是最常用的参数\n\n-L： 把SRC中软连接的目标文件给拷贝到DST.\n\n–delete：如果在DST增加文件了，而SRC当中没有这些文件，同步时会删除新增的文件\n\n–exclude=filename：  指定排除不需要传输的文件，等号后面跟文件名（如*.txt）\n\n–progress：  可以看到同步的过程状态，比如文件数量、文件传输速度等\n</code></pre><p>四、在本机直接运行拷贝本地文件实例</p>\n<pre><code>[root@abao ~]# rsync -av /etc/tmp#首次本地备份\n\n…………………………………………………………………\n\nsent 33899909 bytes  received 35626 bytes  5220851.54 bytes/sec\n\ntotal size is 33759697  speedup is 0.99\n\n[root@abao ~]# ll -d /tmp/etc/etc#两文件相同\n\ndrwxr-xr-x. 126 root root12288 10月 10 08:23 /etc\n\ndrwxr-xr-x. 126 root root12288 10月 10 08:23 /tmp/etc\n\n[root@abao ~]# rsync -av /etc/tmp#再次备份时只备份差异文件\n\nsending incremental file list\n\nsent 77528 bytes  received 293 bytes  155642.00 bytes/sec\n\ntotal size is 33759697  speedup is 433.81\n</code></pre><p>五、通过rsh或ssh的信道在server/client之间进行传输数据实例</p>\n<pre><code>[root@abao ~]# /etc/init.d/sshd restart\n\n停止 sshd：[确定]\n\n正在启动 sshd：[确定]\n</code></pre><p>l  将本地机器的内容拷贝到远程机器</p>\n<pre><code>[root@abao ~]# rsync -av -e ssh /tmp admin@172.168.72.68:~\n\nadmin@172.168.72.68’s password:   #需要输入账户密码\n\n…………………………………………………………………………\n\nsent 238637037 bytes received 60045 bytes  3819153.31bytes/sec\n\ntotal size is 238396030 speedup is 1.00\n</code></pre><p>l  将远程机器的内容拷贝到本地机器</p>\n<pre><code>[root@abao ~]# rsync -av -e ssh axing@172.168.72.68:~ /tmp\n\naxing@172.168.72.68’s password:   #需要输入账户密码\n\nreceiving incremental file list\n\naxing/\n\naxing/.ICEauthority\n\n…………………………………………………………………\n\nsent 1732 bytes  received758924 bytes  80069.05 bytes/sec\n\ntotal size is 751474 speedup is 0.99\n\n[root@abao ~]# ll -d /tmp/axing\n\ndrwx——. 27 500 500 4096 10月 10 08:23 /tmp/axing\n</code></pre><p>l  利用crontab通过ssh进行免密码异地备份脚本（常用）</p>\n<p>我们可以针对用户admin制作一个免密码登陆的ssh秘钥，这样以后异地备份系统就可以使用crontab自动备份了，前提是先根据下面（六、直接通过rsync的服务来传输实例）安装并设置好rsync</p>\n<p>1、ssh服务器端和客户端账户建立</p>\n<pre><code>[root@baobao ~]# mkdir /home/back; touch /home/back/wo#创建要备份的文件\n\n[root@baobao ~]# chmod -R 755 /home/back/\n\n[root@baobao ~]# useradd admin#先在ssh服务器端ssh账号\n\n[root@baobao ~]# passwd admin\n\n更改用户 admin 的密码 。\n\n新的 密码：\n\n重新输入新的 密码：\n\npasswd： 所有的身份验证令牌已经成功更新。\n\n[root@abao ~]# useradd admin  #客户端上建立ssh账号\n\n[root@abao ~]# passwd admin\n\n更改用户 admin 的密码 。\n\n新的 密码：\n\n重新输入新的 密码：\n\npasswd： 所有的身份验证令牌已经成功更新。\n</code></pre><p>2、客户端建立两把钥匙</p>\n<pre><code>[root@abao ~]# su – admin\n\n[admin@abao ~]$ ssh-keygen\n\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/home/admin/.ssh/id_rsa):\n\nCreated directory ‘/home/admin/.ssh’.\n\nEnter passphrase (empty for no passphrase):\n\nEnter same passphrase again:\n\nYour identification has been saved in /home/admin/.ssh/id_rsa.\n\nYour public key has been saved in /home/admin/.ssh/id_rsa.pub.\n\nThe key fingerprint is:\n\n61:01:c2:9b:26:00:0a:01:c9:a0:58:7e:38:f9:85:6c admin@abao\n\nThe key’s randomart image is:\n\n+–[ RSA 2048]—-+\n\n|@o… …|\n\n|B+ +.o   .   |\n\n|+.= Eo. o|\n\n|  .=+. . .   |\n\n|   o.   S   |\n\n| |\n\n| |\n\n| |\n\n| |\n\n+—————–+\n\n[admin@abao ~]$ ls -ld ~/.ssh; ls -l ~/.ssh\n\ndrwx——. 2 admin admin 4096 10月 10 09:21 /home/admin/.ssh\n\n总用量 8\n\n-rw——-. 1 admin admin 1675 10月 10 09:21 id_rsa\n\n-rw-r–r–. 1 admin admin 392 10月 10 09:21 id_rsa.pub\n</code></pre><p>3、将公钥文件数据上传到服务器</p>\n<pre><code>[admin@abao ~]$ scp ~/.ssh/id_rsa.pub admin@172.168.72.68:~#客户端上传公钥文件\n\nadmin@172.168.72.68’s password:\n\nid_rsa.pub100%  3920.4KB/s   00:00\n</code></pre><p>4、将公钥放置到服务器端的正确目录与文件名（服务器上操作）</p>\n<pre><code>[root@baobao ~]# su – admin\n\n[admin@baobao ~]$ ls -ld .ssh\n\nls: 无法访问.ssh: 没有那个文件或目录\n\n[admin@baobao ~]$ mkdir .ssh; chmod 700 .ssh #服务器上建立文件~/.ssh\n\n[admin@baobao ~]$ ls -ld .ssh\n\ndrwx—— 2 admin admin 4096 10月 10 09:36 .ssh\n\n[admin@baobao ~]$ ls -l *pub\n\n-rw-r–r– 1 admin admin 392 10月 10 09:27 id_rsa.pub\n\n[admin@baobao ~]$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys\n\n[admin@baobao ~]$ chmod 644 .ssh/authorized_keys\n\n[admin@baobao ~]$ ls -l .ssh\n\n总用量 4\n\n-rw-r–r– 1 admin admin 392 10月 10 09:38 authorized_keys\n</code></pre><p>5、在客户端建立异地备份脚本</p>\n<pre><code>[root@abao ~]# mkdir /backups\n\n[root@abao ~]# chmod -R 755 /backups/\n\n[root@abao ~]# su – admin\n\n[admin@abao ~]$ mkdir ~/bin; vim ~/bin/backup.sh\n\n#!/bin/bash\n\nlocaldir=/backups\n\nremotedir=/home/back/\n\nremoteip=”172.168.72.68″\n\n[ -d ${localdir} ] || mkdir ${localdir}   #-d是判断是否有这个目录；符号“||”是逻辑或意思，左边为假时执行右边命令；小括号一般用作执行命令，而自定义变量一般用大括号括起来\n\nfor dir in ${remotedir}\n\ndo\n\nrsync -av -essh admin@${remoteip}:${dir} ${localdir}\n\ndone\n\n[admin@abao ~]$ chmod 755 ~/bin/backup.sh\n\n[admin@abao ~]$ ls -ld /home/admin/bin/backup.sh\n\n-rwxrwxr-x. 1 admin admin 224 10月 11 08:49 /home/admin/bin/backup.sh\n\n[admin@abao ~]$ ~/bin/backup.sh   #执行脚本\n\nreceiving incremental filelist\n\nsent 11 bytes  received 43 bytes  5.68 bytes/sec\n\ntotal size is 1010  speedup is 18.70\n</code></pre><p>6、制作crontab计划任务</p>\n<pre><code>[root@abao ~]# crontab –e #每天的凌晨02:00异地备份服务器上的/etc /root /home目录到本地的/backups/下\n0 2 * * * /home/admin/bin/backup.sh\n</code></pre><p>六、直接通过rsync的服务来传输实例</p>\n<p>l  创建用户账号和rsync配置文件</p>\n<pre><code>[root@baobao ~]# useraddadmin   #创建链接用户\n\n[root@baobao ~]# passwd admin\n\n更改用户 admin 的密码。\n\n新的 密码：\n\n重新输入新的 密码：\n\npasswd： 所有的身份验证令牌已经成功更新。\n\n[root@baobao ~]# mkdir /home/back   #创建要进行备份的目录或文件\n\n[root@baobao ~]# touch/home/back/guo\n\n[root@baobao ~]# vim/home/back/guo\n\n[root@baobao ~]# chmod -R 755/home/back/#设定要备份的目录或文件权限\n\n[root@baobao ~]# yum -yinstall xinetd\n\n[root@baobao ~]# yum -yinstall rsync#安装rsync\n\n[root@baobao ~]# yum -yinstall rsync#客户端也安装rsync\n\n[root@baobao ~]# touch/etc/rsyncd.conf  #默认该文件是没有的\n\n[root@baobao ~]# chmod 600/etc/rsyncd.conf  #修改配置文件权限\n</code></pre><p>l  Rsync服务器端配置文件设置</p>\n<p>配置文件时即时生效的，不用重启服务</p>\n<p>1、/etc/rsyncd.conf配置</p>\n<p>1)  全局参数配置</p>\n<pre><code>[root@baobao ~]# manrsyncd.conf   #查看说明文档看下面部分参数是yes/no还是true/false\n\n[root@baobao ~]# vim/etc/rsyncd.conf\n\nuid=root  #运行RSYNC守护进程的用户\n\ngid=root  #运行RSYNC守护进程的组\n\nuse chroot=false  #不使用chroot\n\nmax connections=8 #最大连接数是4\n\npid file=/var/run/rsyncd.pid  #pid文件默认存放位置\n\nlock file=/var/run/rsync.lock #锁文件默认存放位置（锁住rsync正在操作的文件不让其他的程序对其进行写操作）\n\nlog file=/var/log/rsyncd.log  #日志文件默认存放位置\n\nstrict modes=true #是否检查口令文件的权限\nport=873  #默认端口873\n</code></pre><p>2)  模块参数配置(多台客户端需要设置多个模块)</p>\n<pre><code>[backup]   #认证的模块名，在client端需要指定\n\npath=/etc  #需要做备份的目录\n\ncomment=This is backup #这个模块的注释信息\n\nlist=true  #当用户查询该服务器上的可用模块时，该模块是被列出（true）还是被隐藏（false）\n\nmax connections=6  #客户端最大连接数(默认0没限制)，模块里可以不设置\nignore errors  #可以忽略一些无关的IO错误\nread only=false#“yes”只读客户端不能上传；“no”客户端可以上传\nwrite only=false   #“yes”客户端不能下载；“no”客户端可以下载\n\nuid=root   #指定该模块传输文件时守护进程应该具有的uid\ngid=root   #指定该模块传输文件时守护进程应该具有的gid\nhosts allow=172.168.0.0/16 #允许连接的主机（“*”充许任何主机连接），多个主机用“，”分开；多个网段用空格隔开\nhosts deny=192.168.10.0/32 #禁止连接的主机或网段\n\nauth users=admin   #登陆系统使用的用户名（系统必须存在的用户），没有默认为匿名\nsecrets file= /etc/rsyncd.secrets #登陆用户的密码文件（需要自己生成）\n</code></pre><p>2、rsync server启动文件配置</p>\n<pre><code>[root@baobao ~]# vim /etc/xinetd.d/rsync#只修改disable = no即可\n\n# default: off\n\n# description: The rsyncserver is a good addition to an ftp server, as it \\\n\n#   allows crc checksumming etc.\n\nservice rsync\n\n{\n\ndisable = no\n\nflags   = IPv6\n\nsocket_type = stream\n\nwait= no\n\nuser= root\n\nserver  = /usr/bin/rsync\n\nserver_args = –daemon\n\nlog_on_failure  += USERID\n\n}\n\n[root@baobao ~]# chkconfigrsync on\n</code></pre><p>l  创建密码文件、欢迎信息</p>\n<p>1、生成rsync密码文件并设置该文件相应权限<br>    [root@baobao ~]# touch /etc/rsyncd.secrets</p>\n<pre><code>[root@baobao ~]# vim /etc/rsyncd.secrets\n\nadmin:guobaobao!1314#格式为“账号：密码”且一行一个\n[root@baobao ~]# chown root.root /etc/rsyncd.secrets\n\n[root@baobao ~]# chmod 600 /etc/rsyncd.secrets\n\n因为rsyncd.secrets存储了rsync服务的用户名和密码，所以要将rsyncd.secrets设置为root拥有, 且权限为600\n</code></pre><p>2、配置欢迎信息rsyncd.motd（可有可无）<br>    [root@baobao ~]# vim /etc/rsyncd.motd   #rsyncd.motd记录了rsync服务的欢迎信息</p>\n<pre><code>Welcome to use the rsyncservices!\n[root@baobao ~]# service xinetd restart\n\n停止 xinetd：  [确定]\n\n正在启动 xinetd：  [确定]\n</code></pre><p>l  Rsync的启动与开机启动</p>\n<p>1、Rsync服务端启动</p>\n<p>1)  载入配置</p>\n<pre><code>[root@baobao ~]# rsync –daemon–config=/etc/rsyncd.conf   #载入配置并启动\n\n或\n\n[root@baobao ~]# /etc/rc.d/init.d/xinetdreload\n\n重新载入配置： [确定]\n</code></pre><p>2)  重启rsync</p>\n<pre><code>[root@baobao ~]# /usr/bin/rsync –daemon\n\nfailed to create pid file/var/run/rsyncd.pid: File exists\n\n或\n\n[root@baobao ~]# /etc/rc.d/init.d/xinetdrestart#重新启动\n\n停止 xinetd：  [确定]\n\n正在启动 xinetd：  [确定]\n</code></pre><p>3)  检查rsync是否启动</p>\n<pre><code>[root@baobao ~]# netstat -lnp | grep 873#由超级进程启动\n\ntcp   0  0 0.0.0.0:8730.0.0.0:*LISTEN  3133/rsync\n\ntcp   0  0 :::873 :::*LISTEN 3133/rsync\n\n或\n\n[root@baobao ~]# netstat -a |grep rsync\n\ntcp0  0*:rsync *:* LISTEN\n\n或\n\n[root@baobao ~]# lsof -i:873 #端口没有被占用\n\nCOMMAND  PID USER  FD   TYPE DEVICE SIZE/OFF NODENAME\n\nrsync   3133 root   4u  IPv4  22973 0t0  TCP *:rsync (LISTEN)\n\nrsync   3133 root   5u  IPv6  22974 0t0  TCP *:rsync (LISTEN)\n</code></pre><p>4)  查看rsync日志</p>\n<pre><code>[root@baobao ~]# cat /var/log/rsyncd.log #查看rsync日志\n\n2014/10/14 15:29:13 [35681] rsyncdversion 3.0.6 starting, listening on port 873\n</code></pre><p>2、将rsync加入开机启动</p>\n<pre><code>[root@baobao ~]# echo”/usr/bin/rsync –daemon –config=/etc/rsyncd.conf”&gt;&gt;/etc/rc.local\n\n[root@baobao ~]# cat/etc/rc.local\n\n#!/bin/sh\n\n#\n\n# This script will beexecuted *after* all the other init scripts.\n\n# You can put your owninitialization stuff in here if you don’t\n\n# want to do the full Sys Vstyle init stuff.\n\ntouch /var/lock/subsys/local\n\n/usr/bin/rsync –daemon–config=/etc/rsyncd.conf\n</code></pre><p>l  Rsync服务器端配置防火墙</p>\n<p>1、防火墙设置</p>\n<pre><code>[root@baobao ~]# iptables -F\n\n[root@baobao ~]# iptables -X\n\n[root@baobao ~]# iptables -Z\n\n[root@baobao ~]# iptables -AINPUT -i eth0 -s 172.168.0.0/16 -p tcp –dport 22 -j ACCEPT\n\n[root@baobao ~]# iptables -L\n\nChain INPUT (policy ACCEPT)\n\ntarget prot opt source   destination\n\nACCEPT tcp —  ACA80000.ipt.aol.com/16  anywheretcp dpt:ssh\n\nChain FORWARD (policy ACCEPT)\n\ntarget prot opt source   destination\n\nChain OUTPUT (policy ACCEPT)\n\ntarget prot opt source   destination\n\n[root@baobao ~]#/etc/init.d/iptables save\n\niptables：将防火墙规则保存到 /etc/sysconfig/iptables： [确定]\n\n[root@baobao ~]#/etc/init.d/iptables restart\n\niptables：清除防火墙规则：[确定]\n\niptables：将链设置为政策 ACCEPT：filter[确定]\n\niptables：正在卸载模块：  [确定]\n\niptables：应用防火墙规则：[确定]\n</code></pre><p>2、selinux设置</p>\n<pre><code>[root@baobao ~]# setenforce 0\n</code></pre><p>l  客户端测试</p>\n<pre><code>[root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/\n\nPassword:\n\nreceiving incremental filelist\n\ncreated directory /backups\n\n./\n\nguo\n\nsent 79 bytes  received 1162 bytes  275.78 bytes/sec\n\ntotal size is 1010  speedup is 0.81\n</code></pre><p>可以看到这里还是需要输入密码，这样同样也不能写入脚本中自动执行</p>\n<p>l  常见问题处理</p>\n<p>1、错误一</p>\n<p>@ERROR: chroot failed</p>\n<p>rsync error: error startingclient-server protocol (code 5) at main.c(1522) [receiver=3.0.3]</p>\n<p>原因：服务器端的目录不存在或无权限</p>\n<p>2、错误二</p>\n<p>@ERROR: auth failed on moduletee</p>\n<p>rsync error: error startingclient-server protocol (code 5) at main.c(1522) [receiver=3.0.3]</p>\n<p>原因：服务器端该模块（tee）需要验证用户名密码，但客户端没有提供正确的用户名密码，认证失败。</p>\n<p>3、错误三</p>\n<p>@ERROR: Unknown module‘tee_nonexists’</p>\n<p>rsync error: error startingclient-server protocol (code 5) at main.c(1522) [receiver=3.0.3]</p>\n<p>原因：服务器不存在指定模块</p>\n<p>4、错误四</p>\n<p>password file must not beother-accessible</p>\n<p>continuing without passwordfile</p>\n<p>Password:</p>\n<p>原因：这是因为rsyncd.pwdrsyncd.secrets的权限不对，应该设置为600</p>\n<p>5、错误五</p>\n<p>rsync: failed to connect to218.107.243.2: No route to host (113)</p>\n<p>rsync error: error in socketIO (code 10) at clientserver.c(104) [receiver=2.6.9]</p>\n<p>原因：对方没开机、防火墙阻挡、通过的网络上有防火墙阻挡，都有可能</p>\n<p>6、错误六</p>\n<p>rsync error: error startingclient-server protocol (code 5) at main.c(1524) [Receiver=3.0.7]</p>\n<p>原因：/etc/rsyncd.conf配置文件内容有错误</p>\n<p>7、错误七</p>\n<p>rsync: chown “”failed: Invalid argument (22)</p>\n<p>原因：权限无法复制，去掉同步权限的参数即可(这种情况多见于Linux向Windows的时候)</p>\n<p>8、错误八</p>\n<p>@ERROR: daemon security issue– contact admin<br>rsync error: error starting client-server protocol (code 5) at main.c(1530)[sender=3.0.6]</p>\n<p>原因：同步的目录里面有软连接文件，需要服务器端的/etc/rsyncd.conf打开use chroot = yes掠过软连接文件。</p>\n<p>l  建立不需输入密码的链接</p>\n<p>这样就可以将其写入脚本和任务计划自动运行了</p>\n<p>1、第一种方案：指定密码文件</p>\n<pre><code>[root@abao ~]# touch/etc/pass#客户端上建立密码文件\n\n[root@abao ~]# vim /etc/pass #将账户“admin”密码写入\n\n[root@abao ~]# cat /etc/pass\n\nguobaobao！1314\n\n[root@abao ~]# chmod 600/etc/pass\n\n[root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/\n\nPassword:\n\n@ERROR: auth failed on modulebackup\n\nrsync error: error startingclient-server protocol (code 5) at main.c(1503) [receiver=3.0.6]\n\n[root@abao ~]#\n\n[root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/ –password-file=/etc/pass #注意黑体部分指定密码文件\n\nreceiving incremental filelist\n\nsent 57 bytes  received 106 bytes  326.00 bytes/sec\n\ntotal size is 1010  speedup is 6.20\n</code></pre><p>2、第二种方案：在rsync服务器端不指定用户</p>\n<pre><code>[root@baobao ~]# vim/etc/rsyncd.conf   #服务器端配置文件注释掉下面认证两行\n\n#auth users=admin\n\n#secretsfile=/etc/rsyncd.secrets\n\n[root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/\n\nreceiving incremental filelist\n\nsent 28 bytes  received 65 bytes  37.20 bytes/sec\n\ntotal size is 1010  speedup is 10.86\n\n或\n\n[root@abao ~]# rsync -av172.168.72.68::backup /backups/#不加账户默认是root\n\nreceiving incremental filelist\n\nsent 28 bytes  received 65 bytes  186.00 bytes/sec\n\ntotal size is 1010  speedup is 10.86\n</code></pre>","excerpt":"<p>一、Rsync软件介绍</p>\n<p>rsync从字面上的意思就是remote sync （远程同步）的意思，是类unix系统下的远程数据镜像备份工具，可以镜像保存整个目录树和文件系统，并保持原来文件的权限、时间、软硬链接等，此外它还支持匿名传输；Rsync不仅可以远程同步数据（类似于scp）还可以本地同步数据（类似于cp），但不同于cp或scp的是rsync不像cp/scp一样会覆盖以前的数据，Rsync使用所谓的“Rsync演算法”，这个算法在第一次连通完成时，会把整份文件传输一次，下一次就只传送二个文件之间不同的部份，因此速度相当快<br>","more":"<br>二、Rsync的传输方式（或工作模式）</p>\n<p>l  在本机直接运行拷贝本地文件（不使用冒号）</p>\n<p>命令格式为：rsync[OPTION]… SRC DEST。如下</p>\n<pre><code>[root@abao~]# rsync -av /etc /tmp\n</code></pre><p>l  通过rsh或ssh的信道在server/client之间进行传输数据（使用一个冒号）</p>\n<p>需要登录到服务器上执行任务，并且需要输入账号的密码</p>\n<p>1、 将本地机器的内容拷贝到远程机器（目标路径中使用一个冒号）</p>\n<p>命令格式为：rsync[OPTION]… SRC [USER@]HOST:DEST。如下</p>\n<pre><code>[root@abao~]# rsync -av -e ssh /tmp axing@172.168.72.68:~\n</code></pre><p>2、 将远程机器的内容拷贝到本地机器（源路径中使用一个冒号）</p>\n<p>命令格式为：rsync[OPTION]… [USER@]HOST:SRC DEST。如下</p>\n<pre><code>[root@abao~]# rsync -av -e ssh axing@172.168.72.68:~ /tmp\n</code></pre><p>l  直接通过rsync的服务来传输（此时服务器端需要启动873端口，并且使用两个冒号）</p>\n<p>这种方式在远程主机上建立一个rsync的服务器，在服务器上配置好rsync的各种应用，然后本机作为rsync的一个客户端去连接远程的rsync服务器</p>\n<p>1、 从远程rsync服务器中拷贝文件到本地机（源路径中使用一个冒号）</p>\n<p>命令格式为：rsync[OPTION]… [USER@]HOST::模块名 本地位置。如下</p>\n<pre><code>[root@abao~]# rsync -av axing@172.168.72.68:：back /databack\n</code></pre><p>2、从本地机器拷贝文件到远程rsync服务器中（目标路径中使用一个冒号）</p>\n<p>命令格式为：rsync[OPTION]… SRC [USER@]HOST::DEST。如下</p>\n<pre><code>[root@abao~]# rsync -av /databack axing@172.168.72.68:：back\n</code></pre><p>以上3中传输方式的差异在于有没有冒号“：”，本地端传输不需要冒号，通过rsh或ssh传输时需要一个冒号，而通过rsync传输时需要两个冒号</p>\n<p>三、Rsync的语法</p>\n<pre><code>-v： 查看模式可以列出很多信息包括文件名\n\n-r： 递归复制，可以针对目录来复制\n\n-u： 仅更新，如果目标文件比较新那么则保留新文件不会覆盖\n\n-l： 复制链接文件的属性\n\n-p： 连同属性一起复制\n\n-g： 保存源文件的属组\n\n-o： 保存源文件的属主\n\n-D： 保存源文件的设备属性\n\n-t： 保存原文件的时间参数\n\n-z： 在传输时加上压缩\n\n-e： 使用的协议，例如使用ssh通道就是-e ssh\n\n-a： 相当于-rlptgoD，是最常用的参数\n\n-L： 把SRC中软连接的目标文件给拷贝到DST.\n\n–delete：如果在DST增加文件了，而SRC当中没有这些文件，同步时会删除新增的文件\n\n–exclude=filename：  指定排除不需要传输的文件，等号后面跟文件名（如*.txt）\n\n–progress：  可以看到同步的过程状态，比如文件数量、文件传输速度等\n</code></pre><p>四、在本机直接运行拷贝本地文件实例</p>\n<pre><code>[root@abao ~]# rsync -av /etc/tmp#首次本地备份\n\n…………………………………………………………………\n\nsent 33899909 bytes  received 35626 bytes  5220851.54 bytes/sec\n\ntotal size is 33759697  speedup is 0.99\n\n[root@abao ~]# ll -d /tmp/etc/etc#两文件相同\n\ndrwxr-xr-x. 126 root root12288 10月 10 08:23 /etc\n\ndrwxr-xr-x. 126 root root12288 10月 10 08:23 /tmp/etc\n\n[root@abao ~]# rsync -av /etc/tmp#再次备份时只备份差异文件\n\nsending incremental file list\n\nsent 77528 bytes  received 293 bytes  155642.00 bytes/sec\n\ntotal size is 33759697  speedup is 433.81\n</code></pre><p>五、通过rsh或ssh的信道在server/client之间进行传输数据实例</p>\n<pre><code>[root@abao ~]# /etc/init.d/sshd restart\n\n停止 sshd：[确定]\n\n正在启动 sshd：[确定]\n</code></pre><p>l  将本地机器的内容拷贝到远程机器</p>\n<pre><code>[root@abao ~]# rsync -av -e ssh /tmp admin@172.168.72.68:~\n\nadmin@172.168.72.68’s password:   #需要输入账户密码\n\n…………………………………………………………………………\n\nsent 238637037 bytes received 60045 bytes  3819153.31bytes/sec\n\ntotal size is 238396030 speedup is 1.00\n</code></pre><p>l  将远程机器的内容拷贝到本地机器</p>\n<pre><code>[root@abao ~]# rsync -av -e ssh axing@172.168.72.68:~ /tmp\n\naxing@172.168.72.68’s password:   #需要输入账户密码\n\nreceiving incremental file list\n\naxing/\n\naxing/.ICEauthority\n\n…………………………………………………………………\n\nsent 1732 bytes  received758924 bytes  80069.05 bytes/sec\n\ntotal size is 751474 speedup is 0.99\n\n[root@abao ~]# ll -d /tmp/axing\n\ndrwx——. 27 500 500 4096 10月 10 08:23 /tmp/axing\n</code></pre><p>l  利用crontab通过ssh进行免密码异地备份脚本（常用）</p>\n<p>我们可以针对用户admin制作一个免密码登陆的ssh秘钥，这样以后异地备份系统就可以使用crontab自动备份了，前提是先根据下面（六、直接通过rsync的服务来传输实例）安装并设置好rsync</p>\n<p>1、ssh服务器端和客户端账户建立</p>\n<pre><code>[root@baobao ~]# mkdir /home/back; touch /home/back/wo#创建要备份的文件\n\n[root@baobao ~]# chmod -R 755 /home/back/\n\n[root@baobao ~]# useradd admin#先在ssh服务器端ssh账号\n\n[root@baobao ~]# passwd admin\n\n更改用户 admin 的密码 。\n\n新的 密码：\n\n重新输入新的 密码：\n\npasswd： 所有的身份验证令牌已经成功更新。\n\n[root@abao ~]# useradd admin  #客户端上建立ssh账号\n\n[root@abao ~]# passwd admin\n\n更改用户 admin 的密码 。\n\n新的 密码：\n\n重新输入新的 密码：\n\npasswd： 所有的身份验证令牌已经成功更新。\n</code></pre><p>2、客户端建立两把钥匙</p>\n<pre><code>[root@abao ~]# su – admin\n\n[admin@abao ~]$ ssh-keygen\n\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/home/admin/.ssh/id_rsa):\n\nCreated directory ‘/home/admin/.ssh’.\n\nEnter passphrase (empty for no passphrase):\n\nEnter same passphrase again:\n\nYour identification has been saved in /home/admin/.ssh/id_rsa.\n\nYour public key has been saved in /home/admin/.ssh/id_rsa.pub.\n\nThe key fingerprint is:\n\n61:01:c2:9b:26:00:0a:01:c9:a0:58:7e:38:f9:85:6c admin@abao\n\nThe key’s randomart image is:\n\n+–[ RSA 2048]—-+\n\n|@o… …|\n\n|B+ +.o   .   |\n\n|+.= Eo. o|\n\n|  .=+. . .   |\n\n|   o.   S   |\n\n| |\n\n| |\n\n| |\n\n| |\n\n+—————–+\n\n[admin@abao ~]$ ls -ld ~/.ssh; ls -l ~/.ssh\n\ndrwx——. 2 admin admin 4096 10月 10 09:21 /home/admin/.ssh\n\n总用量 8\n\n-rw——-. 1 admin admin 1675 10月 10 09:21 id_rsa\n\n-rw-r–r–. 1 admin admin 392 10月 10 09:21 id_rsa.pub\n</code></pre><p>3、将公钥文件数据上传到服务器</p>\n<pre><code>[admin@abao ~]$ scp ~/.ssh/id_rsa.pub admin@172.168.72.68:~#客户端上传公钥文件\n\nadmin@172.168.72.68’s password:\n\nid_rsa.pub100%  3920.4KB/s   00:00\n</code></pre><p>4、将公钥放置到服务器端的正确目录与文件名（服务器上操作）</p>\n<pre><code>[root@baobao ~]# su – admin\n\n[admin@baobao ~]$ ls -ld .ssh\n\nls: 无法访问.ssh: 没有那个文件或目录\n\n[admin@baobao ~]$ mkdir .ssh; chmod 700 .ssh #服务器上建立文件~/.ssh\n\n[admin@baobao ~]$ ls -ld .ssh\n\ndrwx—— 2 admin admin 4096 10月 10 09:36 .ssh\n\n[admin@baobao ~]$ ls -l *pub\n\n-rw-r–r– 1 admin admin 392 10月 10 09:27 id_rsa.pub\n\n[admin@baobao ~]$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys\n\n[admin@baobao ~]$ chmod 644 .ssh/authorized_keys\n\n[admin@baobao ~]$ ls -l .ssh\n\n总用量 4\n\n-rw-r–r– 1 admin admin 392 10月 10 09:38 authorized_keys\n</code></pre><p>5、在客户端建立异地备份脚本</p>\n<pre><code>[root@abao ~]# mkdir /backups\n\n[root@abao ~]# chmod -R 755 /backups/\n\n[root@abao ~]# su – admin\n\n[admin@abao ~]$ mkdir ~/bin; vim ~/bin/backup.sh\n\n#!/bin/bash\n\nlocaldir=/backups\n\nremotedir=/home/back/\n\nremoteip=”172.168.72.68″\n\n[ -d ${localdir} ] || mkdir ${localdir}   #-d是判断是否有这个目录；符号“||”是逻辑或意思，左边为假时执行右边命令；小括号一般用作执行命令，而自定义变量一般用大括号括起来\n\nfor dir in ${remotedir}\n\ndo\n\nrsync -av -essh admin@${remoteip}:${dir} ${localdir}\n\ndone\n\n[admin@abao ~]$ chmod 755 ~/bin/backup.sh\n\n[admin@abao ~]$ ls -ld /home/admin/bin/backup.sh\n\n-rwxrwxr-x. 1 admin admin 224 10月 11 08:49 /home/admin/bin/backup.sh\n\n[admin@abao ~]$ ~/bin/backup.sh   #执行脚本\n\nreceiving incremental filelist\n\nsent 11 bytes  received 43 bytes  5.68 bytes/sec\n\ntotal size is 1010  speedup is 18.70\n</code></pre><p>6、制作crontab计划任务</p>\n<pre><code>[root@abao ~]# crontab –e #每天的凌晨02:00异地备份服务器上的/etc /root /home目录到本地的/backups/下\n0 2 * * * /home/admin/bin/backup.sh\n</code></pre><p>六、直接通过rsync的服务来传输实例</p>\n<p>l  创建用户账号和rsync配置文件</p>\n<pre><code>[root@baobao ~]# useraddadmin   #创建链接用户\n\n[root@baobao ~]# passwd admin\n\n更改用户 admin 的密码。\n\n新的 密码：\n\n重新输入新的 密码：\n\npasswd： 所有的身份验证令牌已经成功更新。\n\n[root@baobao ~]# mkdir /home/back   #创建要进行备份的目录或文件\n\n[root@baobao ~]# touch/home/back/guo\n\n[root@baobao ~]# vim/home/back/guo\n\n[root@baobao ~]# chmod -R 755/home/back/#设定要备份的目录或文件权限\n\n[root@baobao ~]# yum -yinstall xinetd\n\n[root@baobao ~]# yum -yinstall rsync#安装rsync\n\n[root@baobao ~]# yum -yinstall rsync#客户端也安装rsync\n\n[root@baobao ~]# touch/etc/rsyncd.conf  #默认该文件是没有的\n\n[root@baobao ~]# chmod 600/etc/rsyncd.conf  #修改配置文件权限\n</code></pre><p>l  Rsync服务器端配置文件设置</p>\n<p>配置文件时即时生效的，不用重启服务</p>\n<p>1、/etc/rsyncd.conf配置</p>\n<p>1)  全局参数配置</p>\n<pre><code>[root@baobao ~]# manrsyncd.conf   #查看说明文档看下面部分参数是yes/no还是true/false\n\n[root@baobao ~]# vim/etc/rsyncd.conf\n\nuid=root  #运行RSYNC守护进程的用户\n\ngid=root  #运行RSYNC守护进程的组\n\nuse chroot=false  #不使用chroot\n\nmax connections=8 #最大连接数是4\n\npid file=/var/run/rsyncd.pid  #pid文件默认存放位置\n\nlock file=/var/run/rsync.lock #锁文件默认存放位置（锁住rsync正在操作的文件不让其他的程序对其进行写操作）\n\nlog file=/var/log/rsyncd.log  #日志文件默认存放位置\n\nstrict modes=true #是否检查口令文件的权限\nport=873  #默认端口873\n</code></pre><p>2)  模块参数配置(多台客户端需要设置多个模块)</p>\n<pre><code>[backup]   #认证的模块名，在client端需要指定\n\npath=/etc  #需要做备份的目录\n\ncomment=This is backup #这个模块的注释信息\n\nlist=true  #当用户查询该服务器上的可用模块时，该模块是被列出（true）还是被隐藏（false）\n\nmax connections=6  #客户端最大连接数(默认0没限制)，模块里可以不设置\nignore errors  #可以忽略一些无关的IO错误\nread only=false#“yes”只读客户端不能上传；“no”客户端可以上传\nwrite only=false   #“yes”客户端不能下载；“no”客户端可以下载\n\nuid=root   #指定该模块传输文件时守护进程应该具有的uid\ngid=root   #指定该模块传输文件时守护进程应该具有的gid\nhosts allow=172.168.0.0/16 #允许连接的主机（“*”充许任何主机连接），多个主机用“，”分开；多个网段用空格隔开\nhosts deny=192.168.10.0/32 #禁止连接的主机或网段\n\nauth users=admin   #登陆系统使用的用户名（系统必须存在的用户），没有默认为匿名\nsecrets file= /etc/rsyncd.secrets #登陆用户的密码文件（需要自己生成）\n</code></pre><p>2、rsync server启动文件配置</p>\n<pre><code>[root@baobao ~]# vim /etc/xinetd.d/rsync#只修改disable = no即可\n\n# default: off\n\n# description: The rsyncserver is a good addition to an ftp server, as it \\\n\n#   allows crc checksumming etc.\n\nservice rsync\n\n{\n\ndisable = no\n\nflags   = IPv6\n\nsocket_type = stream\n\nwait= no\n\nuser= root\n\nserver  = /usr/bin/rsync\n\nserver_args = –daemon\n\nlog_on_failure  += USERID\n\n}\n\n[root@baobao ~]# chkconfigrsync on\n</code></pre><p>l  创建密码文件、欢迎信息</p>\n<p>1、生成rsync密码文件并设置该文件相应权限<br>    [root@baobao ~]# touch /etc/rsyncd.secrets</p>\n<pre><code>[root@baobao ~]# vim /etc/rsyncd.secrets\n\nadmin:guobaobao!1314#格式为“账号：密码”且一行一个\n[root@baobao ~]# chown root.root /etc/rsyncd.secrets\n\n[root@baobao ~]# chmod 600 /etc/rsyncd.secrets\n\n因为rsyncd.secrets存储了rsync服务的用户名和密码，所以要将rsyncd.secrets设置为root拥有, 且权限为600\n</code></pre><p>2、配置欢迎信息rsyncd.motd（可有可无）<br>    [root@baobao ~]# vim /etc/rsyncd.motd   #rsyncd.motd记录了rsync服务的欢迎信息</p>\n<pre><code>Welcome to use the rsyncservices!\n[root@baobao ~]# service xinetd restart\n\n停止 xinetd：  [确定]\n\n正在启动 xinetd：  [确定]\n</code></pre><p>l  Rsync的启动与开机启动</p>\n<p>1、Rsync服务端启动</p>\n<p>1)  载入配置</p>\n<pre><code>[root@baobao ~]# rsync –daemon–config=/etc/rsyncd.conf   #载入配置并启动\n\n或\n\n[root@baobao ~]# /etc/rc.d/init.d/xinetdreload\n\n重新载入配置： [确定]\n</code></pre><p>2)  重启rsync</p>\n<pre><code>[root@baobao ~]# /usr/bin/rsync –daemon\n\nfailed to create pid file/var/run/rsyncd.pid: File exists\n\n或\n\n[root@baobao ~]# /etc/rc.d/init.d/xinetdrestart#重新启动\n\n停止 xinetd：  [确定]\n\n正在启动 xinetd：  [确定]\n</code></pre><p>3)  检查rsync是否启动</p>\n<pre><code>[root@baobao ~]# netstat -lnp | grep 873#由超级进程启动\n\ntcp   0  0 0.0.0.0:8730.0.0.0:*LISTEN  3133/rsync\n\ntcp   0  0 :::873 :::*LISTEN 3133/rsync\n\n或\n\n[root@baobao ~]# netstat -a |grep rsync\n\ntcp0  0*:rsync *:* LISTEN\n\n或\n\n[root@baobao ~]# lsof -i:873 #端口没有被占用\n\nCOMMAND  PID USER  FD   TYPE DEVICE SIZE/OFF NODENAME\n\nrsync   3133 root   4u  IPv4  22973 0t0  TCP *:rsync (LISTEN)\n\nrsync   3133 root   5u  IPv6  22974 0t0  TCP *:rsync (LISTEN)\n</code></pre><p>4)  查看rsync日志</p>\n<pre><code>[root@baobao ~]# cat /var/log/rsyncd.log #查看rsync日志\n\n2014/10/14 15:29:13 [35681] rsyncdversion 3.0.6 starting, listening on port 873\n</code></pre><p>2、将rsync加入开机启动</p>\n<pre><code>[root@baobao ~]# echo”/usr/bin/rsync –daemon –config=/etc/rsyncd.conf”&gt;&gt;/etc/rc.local\n\n[root@baobao ~]# cat/etc/rc.local\n\n#!/bin/sh\n\n#\n\n# This script will beexecuted *after* all the other init scripts.\n\n# You can put your owninitialization stuff in here if you don’t\n\n# want to do the full Sys Vstyle init stuff.\n\ntouch /var/lock/subsys/local\n\n/usr/bin/rsync –daemon–config=/etc/rsyncd.conf\n</code></pre><p>l  Rsync服务器端配置防火墙</p>\n<p>1、防火墙设置</p>\n<pre><code>[root@baobao ~]# iptables -F\n\n[root@baobao ~]# iptables -X\n\n[root@baobao ~]# iptables -Z\n\n[root@baobao ~]# iptables -AINPUT -i eth0 -s 172.168.0.0/16 -p tcp –dport 22 -j ACCEPT\n\n[root@baobao ~]# iptables -L\n\nChain INPUT (policy ACCEPT)\n\ntarget prot opt source   destination\n\nACCEPT tcp —  ACA80000.ipt.aol.com/16  anywheretcp dpt:ssh\n\nChain FORWARD (policy ACCEPT)\n\ntarget prot opt source   destination\n\nChain OUTPUT (policy ACCEPT)\n\ntarget prot opt source   destination\n\n[root@baobao ~]#/etc/init.d/iptables save\n\niptables：将防火墙规则保存到 /etc/sysconfig/iptables： [确定]\n\n[root@baobao ~]#/etc/init.d/iptables restart\n\niptables：清除防火墙规则：[确定]\n\niptables：将链设置为政策 ACCEPT：filter[确定]\n\niptables：正在卸载模块：  [确定]\n\niptables：应用防火墙规则：[确定]\n</code></pre><p>2、selinux设置</p>\n<pre><code>[root@baobao ~]# setenforce 0\n</code></pre><p>l  客户端测试</p>\n<pre><code>[root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/\n\nPassword:\n\nreceiving incremental filelist\n\ncreated directory /backups\n\n./\n\nguo\n\nsent 79 bytes  received 1162 bytes  275.78 bytes/sec\n\ntotal size is 1010  speedup is 0.81\n</code></pre><p>可以看到这里还是需要输入密码，这样同样也不能写入脚本中自动执行</p>\n<p>l  常见问题处理</p>\n<p>1、错误一</p>\n<p>@ERROR: chroot failed</p>\n<p>rsync error: error startingclient-server protocol (code 5) at main.c(1522) [receiver=3.0.3]</p>\n<p>原因：服务器端的目录不存在或无权限</p>\n<p>2、错误二</p>\n<p>@ERROR: auth failed on moduletee</p>\n<p>rsync error: error startingclient-server protocol (code 5) at main.c(1522) [receiver=3.0.3]</p>\n<p>原因：服务器端该模块（tee）需要验证用户名密码，但客户端没有提供正确的用户名密码，认证失败。</p>\n<p>3、错误三</p>\n<p>@ERROR: Unknown module‘tee_nonexists’</p>\n<p>rsync error: error startingclient-server protocol (code 5) at main.c(1522) [receiver=3.0.3]</p>\n<p>原因：服务器不存在指定模块</p>\n<p>4、错误四</p>\n<p>password file must not beother-accessible</p>\n<p>continuing without passwordfile</p>\n<p>Password:</p>\n<p>原因：这是因为rsyncd.pwdrsyncd.secrets的权限不对，应该设置为600</p>\n<p>5、错误五</p>\n<p>rsync: failed to connect to218.107.243.2: No route to host (113)</p>\n<p>rsync error: error in socketIO (code 10) at clientserver.c(104) [receiver=2.6.9]</p>\n<p>原因：对方没开机、防火墙阻挡、通过的网络上有防火墙阻挡，都有可能</p>\n<p>6、错误六</p>\n<p>rsync error: error startingclient-server protocol (code 5) at main.c(1524) [Receiver=3.0.7]</p>\n<p>原因：/etc/rsyncd.conf配置文件内容有错误</p>\n<p>7、错误七</p>\n<p>rsync: chown “”failed: Invalid argument (22)</p>\n<p>原因：权限无法复制，去掉同步权限的参数即可(这种情况多见于Linux向Windows的时候)</p>\n<p>8、错误八</p>\n<p>@ERROR: daemon security issue– contact admin<br>rsync error: error starting client-server protocol (code 5) at main.c(1530)[sender=3.0.6]</p>\n<p>原因：同步的目录里面有软连接文件，需要服务器端的/etc/rsyncd.conf打开use chroot = yes掠过软连接文件。</p>\n<p>l  建立不需输入密码的链接</p>\n<p>这样就可以将其写入脚本和任务计划自动运行了</p>\n<p>1、第一种方案：指定密码文件</p>\n<pre><code>[root@abao ~]# touch/etc/pass#客户端上建立密码文件\n\n[root@abao ~]# vim /etc/pass #将账户“admin”密码写入\n\n[root@abao ~]# cat /etc/pass\n\nguobaobao！1314\n\n[root@abao ~]# chmod 600/etc/pass\n\n[root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/\n\nPassword:\n\n@ERROR: auth failed on modulebackup\n\nrsync error: error startingclient-server protocol (code 5) at main.c(1503) [receiver=3.0.6]\n\n[root@abao ~]#\n\n[root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/ –password-file=/etc/pass #注意黑体部分指定密码文件\n\nreceiving incremental filelist\n\nsent 57 bytes  received 106 bytes  326.00 bytes/sec\n\ntotal size is 1010  speedup is 6.20\n</code></pre><p>2、第二种方案：在rsync服务器端不指定用户</p>\n<pre><code>[root@baobao ~]# vim/etc/rsyncd.conf   #服务器端配置文件注释掉下面认证两行\n\n#auth users=admin\n\n#secretsfile=/etc/rsyncd.secrets\n\n[root@abao ~]# rsync -avadmin@172.168.72.68::backup /backups/\n\nreceiving incremental filelist\n\nsent 28 bytes  received 65 bytes  37.20 bytes/sec\n\ntotal size is 1010  speedup is 10.86\n\n或\n\n[root@abao ~]# rsync -av172.168.72.68::backup /backups/#不加账户默认是root\n\nreceiving incremental filelist\n\nsent 28 bytes  received 65 bytes  186.00 bytes/sec\n\ntotal size is 1010  speedup is 10.86\n</code></pre>"},{"title":"linux—SSH1","date":"2016-09-02T06:19:28.809Z","_content":"一、远程连接简介\n\nl  远程连接服务器\n\n远程连接服务器通过文字或图形接口的方式来远程登陆系统，在远程的终端前面登陆linux主机并取得操作主机的接口shell，登陆后的操作就像在系统前面一样，这样可以进行系统管理的任务\n<!--more-->\nl  工作站\n\n工作站就是仅提供大量的运作能力给用户而不提供因特网服务的主机\n\nl  当前远程连接的登陆类型\n\n1、加密的远程连接\n\n主要是ssh，也是用到的最多最安全的，而且还可以使用rsync通过ssh协议来进行异地备份\n\n2、图形接口的远程连接\n\nXDMCP、VNC和XRDP，这些方式由于是传输图形所以速度慢，且安全性也不是很好\n\n二、远程连接之SSH\n\nSsh是secure shell protocol（安全的壳程序协议）的简写，可以通过数据包加密技术将传输的数据包加密后再传输到网络上，当前ssh有两个版本，其中version2加上了连接检测的机制，可以避免连接期间被插入恶意攻击码\n\nl  Ssh服务器提供的功能\n\n默认的ssh服务器提供两个服务器功能\n\n1、ssh服务\n\n类似telnet的远程连接，使用shell的服务器，可以用来管理服务器\n\n2、ftp服务\n\n类似ftp服务的sftp-server，可以用来远程上传和下载\n\nl  连接的加密技术\n\n当前常见的网络数据包加密技术主要是通过非对称秘钥系统来处理的，主要是通过两把不同的公钥（public key）和私钥（private key）来进行数据的加密与解密的，且在同一个方向上的连接中这两把钥匙是成对存在的。每台主机都应该有自己的秘钥（公钥和私钥），并且公钥用于加密而私钥用于解密\n\n1、公钥（public key）\n\n提供给远程主机进行数据加密的行为，所有客户端都能取得它进行数据加密\n\n2、私钥（private key）\n\n远程主机使用公钥加密的数据在本地就需要使用私钥进行解密了，其非常重要只能在自己的主机上\n\nl  Ssh服务器端与客户端的链接步骤\n\n1、服务器建立公钥文件\n\n系统安装完成时sshd会朱勇去计算出需要的公钥文件和自己需要的私钥文件，等下次再次启动sshd的时候该服务就会主动去找文件/etc/ssh/ssh_host*\n\n2、客户端主动链接\n\n需要使用客户端程序（如ssh）来连接\n\n3、服务器传送公钥文件给客户端\n\n服务器将将取得的公钥文件/etc/ssh/ssh_host*传送给客户端（由于公钥是给大家使用的，所以此时的传送是明文的）\n\n4、客户端记录并比对该公钥数据，然后计算出自己的公钥和私钥\n\n客户端在第一次连接该服务器后会将服务器的公钥数据记录到客户端的用户主目录下的~ /.ssh/known_hosts内，如果已经记录过该数据则客户端会去比对此次受到的公钥与之前的差异，若接受此次公钥数据那么会计算出客户端自己的公钥和私钥\n\n5、客户端将自己的公钥传送给服务器\n\n此时服务器端会有自己的私钥和客户端的公钥；而客户端会有服务器的公钥和自己的私钥，这时服务器与客户端的秘钥（公钥与私钥）是不一样的，所以才称之为非对称式秘钥系统\n\n6、服务器开始进行双向加解密\n\n1)   服务器传送数据到客户端\n\n将用户的公钥加密后进行发送，客户端接收后用自己的私钥解密\n\n2)   客户端传送数据到服务器\n\n将服务器的公钥加密后进行发送，服务器接受后用自己的私钥解密\n\nl  秘钥文件的建立\n\n1、服务器端启动ssh服务，以生成服务器端的公钥和私钥\n\n\n    [root@baobao ~]# /etc/init.d/sshd restart\n\n停止 sshd：                                                [确定]\n\n生成 SSH1 RSA 主机键：                                     [确定]\n\n生成 SSH2 RSA 主机键：                                     [确定]\n\n正在生成 SSH2 DSA 主机键：                                 [确定]\n\n正在启动 sshd：                                            [确定]\n\n2、客户端利用ssh连接服务器\n\n\n    [root@abao ~]# ssh 172.168.72.68\n\n    The authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n    \n    RSA key fingerprint is36:cf:9f:46:54:46:4b:b3:b0:48:4a:93:4d:14:81:56.\n    \n    Are you sure you want to continue connecting (yes/no)? yes\n    \n    Warning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n    \n    root@172.168.72.68’s password:\n    \n    Last login: Sun Sep 28 15:37:10 2014 from localhost\n    \n    [root@baobao ~]# exit\n    \n    logout\n    \n    Connection to 172.168.72.68 closed.\n\n3、删除客户端的秘钥文件\n\n    [root@abao ~]# rm /etc/ssh/ssh_host*\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key.pub”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_key”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_key.pub”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key.pub”？y\n\n4、重新启动客户端的sshd服务以查看秘钥文件的建立过程\n\n    [root@abao ~]# /etc/init.d/sshd restart\n    \n    停止 sshd：[确定]\n    \n    生成 SSH1 RSA 主机键： [确定]\n    \n    生成 SSH2 RSA 主机键： [确定]\n    \n    正在生成 SSH2 DSA 主机键： [确定]\n    \n    正在启动 sshd：[确定]\n    \nl  Sshd服务的启动\n\n    [root@baobao ~]# /etc/init.d/sshd restart\n    \n    停止 sshd：[确定]\n    \n    正在启动 sshd：[确定]\n    \n    [root@baobao ~]# netstat -tlnp | grep ssh #注意ssh服务是tcp端口22\n    \n    tcp 0  0 0.0.0.0:22  0.0.0.0:*LISTEN 9262/sshd\n    \n    tcp 0  0:::22:::* LISTEN 9262/sshd\n\n在linux系统中默认就有ssh所需要的软件了，包括可以产生密码等协议的OpenSSL软件和OpenSSH软件，而且在当前的linux系统中都是默认启动ssh的。这个sshd可以同时提供shell与ftp，而且都是在tcp端口22\n\nl  Linux用户ssh客户端的连接程序\n\nLinux客户端默认情况下是可以正常使用ssh的而不必安装额外的软件，而且其默认是启动的\n\n1、 直接登录远程主机的指令ssh（可用作服务器管理）\n\nSsh命令格式为：ssh [-f][-o参数项目][-p非标准端口][账号@]IP地址[命令]\n\n1)   Ssh命令参数介绍\n\n-f：     需要配合后面的[命令]，不登陆远程主机直接发送一个命令过去而已\n\n-o：     主要的参数有：ConnectTimeout=秒数：连接等到的秒数，减少等待的时间\n\nStrictHostKeyChecking=yes/no/ask：默认是ask，如果想要public key主动加入known_host这里设置为no\n\n-p：     如果sshd服务启动在非标准的端口需使用该项目[命令]，不登陆远程主机直接发送一个命令过去，但与-f意义不太相同\n\n2)   ssh使用范例\n\nA：直接登录到远程主机\n\n    [root@abao ~]# ssh 172.168.72.68\n    \n    The authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n    \n    RSA key fingerprint is36:cf:9f:46:54:46:4b:b3:b0:48:4a:93:4d:14:81:56.   #远程服务器的公钥指纹码\n    \n    Are you sure you want to continue connecting (yes/no)? yes   #将上述指纹码写入服务器公钥记录文件~ /.ssh/known_hosts，等再次登录时就不会出现该指纹码提示了。一定要yes而不是y\n    \n    Warning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n    \n    root@172.168.72.68’s password:#远程主机的root密码\n    \n    Last login: Sun Sep 28 15:37:10 2014 from localhost\n    \n    [root@baobao ~]# exit #退出远程连接\n    \n    logout\n    \n    Connection to 172.168.72.68 closed.\n\n一般我们使用“ssh 账号 主机IP地址”的登录方式，如果不写账号的话那么会以本地计算机的当前账号来尝试登录远程主机\n\nB：再次登录远程主机\n\n    [root@abao ~]# ssh 172.168.72.68\n    \n    root@172.168.72.68’s password:\n    \n    Last login: Sun Sep 28 16:42:05 2014 from aca84448.ipt.aol.com\n\nC：使用账号axing登录\n\n    [root@baobao ~]# ssh axing@172.168.72.68\n    \n    The authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n    \n    RSA key fingerprint is 36:cf:9f:46:54:46:4b:b3:b0:48:4a:93:4d:14:81:56.\n    \n    Are you sure you want to continue connecting (yes/no)? yes\n    \n    Warning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n    \n    axing@172.168.72.68’s password:\n    \n    [axing@baobao ~]$   #远程登陆后身份变为axing\n    \nD：远程登陆执行命令后立刻离开\n\n    [root@abao ~]# ssh axing@172.168.72.68 find / -name passwd  #既后面直接加命令\n    \n    axing@172.168.72.68’s password:\n    \n卡在这里等待命令的执行完毕\n\nE：让远程主机自动运行命令而立刻回到本地端继续工作\n    \n    [root@abao ~]# ssh -faxing@172.168.72.68 shutdown -h now\n    \n    axing@172.168.72.68’s password:\n\nF：自动加上公钥记录而不再询问\n\n    [root@abao ~]# rm ~/.ssh/known_hosts\n    \n    rm：是否删除普通文件 “/root/.ssh/known_hosts”？y\n    \n    [root@abao ~]# ssh -o StrictHostKeyChecking=no root@172.168.72.68#不在要求输入yes或no了\n    \n    Warning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n    \n    root@172.168.72.68’s password:\n    \n    Last login: Mon Sep 29 14:00:28 2014 from aca84448.ipt.aol.com\n    \n2、服务器公钥记录文件~ /.ssh/known_hosts\n\n当远程登陆服务器时本机会主动将从服务器收到的公钥服务器公钥记录文件~ /.ssh/known_hosts进行比对，如果服务器的公钥文件还没有记录那么就会主动询问是否记录（登陆时候的yes或no行为）；如果收到的公钥已经记录那么会比对记录是否相同，如果相同则继续登陆，如果不同就会离开登陆而返回。但是如果是服务器重新安装那么服务器的公钥就会经常变化，这样的话我们就无法正常远程登陆了\n\nA：模拟服务器重新安装后ssh登陆\n\n    [root@baobao ~]# rm /etc/ssh/ssh_host*\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key.pub”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_key”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_key.pub”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key.pub”？y\n    \n    [root@baobao ~]# /etc/init.d/sshd restart\n    \n    停止 sshd：[确定]\n    \n    生成 SSH1 RSA 主机键： [确定]\n    \n    生成 SSH2 RSA 主机键： [确定]\n    \n    正在生成 SSH2 DSA 主机键： [确定]\n    \n    正在启动 sshd：[确定]\n    \n    [root@baobao ~]# ssh 172.168.72.68\n    \n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    \n    @WARNING: REMOTE HOSTIDENTIFICATION HAS CHANGED! @\n    \n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    \n    IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n    \n    Someone could be eavesdropping on you right now(man-in-the-middle attack)!\n    \n    It is also possible that the RSA host key has just been changed.\n    \n    The fingerprint for the RSA key sent by the remote host is\n    \n    17:7e:8e:e9:fd:df:1c:e5:c9:9d:cd:30:31:5e:a6:45.\n    \n    Please contact your system administrator.\n    \n    Add correct host key in /root/.ssh/known_hosts to get rid ofthis message.\n    \n    Offending key in /root/.ssh/known_hosts:2#有问题的数据行号\n    \n    RSA host key for 172.168.72.68 has changed and you haverequested strict checking.\n    \n    Host key verification failed.\n    \nB：上述现象解决方法\n    \n    [root@baobao ~]# vim /root/.ssh/known_hosts  #清空该文件\n    \n    [root@baobao ~]# ssh 172.168.72.68\n    \n    The authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n    \n    RSA key fingerprint is17:7e:8e:e9:fd:df:1c:e5:c9:9d:cd:30:31:5e:a6:45.\n    \n    Are you sure you want to continue connecting (yes/no)? yes#记录公钥\n    \n    Warning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n    \n    root@172.168.72.68’s password:\n    \n    Last login: Mon Sep 29 14:28:46 2014 from aca84448.ipt.aol.com\n\n3、模拟FTP的文件传输之SFTP\n\n如果想要从远程服务器下载或上传文件就不能使用ssh了，而必须使用sftp或scp，这两个指令也是使用ssh的端口22，只是模拟成ftp与复制的操作而已\n\n1)   SFTP使用的命令\n\nSftp使用的命令与ftp是一样的\n\nA：针对远程服务器的命令\n\n跟linux服务器命令相同\n\nB：针对本机的命令\n\n在基本命令前面加“l”即代表是针对本机的操作，例如sftp> lcd /tmp进入本机的该目录\n\nC：针对资料的上传或下载的命令\n\nput [本地目录或文件][远程]或put [本地目录或文件]（这样会存储到远程主机的目录下）\n\nget [远程目录或文件][本机]或get [远程目录或文件]（这样会存储到当前本机所在目录）\n\n2)   Sftp的使用范例\n\nA：sftp的登陆于退出\n\n    [root@baobao ~]# sftp 172.168.72.68\n    \n    Connecting to 172.168.72.68…\n    \n    root@172.168.72.68’s password:\n    \n    sftp>\n    \n    或\n    \n    [root@baobao ~]# sftp axing@172.168.72.68\n    \n    Connecting to 172.168.72.68…\n    \n    axing@172.168.72.68’s password:\n    \n    sftp> exit\n\nB：上传与下载\n\n    sftp> pwd#查看当前在服务器的目录\n    \n    Remote working directory: /home/axing\n    \n    sftp> lls /etc/hosts #查看本机是否有该文件\n    \n    /etc/hosts\n    \n    sftp> put /etc/hosts #上传该文件到远程服务器\n    \n    Uploading /etc/hosts to /home/axing/hosts#上传到服务器的默认目录\n    \n    /etc/hosts 100%  1580.2KB/s   00:00\n    \n    sftp> ls\n    \n    hosts\n    \n    sftp> ls –a  #查看服务器该目录下的隐藏文件\n    \n    .   ..  .bash_history   .bash_logout.bash_profile   .bashrc .emacs\n    \n    .gnome2.mozillahosts\n    \n    sftp> lcd /tmp#切换到本地的目录/tmp下\n    \n    sftp> get .bashrc #从服务器下载该文件\n    \n    Fetching /home/axing/.bashrc to .bashrc\n    \n    /home/axing/.bashrc   100%  124 0.1KB/s  00:00\n    \n    sftp> lls –a #确认是否下载成功\n    \n    ……………………………………………\n    \n    baoaj  .bashrc  guoal   guobe  guobx guocq  guodj  pulse-Fhzh5o9BSGRy\n    \n    sftp> exit\n\n4、文件异地直接复制SCP\n\n当已经知道服务器上的文件名时可以使用该命令，该命令的上传和下载使用格式如下：\n\n上传：scp [-pr] [-l 速率] file [账号@]主机：目录名（：后没有空格）\n\n下载：scp [-pr] [-l 速率] [账号@]主机：file 目录名（file后有空格）\n\n1)   命令参数介绍\n\n-p：     保留文件的原有权限\n\n-r：     复制整个目录\n\n-l：     传输速率\n\n2)   Scp使用范例\n\nA：上传本地文件到远程服务器\n\n`[root@baobao ~]# scp /etc/hosts* axing@172.168.72.68:~     ` #上传到服务器的用户主目录下\n\naxing@172.168.72.68’s password:\n\nhosts                100% 158     0.2KB/s   00:00\n\nhosts.allow          100% 370     0.4KB/s   00:00\n\nhosts.deny           100% 460     0.5KB/s   00:00\n\nB：从服务器下载文件到本地\n\n    [root@baobao ~]# scp axing@172.168.72.68:/etc/bashrc /tmp\n    \n    axing@172.168.72.68’s password:\n    \n    bashrc   100%2681 2.6KB/s   00:00\n    \nl  windows用户ssh客户端的连接程序\n\n默认的windows并没有ssh的客户端程序，所以需要下载第三方软件才行，常见的有pietty、psftp和filezilla\n\n1、直接连接的pietty（可用作服务器管理）\n\n下载后安装即可使用，不过由于编码的问题中文会显示乱码需要设置该软件才行option—more options—features（右第二个打钩打开键盘数字）—connection—-ssh（右2only选择版本）\n\noption—font（脚本gb2312调整字符集支持中文）\n\n2、psftp\n\n下载后安装并启动，输入open172.168.72.68后连接即可\n\n3、filezilla\n\n下载后安装运行即可，是普通的中文界面ftp软件\n\nl  windows用户远程登陆管理服务器工具xshell（当前最好用的工具）\n\n1、xshell界面\n\n它是windows下当前最好用的远程管理软件，只需要你下载后安装即可使用，一般还有中文版，非常好用，以下是链接后的画面\n\n    Connecting to 172.168.72.68:22…\n    \n    Connection established.\n    \n    To escape to local shell, press ‘Ctrl+Alt+]’.  #回到本地shell\n    \n    Last login: Tue Sep 30 08:55:23 2014 from aca80058.ipt.aol.com\n    \n    [root@baobao ~]# ls\n    \n    123baoae  cheng  last.list  lsrootaf   图片\n    \n    anaconda-ks.cfg  baoagguo.txt  lsrootaa regular_express.txt.1  下载\n    \n    baoaa baoah  homelsrootab   xinzi.txt  音乐\n    \n    baoab   baoai  homefile  lsrootac   公共的 桌面\n    \n    ………………………………………………………\n    \n    [root@baobao ~]#\n\n2、xshell中文乱码解决法案\n\nXshell是个非常不错的工具。但很多时候中文显示为乱码的问题，解决方法其实很简单的，即把xshell编码方式改成UTF-8即可：[文件]–>[打开]–>在打开的session中选择连接的那个然后右键点击[属性] -> [终端]，编码选择为：Unicode(UTF-8)，然后重新连接服务器即可\n\n3、ssh远程登陆日志（重要）\n\n    [root@baobao ~]# cat /var/log/secure\n    \n    thenticationAgent, locale zh_CN.UTF-8)\n    \n    Sep 30 08:55:23 baobao sshd[2916]: Accepted password for rootfrom 172.168.0.88 port 57853 ssh2\n    \n    Sep 30 08:55:23 baobao sshd[2916]: pam_unix(sshd:session):session opened for user root by (uid=0)\n    \n    Sep 30 09:21:21 baobao sshd[3331]: Accepted password for rootfrom 172.168.0.88 port 52386 ssh2\n    \n    Sep 30 09:21:21 baobao sshd[3331]: pam_unix(sshd:session):session opened for user root by (uid=0)\n    \n    Sep 30 09:21:55 baobao sshd[2916]: pam_unix(sshd:session):session closed for user root\n\nl  sshd服务器配置\n\nsshd服务器的详细配置都放在/etc/ssh/sshd_config配置文件里，只要是没有被注释的就是默认值\n\n        [root@baobao ~]# vim /etc/ssh/sshd_config\n    \n    ……………………………………………………\n    \n    #Port 22   #也可以设置多个端口只要添加一行然后重启即可（不建议）\n    \n    #ListenAddress 0.0.0.0 #默认监听所有网卡的接口，如果想指定后面直接写ip即可\n    \n    Protocol 2 #ssh的协议版本\n    \n    # HostKey for protocol version 1   #下面是不同协议版本的秘钥文件host key\n    \n    #HostKey /etc/ssh/ssh_host_key\n    \n    # HostKeys for protocol version 2\n    \n    #HostKey /etc/ssh/ssh_host_rsa_key\n    \n    #HostKey /etc/ssh/ssh_host_dsa_key\n    \n    SyslogFacility AUTHPRIV #ssh登陆记录，默认是/var/log/secure\n    \n    #LoginGraceTime 2m  #登陆超时设置\n    \n    #PermitRootLogin yes#是否允许root登陆，默认是允许的，建议设置为no\n    \n    #StrictModes yes#是否让sshd检查相关权限以免用户将某些权限设置错误\n    \n    PasswordAuthentication yes  #密码验证，当然需要了\n    \n    #PermitEmptyPasswords no#是否允许空密码登陆，当然是no了\n    \n    #IgnoreUserKnownHosts no#是否忽略用户主文件记录，当然是no了\n    \n    #IgnoreRhosts yes   #是否取消~/.ssh/.rhosts认证，当然yes了\n    \n    ChallengeResponseAuthentication no  #该认证不安全，设置为no即可\n    \n    UsePAM yes#最好使用该认证模块记录与管理，所以yes\n    \n    #PrintLastLog yes #显示上次登陆的信息\n    \n    #TCPKeepAlive yes #网络不稳定时为了连接不中断可以设置为no\n    \n    #UsePrivilegeSeparation yes   #使用权限较低的程序来给用户操作\n    \n    DenyUsers #拒绝登陆的用户\n    \n    DenyGroups#拒绝登陆的组\n\n基本上ssh的默认设置已经就很安全了，不过还是建议将root的登陆权限取消，并将ssh的版本设置为2，而且通常这个文件不需要修改，如果修改了需要重启sshd\n\nl  制作不用密码接口登陆的ssh用户\n\n将客户端产生的key复制到服务器中，以后客户端再次登录的时候由于两者在ssh要连接的信号传递中已经比对过key了，所以不再需要输入密码了\n\n1、步骤一，客户端建立两把钥匙\n\n    [root@abao ~]# useradd abao\n    \n    [root@abao ~]# passwd abao\n    \n    更改用户 abao 的密码 。\n    \n    新的 密码：\n    \n    重新输入新的 密码：\n    \n    passwd： 所有的身份验证令牌已经成功更新。\n    \n    服务器上也做上面相同的用户配置\n    \n    [root@abao ~]# su – abao\n    \n    [abao@abao ~]$ ssh-keygen#默认以RSA建立两把钥匙\n    \n    Generating public/private rsa key pair.\n    \n    Enter file in which to save the key (/home/abao/.ssh/id_rsa): 回车\n    \n    Created directory ‘/home/abao/.ssh’. #建立主目录\n    \n    Enter passphrase (empty for no passphrase): 回车\n    \n    Enter same passphrase again: 回车\n    \n    Your identification has been saved in /home/abao/.ssh/id_rsa.   #私钥文件\n    \n    Your public key has been saved in /home/abao/.ssh/id_rsa.pub.   #公钥文件\n    \n    The key fingerprint is:\n    \n    89:1e:87:c9:a8:68:69:df:bd:75:a4:df:54:37:70:f1 abao@abao\n    \n    The key’s randomart image is:\n    \n    +–[ RSA 2048]—-+\n    \n    |   . |\n    \n    |o|\n    \n    | . .E|\n    \n    | o + .o  |\n    \n    |. * S  .   o.|\n    \n    | … . o  o   . o|\n    \n    |.+.   .  o . .  |\n    \n    |o . . . . o o|\n    \n    |   . . o.  . .   |\n    \n    +—————–+\n    \n    [abao@abao ~]$ ls -ld ~/.ssh; ls -l ~/.ssh\n    \n    drwx——. 2 abao abao 4096 9月  30 11:56 /home/abao/.ssh\n    \n    总用量 8\n    \n    -rw——-. 1 abao abao1675 9月  30 11:56 id_rsa\n    \n    -rw-r–r–. 1 abao abao  391 9月  3011:56 id_rsa.pub\n\n默认情况下建立私钥后权限和文件名放置位置都是正确的。身份必须是abao，当执行ssh-keygen的时候才会在用户主目录下生成两把钥匙，需要注意的是~/.ssh/目录必有700的权限，而且私钥文件的权限必须是-rw——-且属于abao才行，否则在秘钥比对中会被误判为危险而无法成功的以公私钥成对文件的机制实现连接\n\n2、步骤二，将公钥文件数据上传到服务器\n\n    [root@baobao ~]# useradd abao  #先在ssh服务器端建立上传文件账户abao\n    [root@baobao ~]# passwd abao\n    更改用户 abao 的密码 。\n    新的 密码：\n    重新输入新的 密码：\n    passwd： 所有的身份验证令牌已经成功更新。\n    [abao@abao ~]$ scp ~/.ssh/id_rsa.pub abao@172.168.72.68:~\n    \n    abao@172.168.72.68’s password:\n    \n    id_rsa.pub100%  3910.4KB/s   00:00\n\n3、步骤三，蒋公钥放置到服务器端的正确目录与文件名\n\n1)   服务器上建立文件~/.ssh\n\n    [root@baobao ~]# su – abao\n    \n    [abao@baobao ~]$ ls -ld .ssh\n    \n    ls: 无法访问.ssh: 没有那个文件或目录\n    \n    [abao@baobao ~]$ mkdir .ssh; chmod 700 .ssh  #注意其权限必须是700\n    \n    [abao@baobao ~]$ ls -ld .ssh\n    \n    drwx——. 2 abao abao 4096 9月  3012:30 .ssh\n\n2)   将公钥文件内的数据使用cat转存到authorized_keys内\n\n    [abao@baobao ~]$ ls -l *pub\n    \n    -rw-r–r–. 1 abao abao 391 9月  3012:26 id_rsa.pub\n    \n    [abao@baobao ~]$ cat id_rsa.pub >> .ssh/authorized_keys\n    \n    [abao@baobao ~]$ chmod 644 .ssh/authorized_keys\n    \n    [abao@baobao ~]$ ls -l .ssh\n    \n    总用量 4\n    \n    -rw-r–r–. 1 abao abao 391 9月  3012:39 authorized_keys\n\n总结：客户端必须制作出两把钥匙，其中私钥必须放到~/.ssh内；而公钥必须上传到服务器端并且放置到用户主目录下的~/.ssh/authorized_keys，同时目录的权限必须是700,而文件权限必须是644\n\n4、步骤四，验证\n\n    [root@abao ~]# ssh abao@172.168.72.68\n    \n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    \n    @WARNING: REMOTE HOSTIDENTIFICATION HAS CHANGED! @\n    \n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    \n    IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n    \n    Someone could be eavesdropping on you right now(man-in-the-middle attack)!\n    \n    It is also possible that the RSA host key has just been changed.\n    \n    The fingerprint for the RSA key sent by the remote host is\n    \n    17:7e:8e:e9:fd:df:1c:e5:c9:9d:cd:30:31:5e:a6:45.\n    \n    Please contact your system administrator.\n    \n    Add correct host key in /root/.ssh/known_hosts to get rid ofthis message.\n    \n    Offending key in /root/.ssh/known_hosts:1\n    \n    RSA host key for 172.168.72.68 has changed and you haverequested strict checking.\n    \n    Host key verification failed.\n    \n    [root@abao ~]##看不再需要密码了\n    \n    [root@abao ~]# ifconfig   #查看服务器IP地址\n    \n    eth0  Linkencap:Ethernet  HWaddr00:0C:29:59:D9:E6\n    \n    inet addr:172.168.68.72  Bcast:172.168.255.255  Mask:255.255.0.0\n    \n    inet6 addr:fe80::20c:29ff:fe59:d9e6/64 Scope:Link\n    \n    UP BROADCASTRUNNING MULTICAST  MTU:1500  Metric:1\n    \n    RXpackets:239668 errors:0 dropped:0 overruns:0 frame:0\n    \n    TX packets:855errors:0 dropped:0 overruns:0 carrier:0\n    \n    collisions:0txqueuelen:1000\n    \n    RXbytes:18091942 (17.2 MiB)  TX bytes:71093(69.4 KiB)\n\nl  Ssh的安全设置\n\nSshd所谓的安全其实指的是它的数据加密功能，而对于sshd本身这个服务来说是很不安全的，所以如果不是特别需要请尽量限制在小范围内的几个ip或主机名即可\n\n1、 服务器本身的设置强化/etc/ssh/sshd——config\n\n\n    [root@baobao ~]# vim /etc/ssh/sshd_config\n\n1)   禁止root账号使用sshd服务\n\n    PermitRootLogin no                         #去掉注释并修改为no\n\n2)   禁止nossh这个组的用户使用sshd服务\n\n    DenyGroups nosh\n    \n3)   禁止用户testssh使用sshd服务\n\n    DenyUsers testssh\n    \n    [root@abao ~]# /etc/init.d/sshd restart\n    \n    停止 sshd：[确定]\n    \n    正在启动 sshd：[确定]\n    \n    [root@abao ~]# cat /var/log/secure #验证上述用户不能登陆后查看其日志\n    \n2、TCP Wrapper的使用\n\n    [root@baobao ~]# vim /etc/host.allow  #只允许内网和本机可以远程登陆\n    \n    sshd: 127.0.0.1 192.168.1.0/255.255.255.0192.168.10.0/255.255.255.0\n    \n    [root@baobao ~]# vim /etc/host.deny\n    \n    sshd: all\n\n3、iptables数据包过滤防火墙\n\n    [root@baobao ~]# iptables -A INPUT -i eth0 -s 192.168.1.0/24 -p tcp –dport 22 -j ACCEPT\n    \n    [root@baobao ~]# iptables -A INPUT -i eth0 -s 192.168.10.0/24 -p tcp –dport 22 -j ACCEPT\n    \n    [root@baobao ~]# /etc/init.d/iptables save\n    \n    [root@baobao ~]# /etc/init.d/iptables restart\n\n注意不要开放ssh的登陆权限给Internet上面的所有用户或主机，只开放给适当的部分用户或主机即可，否则会很不安全","source":"_posts/linux—SSH1.md","raw":"---\ntitle: linux—SSH1\ndate: \ntags:\n---\n一、远程连接简介\n\nl  远程连接服务器\n\n远程连接服务器通过文字或图形接口的方式来远程登陆系统，在远程的终端前面登陆linux主机并取得操作主机的接口shell，登陆后的操作就像在系统前面一样，这样可以进行系统管理的任务\n<!--more-->\nl  工作站\n\n工作站就是仅提供大量的运作能力给用户而不提供因特网服务的主机\n\nl  当前远程连接的登陆类型\n\n1、加密的远程连接\n\n主要是ssh，也是用到的最多最安全的，而且还可以使用rsync通过ssh协议来进行异地备份\n\n2、图形接口的远程连接\n\nXDMCP、VNC和XRDP，这些方式由于是传输图形所以速度慢，且安全性也不是很好\n\n二、远程连接之SSH\n\nSsh是secure shell protocol（安全的壳程序协议）的简写，可以通过数据包加密技术将传输的数据包加密后再传输到网络上，当前ssh有两个版本，其中version2加上了连接检测的机制，可以避免连接期间被插入恶意攻击码\n\nl  Ssh服务器提供的功能\n\n默认的ssh服务器提供两个服务器功能\n\n1、ssh服务\n\n类似telnet的远程连接，使用shell的服务器，可以用来管理服务器\n\n2、ftp服务\n\n类似ftp服务的sftp-server，可以用来远程上传和下载\n\nl  连接的加密技术\n\n当前常见的网络数据包加密技术主要是通过非对称秘钥系统来处理的，主要是通过两把不同的公钥（public key）和私钥（private key）来进行数据的加密与解密的，且在同一个方向上的连接中这两把钥匙是成对存在的。每台主机都应该有自己的秘钥（公钥和私钥），并且公钥用于加密而私钥用于解密\n\n1、公钥（public key）\n\n提供给远程主机进行数据加密的行为，所有客户端都能取得它进行数据加密\n\n2、私钥（private key）\n\n远程主机使用公钥加密的数据在本地就需要使用私钥进行解密了，其非常重要只能在自己的主机上\n\nl  Ssh服务器端与客户端的链接步骤\n\n1、服务器建立公钥文件\n\n系统安装完成时sshd会朱勇去计算出需要的公钥文件和自己需要的私钥文件，等下次再次启动sshd的时候该服务就会主动去找文件/etc/ssh/ssh_host*\n\n2、客户端主动链接\n\n需要使用客户端程序（如ssh）来连接\n\n3、服务器传送公钥文件给客户端\n\n服务器将将取得的公钥文件/etc/ssh/ssh_host*传送给客户端（由于公钥是给大家使用的，所以此时的传送是明文的）\n\n4、客户端记录并比对该公钥数据，然后计算出自己的公钥和私钥\n\n客户端在第一次连接该服务器后会将服务器的公钥数据记录到客户端的用户主目录下的~ /.ssh/known_hosts内，如果已经记录过该数据则客户端会去比对此次受到的公钥与之前的差异，若接受此次公钥数据那么会计算出客户端自己的公钥和私钥\n\n5、客户端将自己的公钥传送给服务器\n\n此时服务器端会有自己的私钥和客户端的公钥；而客户端会有服务器的公钥和自己的私钥，这时服务器与客户端的秘钥（公钥与私钥）是不一样的，所以才称之为非对称式秘钥系统\n\n6、服务器开始进行双向加解密\n\n1)   服务器传送数据到客户端\n\n将用户的公钥加密后进行发送，客户端接收后用自己的私钥解密\n\n2)   客户端传送数据到服务器\n\n将服务器的公钥加密后进行发送，服务器接受后用自己的私钥解密\n\nl  秘钥文件的建立\n\n1、服务器端启动ssh服务，以生成服务器端的公钥和私钥\n\n\n    [root@baobao ~]# /etc/init.d/sshd restart\n\n停止 sshd：                                                [确定]\n\n生成 SSH1 RSA 主机键：                                     [确定]\n\n生成 SSH2 RSA 主机键：                                     [确定]\n\n正在生成 SSH2 DSA 主机键：                                 [确定]\n\n正在启动 sshd：                                            [确定]\n\n2、客户端利用ssh连接服务器\n\n\n    [root@abao ~]# ssh 172.168.72.68\n\n    The authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n    \n    RSA key fingerprint is36:cf:9f:46:54:46:4b:b3:b0:48:4a:93:4d:14:81:56.\n    \n    Are you sure you want to continue connecting (yes/no)? yes\n    \n    Warning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n    \n    root@172.168.72.68’s password:\n    \n    Last login: Sun Sep 28 15:37:10 2014 from localhost\n    \n    [root@baobao ~]# exit\n    \n    logout\n    \n    Connection to 172.168.72.68 closed.\n\n3、删除客户端的秘钥文件\n\n    [root@abao ~]# rm /etc/ssh/ssh_host*\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key.pub”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_key”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_key.pub”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key.pub”？y\n\n4、重新启动客户端的sshd服务以查看秘钥文件的建立过程\n\n    [root@abao ~]# /etc/init.d/sshd restart\n    \n    停止 sshd：[确定]\n    \n    生成 SSH1 RSA 主机键： [确定]\n    \n    生成 SSH2 RSA 主机键： [确定]\n    \n    正在生成 SSH2 DSA 主机键： [确定]\n    \n    正在启动 sshd：[确定]\n    \nl  Sshd服务的启动\n\n    [root@baobao ~]# /etc/init.d/sshd restart\n    \n    停止 sshd：[确定]\n    \n    正在启动 sshd：[确定]\n    \n    [root@baobao ~]# netstat -tlnp | grep ssh #注意ssh服务是tcp端口22\n    \n    tcp 0  0 0.0.0.0:22  0.0.0.0:*LISTEN 9262/sshd\n    \n    tcp 0  0:::22:::* LISTEN 9262/sshd\n\n在linux系统中默认就有ssh所需要的软件了，包括可以产生密码等协议的OpenSSL软件和OpenSSH软件，而且在当前的linux系统中都是默认启动ssh的。这个sshd可以同时提供shell与ftp，而且都是在tcp端口22\n\nl  Linux用户ssh客户端的连接程序\n\nLinux客户端默认情况下是可以正常使用ssh的而不必安装额外的软件，而且其默认是启动的\n\n1、 直接登录远程主机的指令ssh（可用作服务器管理）\n\nSsh命令格式为：ssh [-f][-o参数项目][-p非标准端口][账号@]IP地址[命令]\n\n1)   Ssh命令参数介绍\n\n-f：     需要配合后面的[命令]，不登陆远程主机直接发送一个命令过去而已\n\n-o：     主要的参数有：ConnectTimeout=秒数：连接等到的秒数，减少等待的时间\n\nStrictHostKeyChecking=yes/no/ask：默认是ask，如果想要public key主动加入known_host这里设置为no\n\n-p：     如果sshd服务启动在非标准的端口需使用该项目[命令]，不登陆远程主机直接发送一个命令过去，但与-f意义不太相同\n\n2)   ssh使用范例\n\nA：直接登录到远程主机\n\n    [root@abao ~]# ssh 172.168.72.68\n    \n    The authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n    \n    RSA key fingerprint is36:cf:9f:46:54:46:4b:b3:b0:48:4a:93:4d:14:81:56.   #远程服务器的公钥指纹码\n    \n    Are you sure you want to continue connecting (yes/no)? yes   #将上述指纹码写入服务器公钥记录文件~ /.ssh/known_hosts，等再次登录时就不会出现该指纹码提示了。一定要yes而不是y\n    \n    Warning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n    \n    root@172.168.72.68’s password:#远程主机的root密码\n    \n    Last login: Sun Sep 28 15:37:10 2014 from localhost\n    \n    [root@baobao ~]# exit #退出远程连接\n    \n    logout\n    \n    Connection to 172.168.72.68 closed.\n\n一般我们使用“ssh 账号 主机IP地址”的登录方式，如果不写账号的话那么会以本地计算机的当前账号来尝试登录远程主机\n\nB：再次登录远程主机\n\n    [root@abao ~]# ssh 172.168.72.68\n    \n    root@172.168.72.68’s password:\n    \n    Last login: Sun Sep 28 16:42:05 2014 from aca84448.ipt.aol.com\n\nC：使用账号axing登录\n\n    [root@baobao ~]# ssh axing@172.168.72.68\n    \n    The authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n    \n    RSA key fingerprint is 36:cf:9f:46:54:46:4b:b3:b0:48:4a:93:4d:14:81:56.\n    \n    Are you sure you want to continue connecting (yes/no)? yes\n    \n    Warning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n    \n    axing@172.168.72.68’s password:\n    \n    [axing@baobao ~]$   #远程登陆后身份变为axing\n    \nD：远程登陆执行命令后立刻离开\n\n    [root@abao ~]# ssh axing@172.168.72.68 find / -name passwd  #既后面直接加命令\n    \n    axing@172.168.72.68’s password:\n    \n卡在这里等待命令的执行完毕\n\nE：让远程主机自动运行命令而立刻回到本地端继续工作\n    \n    [root@abao ~]# ssh -faxing@172.168.72.68 shutdown -h now\n    \n    axing@172.168.72.68’s password:\n\nF：自动加上公钥记录而不再询问\n\n    [root@abao ~]# rm ~/.ssh/known_hosts\n    \n    rm：是否删除普通文件 “/root/.ssh/known_hosts”？y\n    \n    [root@abao ~]# ssh -o StrictHostKeyChecking=no root@172.168.72.68#不在要求输入yes或no了\n    \n    Warning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n    \n    root@172.168.72.68’s password:\n    \n    Last login: Mon Sep 29 14:00:28 2014 from aca84448.ipt.aol.com\n    \n2、服务器公钥记录文件~ /.ssh/known_hosts\n\n当远程登陆服务器时本机会主动将从服务器收到的公钥服务器公钥记录文件~ /.ssh/known_hosts进行比对，如果服务器的公钥文件还没有记录那么就会主动询问是否记录（登陆时候的yes或no行为）；如果收到的公钥已经记录那么会比对记录是否相同，如果相同则继续登陆，如果不同就会离开登陆而返回。但是如果是服务器重新安装那么服务器的公钥就会经常变化，这样的话我们就无法正常远程登陆了\n\nA：模拟服务器重新安装后ssh登陆\n\n    [root@baobao ~]# rm /etc/ssh/ssh_host*\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key.pub”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_key”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_key.pub”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key”？y\n    \n    rm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key.pub”？y\n    \n    [root@baobao ~]# /etc/init.d/sshd restart\n    \n    停止 sshd：[确定]\n    \n    生成 SSH1 RSA 主机键： [确定]\n    \n    生成 SSH2 RSA 主机键： [确定]\n    \n    正在生成 SSH2 DSA 主机键： [确定]\n    \n    正在启动 sshd：[确定]\n    \n    [root@baobao ~]# ssh 172.168.72.68\n    \n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    \n    @WARNING: REMOTE HOSTIDENTIFICATION HAS CHANGED! @\n    \n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    \n    IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n    \n    Someone could be eavesdropping on you right now(man-in-the-middle attack)!\n    \n    It is also possible that the RSA host key has just been changed.\n    \n    The fingerprint for the RSA key sent by the remote host is\n    \n    17:7e:8e:e9:fd:df:1c:e5:c9:9d:cd:30:31:5e:a6:45.\n    \n    Please contact your system administrator.\n    \n    Add correct host key in /root/.ssh/known_hosts to get rid ofthis message.\n    \n    Offending key in /root/.ssh/known_hosts:2#有问题的数据行号\n    \n    RSA host key for 172.168.72.68 has changed and you haverequested strict checking.\n    \n    Host key verification failed.\n    \nB：上述现象解决方法\n    \n    [root@baobao ~]# vim /root/.ssh/known_hosts  #清空该文件\n    \n    [root@baobao ~]# ssh 172.168.72.68\n    \n    The authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n    \n    RSA key fingerprint is17:7e:8e:e9:fd:df:1c:e5:c9:9d:cd:30:31:5e:a6:45.\n    \n    Are you sure you want to continue connecting (yes/no)? yes#记录公钥\n    \n    Warning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n    \n    root@172.168.72.68’s password:\n    \n    Last login: Mon Sep 29 14:28:46 2014 from aca84448.ipt.aol.com\n\n3、模拟FTP的文件传输之SFTP\n\n如果想要从远程服务器下载或上传文件就不能使用ssh了，而必须使用sftp或scp，这两个指令也是使用ssh的端口22，只是模拟成ftp与复制的操作而已\n\n1)   SFTP使用的命令\n\nSftp使用的命令与ftp是一样的\n\nA：针对远程服务器的命令\n\n跟linux服务器命令相同\n\nB：针对本机的命令\n\n在基本命令前面加“l”即代表是针对本机的操作，例如sftp> lcd /tmp进入本机的该目录\n\nC：针对资料的上传或下载的命令\n\nput [本地目录或文件][远程]或put [本地目录或文件]（这样会存储到远程主机的目录下）\n\nget [远程目录或文件][本机]或get [远程目录或文件]（这样会存储到当前本机所在目录）\n\n2)   Sftp的使用范例\n\nA：sftp的登陆于退出\n\n    [root@baobao ~]# sftp 172.168.72.68\n    \n    Connecting to 172.168.72.68…\n    \n    root@172.168.72.68’s password:\n    \n    sftp>\n    \n    或\n    \n    [root@baobao ~]# sftp axing@172.168.72.68\n    \n    Connecting to 172.168.72.68…\n    \n    axing@172.168.72.68’s password:\n    \n    sftp> exit\n\nB：上传与下载\n\n    sftp> pwd#查看当前在服务器的目录\n    \n    Remote working directory: /home/axing\n    \n    sftp> lls /etc/hosts #查看本机是否有该文件\n    \n    /etc/hosts\n    \n    sftp> put /etc/hosts #上传该文件到远程服务器\n    \n    Uploading /etc/hosts to /home/axing/hosts#上传到服务器的默认目录\n    \n    /etc/hosts 100%  1580.2KB/s   00:00\n    \n    sftp> ls\n    \n    hosts\n    \n    sftp> ls –a  #查看服务器该目录下的隐藏文件\n    \n    .   ..  .bash_history   .bash_logout.bash_profile   .bashrc .emacs\n    \n    .gnome2.mozillahosts\n    \n    sftp> lcd /tmp#切换到本地的目录/tmp下\n    \n    sftp> get .bashrc #从服务器下载该文件\n    \n    Fetching /home/axing/.bashrc to .bashrc\n    \n    /home/axing/.bashrc   100%  124 0.1KB/s  00:00\n    \n    sftp> lls –a #确认是否下载成功\n    \n    ……………………………………………\n    \n    baoaj  .bashrc  guoal   guobe  guobx guocq  guodj  pulse-Fhzh5o9BSGRy\n    \n    sftp> exit\n\n4、文件异地直接复制SCP\n\n当已经知道服务器上的文件名时可以使用该命令，该命令的上传和下载使用格式如下：\n\n上传：scp [-pr] [-l 速率] file [账号@]主机：目录名（：后没有空格）\n\n下载：scp [-pr] [-l 速率] [账号@]主机：file 目录名（file后有空格）\n\n1)   命令参数介绍\n\n-p：     保留文件的原有权限\n\n-r：     复制整个目录\n\n-l：     传输速率\n\n2)   Scp使用范例\n\nA：上传本地文件到远程服务器\n\n`[root@baobao ~]# scp /etc/hosts* axing@172.168.72.68:~     ` #上传到服务器的用户主目录下\n\naxing@172.168.72.68’s password:\n\nhosts                100% 158     0.2KB/s   00:00\n\nhosts.allow          100% 370     0.4KB/s   00:00\n\nhosts.deny           100% 460     0.5KB/s   00:00\n\nB：从服务器下载文件到本地\n\n    [root@baobao ~]# scp axing@172.168.72.68:/etc/bashrc /tmp\n    \n    axing@172.168.72.68’s password:\n    \n    bashrc   100%2681 2.6KB/s   00:00\n    \nl  windows用户ssh客户端的连接程序\n\n默认的windows并没有ssh的客户端程序，所以需要下载第三方软件才行，常见的有pietty、psftp和filezilla\n\n1、直接连接的pietty（可用作服务器管理）\n\n下载后安装即可使用，不过由于编码的问题中文会显示乱码需要设置该软件才行option—more options—features（右第二个打钩打开键盘数字）—connection—-ssh（右2only选择版本）\n\noption—font（脚本gb2312调整字符集支持中文）\n\n2、psftp\n\n下载后安装并启动，输入open172.168.72.68后连接即可\n\n3、filezilla\n\n下载后安装运行即可，是普通的中文界面ftp软件\n\nl  windows用户远程登陆管理服务器工具xshell（当前最好用的工具）\n\n1、xshell界面\n\n它是windows下当前最好用的远程管理软件，只需要你下载后安装即可使用，一般还有中文版，非常好用，以下是链接后的画面\n\n    Connecting to 172.168.72.68:22…\n    \n    Connection established.\n    \n    To escape to local shell, press ‘Ctrl+Alt+]’.  #回到本地shell\n    \n    Last login: Tue Sep 30 08:55:23 2014 from aca80058.ipt.aol.com\n    \n    [root@baobao ~]# ls\n    \n    123baoae  cheng  last.list  lsrootaf   图片\n    \n    anaconda-ks.cfg  baoagguo.txt  lsrootaa regular_express.txt.1  下载\n    \n    baoaa baoah  homelsrootab   xinzi.txt  音乐\n    \n    baoab   baoai  homefile  lsrootac   公共的 桌面\n    \n    ………………………………………………………\n    \n    [root@baobao ~]#\n\n2、xshell中文乱码解决法案\n\nXshell是个非常不错的工具。但很多时候中文显示为乱码的问题，解决方法其实很简单的，即把xshell编码方式改成UTF-8即可：[文件]–>[打开]–>在打开的session中选择连接的那个然后右键点击[属性] -> [终端]，编码选择为：Unicode(UTF-8)，然后重新连接服务器即可\n\n3、ssh远程登陆日志（重要）\n\n    [root@baobao ~]# cat /var/log/secure\n    \n    thenticationAgent, locale zh_CN.UTF-8)\n    \n    Sep 30 08:55:23 baobao sshd[2916]: Accepted password for rootfrom 172.168.0.88 port 57853 ssh2\n    \n    Sep 30 08:55:23 baobao sshd[2916]: pam_unix(sshd:session):session opened for user root by (uid=0)\n    \n    Sep 30 09:21:21 baobao sshd[3331]: Accepted password for rootfrom 172.168.0.88 port 52386 ssh2\n    \n    Sep 30 09:21:21 baobao sshd[3331]: pam_unix(sshd:session):session opened for user root by (uid=0)\n    \n    Sep 30 09:21:55 baobao sshd[2916]: pam_unix(sshd:session):session closed for user root\n\nl  sshd服务器配置\n\nsshd服务器的详细配置都放在/etc/ssh/sshd_config配置文件里，只要是没有被注释的就是默认值\n\n        [root@baobao ~]# vim /etc/ssh/sshd_config\n    \n    ……………………………………………………\n    \n    #Port 22   #也可以设置多个端口只要添加一行然后重启即可（不建议）\n    \n    #ListenAddress 0.0.0.0 #默认监听所有网卡的接口，如果想指定后面直接写ip即可\n    \n    Protocol 2 #ssh的协议版本\n    \n    # HostKey for protocol version 1   #下面是不同协议版本的秘钥文件host key\n    \n    #HostKey /etc/ssh/ssh_host_key\n    \n    # HostKeys for protocol version 2\n    \n    #HostKey /etc/ssh/ssh_host_rsa_key\n    \n    #HostKey /etc/ssh/ssh_host_dsa_key\n    \n    SyslogFacility AUTHPRIV #ssh登陆记录，默认是/var/log/secure\n    \n    #LoginGraceTime 2m  #登陆超时设置\n    \n    #PermitRootLogin yes#是否允许root登陆，默认是允许的，建议设置为no\n    \n    #StrictModes yes#是否让sshd检查相关权限以免用户将某些权限设置错误\n    \n    PasswordAuthentication yes  #密码验证，当然需要了\n    \n    #PermitEmptyPasswords no#是否允许空密码登陆，当然是no了\n    \n    #IgnoreUserKnownHosts no#是否忽略用户主文件记录，当然是no了\n    \n    #IgnoreRhosts yes   #是否取消~/.ssh/.rhosts认证，当然yes了\n    \n    ChallengeResponseAuthentication no  #该认证不安全，设置为no即可\n    \n    UsePAM yes#最好使用该认证模块记录与管理，所以yes\n    \n    #PrintLastLog yes #显示上次登陆的信息\n    \n    #TCPKeepAlive yes #网络不稳定时为了连接不中断可以设置为no\n    \n    #UsePrivilegeSeparation yes   #使用权限较低的程序来给用户操作\n    \n    DenyUsers #拒绝登陆的用户\n    \n    DenyGroups#拒绝登陆的组\n\n基本上ssh的默认设置已经就很安全了，不过还是建议将root的登陆权限取消，并将ssh的版本设置为2，而且通常这个文件不需要修改，如果修改了需要重启sshd\n\nl  制作不用密码接口登陆的ssh用户\n\n将客户端产生的key复制到服务器中，以后客户端再次登录的时候由于两者在ssh要连接的信号传递中已经比对过key了，所以不再需要输入密码了\n\n1、步骤一，客户端建立两把钥匙\n\n    [root@abao ~]# useradd abao\n    \n    [root@abao ~]# passwd abao\n    \n    更改用户 abao 的密码 。\n    \n    新的 密码：\n    \n    重新输入新的 密码：\n    \n    passwd： 所有的身份验证令牌已经成功更新。\n    \n    服务器上也做上面相同的用户配置\n    \n    [root@abao ~]# su – abao\n    \n    [abao@abao ~]$ ssh-keygen#默认以RSA建立两把钥匙\n    \n    Generating public/private rsa key pair.\n    \n    Enter file in which to save the key (/home/abao/.ssh/id_rsa): 回车\n    \n    Created directory ‘/home/abao/.ssh’. #建立主目录\n    \n    Enter passphrase (empty for no passphrase): 回车\n    \n    Enter same passphrase again: 回车\n    \n    Your identification has been saved in /home/abao/.ssh/id_rsa.   #私钥文件\n    \n    Your public key has been saved in /home/abao/.ssh/id_rsa.pub.   #公钥文件\n    \n    The key fingerprint is:\n    \n    89:1e:87:c9:a8:68:69:df:bd:75:a4:df:54:37:70:f1 abao@abao\n    \n    The key’s randomart image is:\n    \n    +–[ RSA 2048]—-+\n    \n    |   . |\n    \n    |o|\n    \n    | . .E|\n    \n    | o + .o  |\n    \n    |. * S  .   o.|\n    \n    | … . o  o   . o|\n    \n    |.+.   .  o . .  |\n    \n    |o . . . . o o|\n    \n    |   . . o.  . .   |\n    \n    +—————–+\n    \n    [abao@abao ~]$ ls -ld ~/.ssh; ls -l ~/.ssh\n    \n    drwx——. 2 abao abao 4096 9月  30 11:56 /home/abao/.ssh\n    \n    总用量 8\n    \n    -rw——-. 1 abao abao1675 9月  30 11:56 id_rsa\n    \n    -rw-r–r–. 1 abao abao  391 9月  3011:56 id_rsa.pub\n\n默认情况下建立私钥后权限和文件名放置位置都是正确的。身份必须是abao，当执行ssh-keygen的时候才会在用户主目录下生成两把钥匙，需要注意的是~/.ssh/目录必有700的权限，而且私钥文件的权限必须是-rw——-且属于abao才行，否则在秘钥比对中会被误判为危险而无法成功的以公私钥成对文件的机制实现连接\n\n2、步骤二，将公钥文件数据上传到服务器\n\n    [root@baobao ~]# useradd abao  #先在ssh服务器端建立上传文件账户abao\n    [root@baobao ~]# passwd abao\n    更改用户 abao 的密码 。\n    新的 密码：\n    重新输入新的 密码：\n    passwd： 所有的身份验证令牌已经成功更新。\n    [abao@abao ~]$ scp ~/.ssh/id_rsa.pub abao@172.168.72.68:~\n    \n    abao@172.168.72.68’s password:\n    \n    id_rsa.pub100%  3910.4KB/s   00:00\n\n3、步骤三，蒋公钥放置到服务器端的正确目录与文件名\n\n1)   服务器上建立文件~/.ssh\n\n    [root@baobao ~]# su – abao\n    \n    [abao@baobao ~]$ ls -ld .ssh\n    \n    ls: 无法访问.ssh: 没有那个文件或目录\n    \n    [abao@baobao ~]$ mkdir .ssh; chmod 700 .ssh  #注意其权限必须是700\n    \n    [abao@baobao ~]$ ls -ld .ssh\n    \n    drwx——. 2 abao abao 4096 9月  3012:30 .ssh\n\n2)   将公钥文件内的数据使用cat转存到authorized_keys内\n\n    [abao@baobao ~]$ ls -l *pub\n    \n    -rw-r–r–. 1 abao abao 391 9月  3012:26 id_rsa.pub\n    \n    [abao@baobao ~]$ cat id_rsa.pub >> .ssh/authorized_keys\n    \n    [abao@baobao ~]$ chmod 644 .ssh/authorized_keys\n    \n    [abao@baobao ~]$ ls -l .ssh\n    \n    总用量 4\n    \n    -rw-r–r–. 1 abao abao 391 9月  3012:39 authorized_keys\n\n总结：客户端必须制作出两把钥匙，其中私钥必须放到~/.ssh内；而公钥必须上传到服务器端并且放置到用户主目录下的~/.ssh/authorized_keys，同时目录的权限必须是700,而文件权限必须是644\n\n4、步骤四，验证\n\n    [root@abao ~]# ssh abao@172.168.72.68\n    \n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    \n    @WARNING: REMOTE HOSTIDENTIFICATION HAS CHANGED! @\n    \n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n    \n    IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n    \n    Someone could be eavesdropping on you right now(man-in-the-middle attack)!\n    \n    It is also possible that the RSA host key has just been changed.\n    \n    The fingerprint for the RSA key sent by the remote host is\n    \n    17:7e:8e:e9:fd:df:1c:e5:c9:9d:cd:30:31:5e:a6:45.\n    \n    Please contact your system administrator.\n    \n    Add correct host key in /root/.ssh/known_hosts to get rid ofthis message.\n    \n    Offending key in /root/.ssh/known_hosts:1\n    \n    RSA host key for 172.168.72.68 has changed and you haverequested strict checking.\n    \n    Host key verification failed.\n    \n    [root@abao ~]##看不再需要密码了\n    \n    [root@abao ~]# ifconfig   #查看服务器IP地址\n    \n    eth0  Linkencap:Ethernet  HWaddr00:0C:29:59:D9:E6\n    \n    inet addr:172.168.68.72  Bcast:172.168.255.255  Mask:255.255.0.0\n    \n    inet6 addr:fe80::20c:29ff:fe59:d9e6/64 Scope:Link\n    \n    UP BROADCASTRUNNING MULTICAST  MTU:1500  Metric:1\n    \n    RXpackets:239668 errors:0 dropped:0 overruns:0 frame:0\n    \n    TX packets:855errors:0 dropped:0 overruns:0 carrier:0\n    \n    collisions:0txqueuelen:1000\n    \n    RXbytes:18091942 (17.2 MiB)  TX bytes:71093(69.4 KiB)\n\nl  Ssh的安全设置\n\nSshd所谓的安全其实指的是它的数据加密功能，而对于sshd本身这个服务来说是很不安全的，所以如果不是特别需要请尽量限制在小范围内的几个ip或主机名即可\n\n1、 服务器本身的设置强化/etc/ssh/sshd——config\n\n\n    [root@baobao ~]# vim /etc/ssh/sshd_config\n\n1)   禁止root账号使用sshd服务\n\n    PermitRootLogin no                         #去掉注释并修改为no\n\n2)   禁止nossh这个组的用户使用sshd服务\n\n    DenyGroups nosh\n    \n3)   禁止用户testssh使用sshd服务\n\n    DenyUsers testssh\n    \n    [root@abao ~]# /etc/init.d/sshd restart\n    \n    停止 sshd：[确定]\n    \n    正在启动 sshd：[确定]\n    \n    [root@abao ~]# cat /var/log/secure #验证上述用户不能登陆后查看其日志\n    \n2、TCP Wrapper的使用\n\n    [root@baobao ~]# vim /etc/host.allow  #只允许内网和本机可以远程登陆\n    \n    sshd: 127.0.0.1 192.168.1.0/255.255.255.0192.168.10.0/255.255.255.0\n    \n    [root@baobao ~]# vim /etc/host.deny\n    \n    sshd: all\n\n3、iptables数据包过滤防火墙\n\n    [root@baobao ~]# iptables -A INPUT -i eth0 -s 192.168.1.0/24 -p tcp –dport 22 -j ACCEPT\n    \n    [root@baobao ~]# iptables -A INPUT -i eth0 -s 192.168.10.0/24 -p tcp –dport 22 -j ACCEPT\n    \n    [root@baobao ~]# /etc/init.d/iptables save\n    \n    [root@baobao ~]# /etc/init.d/iptables restart\n\n注意不要开放ssh的登陆权限给Internet上面的所有用户或主机，只开放给适当的部分用户或主机即可，否则会很不安全","slug":"linux—SSH1","published":1,"updated":"2016-09-02T06:15:53.000Z","_id":"cisldejke000dkgpvv0oocicv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一、远程连接简介</p>\n<p>l  远程连接服务器</p>\n<p>远程连接服务器通过文字或图形接口的方式来远程登陆系统，在远程的终端前面登陆linux主机并取得操作主机的接口shell，登陆后的操作就像在系统前面一样，这样可以进行系统管理的任务<br><a id=\"more\"></a><br>l  工作站</p>\n<p>工作站就是仅提供大量的运作能力给用户而不提供因特网服务的主机</p>\n<p>l  当前远程连接的登陆类型</p>\n<p>1、加密的远程连接</p>\n<p>主要是ssh，也是用到的最多最安全的，而且还可以使用rsync通过ssh协议来进行异地备份</p>\n<p>2、图形接口的远程连接</p>\n<p>XDMCP、VNC和XRDP，这些方式由于是传输图形所以速度慢，且安全性也不是很好</p>\n<p>二、远程连接之SSH</p>\n<p>Ssh是secure shell protocol（安全的壳程序协议）的简写，可以通过数据包加密技术将传输的数据包加密后再传输到网络上，当前ssh有两个版本，其中version2加上了连接检测的机制，可以避免连接期间被插入恶意攻击码</p>\n<p>l  Ssh服务器提供的功能</p>\n<p>默认的ssh服务器提供两个服务器功能</p>\n<p>1、ssh服务</p>\n<p>类似telnet的远程连接，使用shell的服务器，可以用来管理服务器</p>\n<p>2、ftp服务</p>\n<p>类似ftp服务的sftp-server，可以用来远程上传和下载</p>\n<p>l  连接的加密技术</p>\n<p>当前常见的网络数据包加密技术主要是通过非对称秘钥系统来处理的，主要是通过两把不同的公钥（public key）和私钥（private key）来进行数据的加密与解密的，且在同一个方向上的连接中这两把钥匙是成对存在的。每台主机都应该有自己的秘钥（公钥和私钥），并且公钥用于加密而私钥用于解密</p>\n<p>1、公钥（public key）</p>\n<p>提供给远程主机进行数据加密的行为，所有客户端都能取得它进行数据加密</p>\n<p>2、私钥（private key）</p>\n<p>远程主机使用公钥加密的数据在本地就需要使用私钥进行解密了，其非常重要只能在自己的主机上</p>\n<p>l  Ssh服务器端与客户端的链接步骤</p>\n<p>1、服务器建立公钥文件</p>\n<p>系统安装完成时sshd会朱勇去计算出需要的公钥文件和自己需要的私钥文件，等下次再次启动sshd的时候该服务就会主动去找文件/etc/ssh/ssh_host*</p>\n<p>2、客户端主动链接</p>\n<p>需要使用客户端程序（如ssh）来连接</p>\n<p>3、服务器传送公钥文件给客户端</p>\n<p>服务器将将取得的公钥文件/etc/ssh/ssh_host*传送给客户端（由于公钥是给大家使用的，所以此时的传送是明文的）</p>\n<p>4、客户端记录并比对该公钥数据，然后计算出自己的公钥和私钥</p>\n<p>客户端在第一次连接该服务器后会将服务器的公钥数据记录到客户端的用户主目录下的~ /.ssh/known_hosts内，如果已经记录过该数据则客户端会去比对此次受到的公钥与之前的差异，若接受此次公钥数据那么会计算出客户端自己的公钥和私钥</p>\n<p>5、客户端将自己的公钥传送给服务器</p>\n<p>此时服务器端会有自己的私钥和客户端的公钥；而客户端会有服务器的公钥和自己的私钥，这时服务器与客户端的秘钥（公钥与私钥）是不一样的，所以才称之为非对称式秘钥系统</p>\n<p>6、服务器开始进行双向加解密</p>\n<p>1)   服务器传送数据到客户端</p>\n<p>将用户的公钥加密后进行发送，客户端接收后用自己的私钥解密</p>\n<p>2)   客户端传送数据到服务器</p>\n<p>将服务器的公钥加密后进行发送，服务器接受后用自己的私钥解密</p>\n<p>l  秘钥文件的建立</p>\n<p>1、服务器端启动ssh服务，以生成服务器端的公钥和私钥</p>\n<pre><code>[root@baobao ~]# /etc/init.d/sshd restart\n</code></pre><p>停止 sshd：                                                [确定]</p>\n<p>生成 SSH1 RSA 主机键：                                     [确定]</p>\n<p>生成 SSH2 RSA 主机键：                                     [确定]</p>\n<p>正在生成 SSH2 DSA 主机键：                                 [确定]</p>\n<p>正在启动 sshd：                                            [确定]</p>\n<p>2、客户端利用ssh连接服务器</p>\n<pre><code>[root@abao ~]# ssh 172.168.72.68\n\nThe authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n\nRSA key fingerprint is36:cf:9f:46:54:46:4b:b3:b0:48:4a:93:4d:14:81:56.\n\nAre you sure you want to continue connecting (yes/no)? yes\n\nWarning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n\nroot@172.168.72.68’s password:\n\nLast login: Sun Sep 28 15:37:10 2014 from localhost\n\n[root@baobao ~]# exit\n\nlogout\n\nConnection to 172.168.72.68 closed.\n</code></pre><p>3、删除客户端的秘钥文件</p>\n<pre><code>[root@abao ~]# rm /etc/ssh/ssh_host*\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key.pub”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_key”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_key.pub”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key.pub”？y\n</code></pre><p>4、重新启动客户端的sshd服务以查看秘钥文件的建立过程</p>\n<pre><code>[root@abao ~]# /etc/init.d/sshd restart\n\n停止 sshd：[确定]\n\n生成 SSH1 RSA 主机键： [确定]\n\n生成 SSH2 RSA 主机键： [确定]\n\n正在生成 SSH2 DSA 主机键： [确定]\n\n正在启动 sshd：[确定]\n</code></pre><p>l  Sshd服务的启动</p>\n<pre><code>[root@baobao ~]# /etc/init.d/sshd restart\n\n停止 sshd：[确定]\n\n正在启动 sshd：[确定]\n\n[root@baobao ~]# netstat -tlnp | grep ssh #注意ssh服务是tcp端口22\n\ntcp 0  0 0.0.0.0:22  0.0.0.0:*LISTEN 9262/sshd\n\ntcp 0  0:::22:::* LISTEN 9262/sshd\n</code></pre><p>在linux系统中默认就有ssh所需要的软件了，包括可以产生密码等协议的OpenSSL软件和OpenSSH软件，而且在当前的linux系统中都是默认启动ssh的。这个sshd可以同时提供shell与ftp，而且都是在tcp端口22</p>\n<p>l  Linux用户ssh客户端的连接程序</p>\n<p>Linux客户端默认情况下是可以正常使用ssh的而不必安装额外的软件，而且其默认是启动的</p>\n<p>1、 直接登录远程主机的指令ssh（可用作服务器管理）</p>\n<p>Ssh命令格式为：ssh [-f][-o参数项目][-p非标准端口][账号@]IP地址[命令]</p>\n<p>1)   Ssh命令参数介绍</p>\n<p>-f：     需要配合后面的[命令]，不登陆远程主机直接发送一个命令过去而已</p>\n<p>-o：     主要的参数有：ConnectTimeout=秒数：连接等到的秒数，减少等待的时间</p>\n<p>StrictHostKeyChecking=yes/no/ask：默认是ask，如果想要public key主动加入known_host这里设置为no</p>\n<p>-p：     如果sshd服务启动在非标准的端口需使用该项目[命令]，不登陆远程主机直接发送一个命令过去，但与-f意义不太相同</p>\n<p>2)   ssh使用范例</p>\n<p>A：直接登录到远程主机</p>\n<pre><code>[root@abao ~]# ssh 172.168.72.68\n\nThe authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n\nRSA key fingerprint is36:cf:9f:46:54:46:4b:b3:b0:48:4a:93:4d:14:81:56.   #远程服务器的公钥指纹码\n\nAre you sure you want to continue connecting (yes/no)? yes   #将上述指纹码写入服务器公钥记录文件~ /.ssh/known_hosts，等再次登录时就不会出现该指纹码提示了。一定要yes而不是y\n\nWarning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n\nroot@172.168.72.68’s password:#远程主机的root密码\n\nLast login: Sun Sep 28 15:37:10 2014 from localhost\n\n[root@baobao ~]# exit #退出远程连接\n\nlogout\n\nConnection to 172.168.72.68 closed.\n</code></pre><p>一般我们使用“ssh 账号 主机IP地址”的登录方式，如果不写账号的话那么会以本地计算机的当前账号来尝试登录远程主机</p>\n<p>B：再次登录远程主机</p>\n<pre><code>[root@abao ~]# ssh 172.168.72.68\n\nroot@172.168.72.68’s password:\n\nLast login: Sun Sep 28 16:42:05 2014 from aca84448.ipt.aol.com\n</code></pre><p>C：使用账号axing登录</p>\n<pre><code>[root@baobao ~]# ssh axing@172.168.72.68\n\nThe authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n\nRSA key fingerprint is 36:cf:9f:46:54:46:4b:b3:b0:48:4a:93:4d:14:81:56.\n\nAre you sure you want to continue connecting (yes/no)? yes\n\nWarning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n\naxing@172.168.72.68’s password:\n\n[axing@baobao ~]$   #远程登陆后身份变为axing\n</code></pre><p>D：远程登陆执行命令后立刻离开</p>\n<pre><code>[root@abao ~]# ssh axing@172.168.72.68 find / -name passwd  #既后面直接加命令\n\naxing@172.168.72.68’s password:\n</code></pre><p>卡在这里等待命令的执行完毕</p>\n<p>E：让远程主机自动运行命令而立刻回到本地端继续工作</p>\n<pre><code>[root@abao ~]# ssh -faxing@172.168.72.68 shutdown -h now\n\naxing@172.168.72.68’s password:\n</code></pre><p>F：自动加上公钥记录而不再询问</p>\n<pre><code>[root@abao ~]# rm ~/.ssh/known_hosts\n\nrm：是否删除普通文件 “/root/.ssh/known_hosts”？y\n\n[root@abao ~]# ssh -o StrictHostKeyChecking=no root@172.168.72.68#不在要求输入yes或no了\n\nWarning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n\nroot@172.168.72.68’s password:\n\nLast login: Mon Sep 29 14:00:28 2014 from aca84448.ipt.aol.com\n</code></pre><p>2、服务器公钥记录文件~ /.ssh/known_hosts</p>\n<p>当远程登陆服务器时本机会主动将从服务器收到的公钥服务器公钥记录文件~ /.ssh/known_hosts进行比对，如果服务器的公钥文件还没有记录那么就会主动询问是否记录（登陆时候的yes或no行为）；如果收到的公钥已经记录那么会比对记录是否相同，如果相同则继续登陆，如果不同就会离开登陆而返回。但是如果是服务器重新安装那么服务器的公钥就会经常变化，这样的话我们就无法正常远程登陆了</p>\n<p>A：模拟服务器重新安装后ssh登陆</p>\n<pre><code>[root@baobao ~]# rm /etc/ssh/ssh_host*\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key.pub”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_key”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_key.pub”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key.pub”？y\n\n[root@baobao ~]# /etc/init.d/sshd restart\n\n停止 sshd：[确定]\n\n生成 SSH1 RSA 主机键： [确定]\n\n生成 SSH2 RSA 主机键： [确定]\n\n正在生成 SSH2 DSA 主机键： [确定]\n\n正在启动 sshd：[确定]\n\n[root@baobao ~]# ssh 172.168.72.68\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n@WARNING: REMOTE HOSTIDENTIFICATION HAS CHANGED! @\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n\nSomeone could be eavesdropping on you right now(man-in-the-middle attack)!\n\nIt is also possible that the RSA host key has just been changed.\n\nThe fingerprint for the RSA key sent by the remote host is\n\n17:7e:8e:e9:fd:df:1c:e5:c9:9d:cd:30:31:5e:a6:45.\n\nPlease contact your system administrator.\n\nAdd correct host key in /root/.ssh/known_hosts to get rid ofthis message.\n\nOffending key in /root/.ssh/known_hosts:2#有问题的数据行号\n\nRSA host key for 172.168.72.68 has changed and you haverequested strict checking.\n\nHost key verification failed.\n</code></pre><p>B：上述现象解决方法</p>\n<pre><code>[root@baobao ~]# vim /root/.ssh/known_hosts  #清空该文件\n\n[root@baobao ~]# ssh 172.168.72.68\n\nThe authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n\nRSA key fingerprint is17:7e:8e:e9:fd:df:1c:e5:c9:9d:cd:30:31:5e:a6:45.\n\nAre you sure you want to continue connecting (yes/no)? yes#记录公钥\n\nWarning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n\nroot@172.168.72.68’s password:\n\nLast login: Mon Sep 29 14:28:46 2014 from aca84448.ipt.aol.com\n</code></pre><p>3、模拟FTP的文件传输之SFTP</p>\n<p>如果想要从远程服务器下载或上传文件就不能使用ssh了，而必须使用sftp或scp，这两个指令也是使用ssh的端口22，只是模拟成ftp与复制的操作而已</p>\n<p>1)   SFTP使用的命令</p>\n<p>Sftp使用的命令与ftp是一样的</p>\n<p>A：针对远程服务器的命令</p>\n<p>跟linux服务器命令相同</p>\n<p>B：针对本机的命令</p>\n<p>在基本命令前面加“l”即代表是针对本机的操作，例如sftp&gt; lcd /tmp进入本机的该目录</p>\n<p>C：针对资料的上传或下载的命令</p>\n<p>put [本地目录或文件][远程]或put [本地目录或文件]（这样会存储到远程主机的目录下）</p>\n<p>get [远程目录或文件][本机]或get [远程目录或文件]（这样会存储到当前本机所在目录）</p>\n<p>2)   Sftp的使用范例</p>\n<p>A：sftp的登陆于退出</p>\n<pre><code>[root@baobao ~]# sftp 172.168.72.68\n\nConnecting to 172.168.72.68…\n\nroot@172.168.72.68’s password:\n\nsftp&gt;\n\n或\n\n[root@baobao ~]# sftp axing@172.168.72.68\n\nConnecting to 172.168.72.68…\n\naxing@172.168.72.68’s password:\n\nsftp&gt; exit\n</code></pre><p>B：上传与下载</p>\n<pre><code>sftp&gt; pwd#查看当前在服务器的目录\n\nRemote working directory: /home/axing\n\nsftp&gt; lls /etc/hosts #查看本机是否有该文件\n\n/etc/hosts\n\nsftp&gt; put /etc/hosts #上传该文件到远程服务器\n\nUploading /etc/hosts to /home/axing/hosts#上传到服务器的默认目录\n\n/etc/hosts 100%  1580.2KB/s   00:00\n\nsftp&gt; ls\n\nhosts\n\nsftp&gt; ls –a  #查看服务器该目录下的隐藏文件\n\n.   ..  .bash_history   .bash_logout.bash_profile   .bashrc .emacs\n\n.gnome2.mozillahosts\n\nsftp&gt; lcd /tmp#切换到本地的目录/tmp下\n\nsftp&gt; get .bashrc #从服务器下载该文件\n\nFetching /home/axing/.bashrc to .bashrc\n\n/home/axing/.bashrc   100%  124 0.1KB/s  00:00\n\nsftp&gt; lls –a #确认是否下载成功\n\n……………………………………………\n\nbaoaj  .bashrc  guoal   guobe  guobx guocq  guodj  pulse-Fhzh5o9BSGRy\n\nsftp&gt; exit\n</code></pre><p>4、文件异地直接复制SCP</p>\n<p>当已经知道服务器上的文件名时可以使用该命令，该命令的上传和下载使用格式如下：</p>\n<p>上传：scp [-pr] [-l 速率] file [账号@]主机：目录名（：后没有空格）</p>\n<p>下载：scp [-pr] [-l 速率] [账号@]主机：file 目录名（file后有空格）</p>\n<p>1)   命令参数介绍</p>\n<p>-p：     保留文件的原有权限</p>\n<p>-r：     复制整个目录</p>\n<p>-l：     传输速率</p>\n<p>2)   Scp使用范例</p>\n<p>A：上传本地文件到远程服务器</p>\n<p><code>[root@baobao ~]# scp /etc/hosts* axing@172.168.72.68:~</code> #上传到服务器的用户主目录下</p>\n<p>axing@172.168.72.68’s password:</p>\n<p>hosts                100% 158     0.2KB/s   00:00</p>\n<p>hosts.allow          100% 370     0.4KB/s   00:00</p>\n<p>hosts.deny           100% 460     0.5KB/s   00:00</p>\n<p>B：从服务器下载文件到本地</p>\n<pre><code>[root@baobao ~]# scp axing@172.168.72.68:/etc/bashrc /tmp\n\naxing@172.168.72.68’s password:\n\nbashrc   100%2681 2.6KB/s   00:00\n</code></pre><p>l  windows用户ssh客户端的连接程序</p>\n<p>默认的windows并没有ssh的客户端程序，所以需要下载第三方软件才行，常见的有pietty、psftp和filezilla</p>\n<p>1、直接连接的pietty（可用作服务器管理）</p>\n<p>下载后安装即可使用，不过由于编码的问题中文会显示乱码需要设置该软件才行option—more options—features（右第二个打钩打开键盘数字）—connection—-ssh（右2only选择版本）</p>\n<p>option—font（脚本gb2312调整字符集支持中文）</p>\n<p>2、psftp</p>\n<p>下载后安装并启动，输入open172.168.72.68后连接即可</p>\n<p>3、filezilla</p>\n<p>下载后安装运行即可，是普通的中文界面ftp软件</p>\n<p>l  windows用户远程登陆管理服务器工具xshell（当前最好用的工具）</p>\n<p>1、xshell界面</p>\n<p>它是windows下当前最好用的远程管理软件，只需要你下载后安装即可使用，一般还有中文版，非常好用，以下是链接后的画面</p>\n<pre><code>Connecting to 172.168.72.68:22…\n\nConnection established.\n\nTo escape to local shell, press ‘Ctrl+Alt+]’.  #回到本地shell\n\nLast login: Tue Sep 30 08:55:23 2014 from aca80058.ipt.aol.com\n\n[root@baobao ~]# ls\n\n123baoae  cheng  last.list  lsrootaf   图片\n\nanaconda-ks.cfg  baoagguo.txt  lsrootaa regular_express.txt.1  下载\n\nbaoaa baoah  homelsrootab   xinzi.txt  音乐\n\nbaoab   baoai  homefile  lsrootac   公共的 桌面\n\n………………………………………………………\n\n[root@baobao ~]#\n</code></pre><p>2、xshell中文乱码解决法案</p>\n<p>Xshell是个非常不错的工具。但很多时候中文显示为乱码的问题，解决方法其实很简单的，即把xshell编码方式改成UTF-8即可：[文件]–&gt;[打开]–&gt;在打开的session中选择连接的那个然后右键点击[属性] -&gt; [终端]，编码选择为：Unicode(UTF-8)，然后重新连接服务器即可</p>\n<p>3、ssh远程登陆日志（重要）</p>\n<pre><code>[root@baobao ~]# cat /var/log/secure\n\nthenticationAgent, locale zh_CN.UTF-8)\n\nSep 30 08:55:23 baobao sshd[2916]: Accepted password for rootfrom 172.168.0.88 port 57853 ssh2\n\nSep 30 08:55:23 baobao sshd[2916]: pam_unix(sshd:session):session opened for user root by (uid=0)\n\nSep 30 09:21:21 baobao sshd[3331]: Accepted password for rootfrom 172.168.0.88 port 52386 ssh2\n\nSep 30 09:21:21 baobao sshd[3331]: pam_unix(sshd:session):session opened for user root by (uid=0)\n\nSep 30 09:21:55 baobao sshd[2916]: pam_unix(sshd:session):session closed for user root\n</code></pre><p>l  sshd服务器配置</p>\n<p>sshd服务器的详细配置都放在/etc/ssh/sshd_config配置文件里，只要是没有被注释的就是默认值</p>\n<pre><code>    [root@baobao ~]# vim /etc/ssh/sshd_config\n\n……………………………………………………\n\n#Port 22   #也可以设置多个端口只要添加一行然后重启即可（不建议）\n\n#ListenAddress 0.0.0.0 #默认监听所有网卡的接口，如果想指定后面直接写ip即可\n\nProtocol 2 #ssh的协议版本\n\n# HostKey for protocol version 1   #下面是不同协议版本的秘钥文件host key\n\n#HostKey /etc/ssh/ssh_host_key\n\n# HostKeys for protocol version 2\n\n#HostKey /etc/ssh/ssh_host_rsa_key\n\n#HostKey /etc/ssh/ssh_host_dsa_key\n\nSyslogFacility AUTHPRIV #ssh登陆记录，默认是/var/log/secure\n\n#LoginGraceTime 2m  #登陆超时设置\n\n#PermitRootLogin yes#是否允许root登陆，默认是允许的，建议设置为no\n\n#StrictModes yes#是否让sshd检查相关权限以免用户将某些权限设置错误\n\nPasswordAuthentication yes  #密码验证，当然需要了\n\n#PermitEmptyPasswords no#是否允许空密码登陆，当然是no了\n\n#IgnoreUserKnownHosts no#是否忽略用户主文件记录，当然是no了\n\n#IgnoreRhosts yes   #是否取消~/.ssh/.rhosts认证，当然yes了\n\nChallengeResponseAuthentication no  #该认证不安全，设置为no即可\n\nUsePAM yes#最好使用该认证模块记录与管理，所以yes\n\n#PrintLastLog yes #显示上次登陆的信息\n\n#TCPKeepAlive yes #网络不稳定时为了连接不中断可以设置为no\n\n#UsePrivilegeSeparation yes   #使用权限较低的程序来给用户操作\n\nDenyUsers #拒绝登陆的用户\n\nDenyGroups#拒绝登陆的组\n</code></pre><p>基本上ssh的默认设置已经就很安全了，不过还是建议将root的登陆权限取消，并将ssh的版本设置为2，而且通常这个文件不需要修改，如果修改了需要重启sshd</p>\n<p>l  制作不用密码接口登陆的ssh用户</p>\n<p>将客户端产生的key复制到服务器中，以后客户端再次登录的时候由于两者在ssh要连接的信号传递中已经比对过key了，所以不再需要输入密码了</p>\n<p>1、步骤一，客户端建立两把钥匙</p>\n<pre><code>[root@abao ~]# useradd abao\n\n[root@abao ~]# passwd abao\n\n更改用户 abao 的密码 。\n\n新的 密码：\n\n重新输入新的 密码：\n\npasswd： 所有的身份验证令牌已经成功更新。\n\n服务器上也做上面相同的用户配置\n\n[root@abao ~]# su – abao\n\n[abao@abao ~]$ ssh-keygen#默认以RSA建立两把钥匙\n\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/home/abao/.ssh/id_rsa): 回车\n\nCreated directory ‘/home/abao/.ssh’. #建立主目录\n\nEnter passphrase (empty for no passphrase): 回车\n\nEnter same passphrase again: 回车\n\nYour identification has been saved in /home/abao/.ssh/id_rsa.   #私钥文件\n\nYour public key has been saved in /home/abao/.ssh/id_rsa.pub.   #公钥文件\n\nThe key fingerprint is:\n\n89:1e:87:c9:a8:68:69:df:bd:75:a4:df:54:37:70:f1 abao@abao\n\nThe key’s randomart image is:\n\n+–[ RSA 2048]—-+\n\n|   . |\n\n|o|\n\n| . .E|\n\n| o + .o  |\n\n|. * S  .   o.|\n\n| … . o  o   . o|\n\n|.+.   .  o . .  |\n\n|o . . . . o o|\n\n|   . . o.  . .   |\n\n+—————–+\n\n[abao@abao ~]$ ls -ld ~/.ssh; ls -l ~/.ssh\n\ndrwx——. 2 abao abao 4096 9月  30 11:56 /home/abao/.ssh\n\n总用量 8\n\n-rw——-. 1 abao abao1675 9月  30 11:56 id_rsa\n\n-rw-r–r–. 1 abao abao  391 9月  3011:56 id_rsa.pub\n</code></pre><p>默认情况下建立私钥后权限和文件名放置位置都是正确的。身份必须是abao，当执行ssh-keygen的时候才会在用户主目录下生成两把钥匙，需要注意的是~/.ssh/目录必有700的权限，而且私钥文件的权限必须是-rw——-且属于abao才行，否则在秘钥比对中会被误判为危险而无法成功的以公私钥成对文件的机制实现连接</p>\n<p>2、步骤二，将公钥文件数据上传到服务器</p>\n<pre><code>[root@baobao ~]# useradd abao  #先在ssh服务器端建立上传文件账户abao\n[root@baobao ~]# passwd abao\n更改用户 abao 的密码 。\n新的 密码：\n重新输入新的 密码：\npasswd： 所有的身份验证令牌已经成功更新。\n[abao@abao ~]$ scp ~/.ssh/id_rsa.pub abao@172.168.72.68:~\n\nabao@172.168.72.68’s password:\n\nid_rsa.pub100%  3910.4KB/s   00:00\n</code></pre><p>3、步骤三，蒋公钥放置到服务器端的正确目录与文件名</p>\n<p>1)   服务器上建立文件~/.ssh</p>\n<pre><code>[root@baobao ~]# su – abao\n\n[abao@baobao ~]$ ls -ld .ssh\n\nls: 无法访问.ssh: 没有那个文件或目录\n\n[abao@baobao ~]$ mkdir .ssh; chmod 700 .ssh  #注意其权限必须是700\n\n[abao@baobao ~]$ ls -ld .ssh\n\ndrwx——. 2 abao abao 4096 9月  3012:30 .ssh\n</code></pre><p>2)   将公钥文件内的数据使用cat转存到authorized_keys内</p>\n<pre><code>[abao@baobao ~]$ ls -l *pub\n\n-rw-r–r–. 1 abao abao 391 9月  3012:26 id_rsa.pub\n\n[abao@baobao ~]$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys\n\n[abao@baobao ~]$ chmod 644 .ssh/authorized_keys\n\n[abao@baobao ~]$ ls -l .ssh\n\n总用量 4\n\n-rw-r–r–. 1 abao abao 391 9月  3012:39 authorized_keys\n</code></pre><p>总结：客户端必须制作出两把钥匙，其中私钥必须放到~/.ssh内；而公钥必须上传到服务器端并且放置到用户主目录下的~/.ssh/authorized_keys，同时目录的权限必须是700,而文件权限必须是644</p>\n<p>4、步骤四，验证</p>\n<pre><code>[root@abao ~]# ssh abao@172.168.72.68\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n@WARNING: REMOTE HOSTIDENTIFICATION HAS CHANGED! @\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n\nSomeone could be eavesdropping on you right now(man-in-the-middle attack)!\n\nIt is also possible that the RSA host key has just been changed.\n\nThe fingerprint for the RSA key sent by the remote host is\n\n17:7e:8e:e9:fd:df:1c:e5:c9:9d:cd:30:31:5e:a6:45.\n\nPlease contact your system administrator.\n\nAdd correct host key in /root/.ssh/known_hosts to get rid ofthis message.\n\nOffending key in /root/.ssh/known_hosts:1\n\nRSA host key for 172.168.72.68 has changed and you haverequested strict checking.\n\nHost key verification failed.\n\n[root@abao ~]##看不再需要密码了\n\n[root@abao ~]# ifconfig   #查看服务器IP地址\n\neth0  Linkencap:Ethernet  HWaddr00:0C:29:59:D9:E6\n\ninet addr:172.168.68.72  Bcast:172.168.255.255  Mask:255.255.0.0\n\ninet6 addr:fe80::20c:29ff:fe59:d9e6/64 Scope:Link\n\nUP BROADCASTRUNNING MULTICAST  MTU:1500  Metric:1\n\nRXpackets:239668 errors:0 dropped:0 overruns:0 frame:0\n\nTX packets:855errors:0 dropped:0 overruns:0 carrier:0\n\ncollisions:0txqueuelen:1000\n\nRXbytes:18091942 (17.2 MiB)  TX bytes:71093(69.4 KiB)\n</code></pre><p>l  Ssh的安全设置</p>\n<p>Sshd所谓的安全其实指的是它的数据加密功能，而对于sshd本身这个服务来说是很不安全的，所以如果不是特别需要请尽量限制在小范围内的几个ip或主机名即可</p>\n<p>1、 服务器本身的设置强化/etc/ssh/sshd——config</p>\n<pre><code>[root@baobao ~]# vim /etc/ssh/sshd_config\n</code></pre><p>1)   禁止root账号使用sshd服务</p>\n<pre><code>PermitRootLogin no                         #去掉注释并修改为no\n</code></pre><p>2)   禁止nossh这个组的用户使用sshd服务</p>\n<pre><code>DenyGroups nosh\n</code></pre><p>3)   禁止用户testssh使用sshd服务</p>\n<pre><code>DenyUsers testssh\n\n[root@abao ~]# /etc/init.d/sshd restart\n\n停止 sshd：[确定]\n\n正在启动 sshd：[确定]\n\n[root@abao ~]# cat /var/log/secure #验证上述用户不能登陆后查看其日志\n</code></pre><p>2、TCP Wrapper的使用</p>\n<pre><code>[root@baobao ~]# vim /etc/host.allow  #只允许内网和本机可以远程登陆\n\nsshd: 127.0.0.1 192.168.1.0/255.255.255.0192.168.10.0/255.255.255.0\n\n[root@baobao ~]# vim /etc/host.deny\n\nsshd: all\n</code></pre><p>3、iptables数据包过滤防火墙</p>\n<pre><code>[root@baobao ~]# iptables -A INPUT -i eth0 -s 192.168.1.0/24 -p tcp –dport 22 -j ACCEPT\n\n[root@baobao ~]# iptables -A INPUT -i eth0 -s 192.168.10.0/24 -p tcp –dport 22 -j ACCEPT\n\n[root@baobao ~]# /etc/init.d/iptables save\n\n[root@baobao ~]# /etc/init.d/iptables restart\n</code></pre><p>注意不要开放ssh的登陆权限给Internet上面的所有用户或主机，只开放给适当的部分用户或主机即可，否则会很不安全</p>\n","excerpt":"<p>一、远程连接简介</p>\n<p>l  远程连接服务器</p>\n<p>远程连接服务器通过文字或图形接口的方式来远程登陆系统，在远程的终端前面登陆linux主机并取得操作主机的接口shell，登陆后的操作就像在系统前面一样，这样可以进行系统管理的任务<br>","more":"<br>l  工作站</p>\n<p>工作站就是仅提供大量的运作能力给用户而不提供因特网服务的主机</p>\n<p>l  当前远程连接的登陆类型</p>\n<p>1、加密的远程连接</p>\n<p>主要是ssh，也是用到的最多最安全的，而且还可以使用rsync通过ssh协议来进行异地备份</p>\n<p>2、图形接口的远程连接</p>\n<p>XDMCP、VNC和XRDP，这些方式由于是传输图形所以速度慢，且安全性也不是很好</p>\n<p>二、远程连接之SSH</p>\n<p>Ssh是secure shell protocol（安全的壳程序协议）的简写，可以通过数据包加密技术将传输的数据包加密后再传输到网络上，当前ssh有两个版本，其中version2加上了连接检测的机制，可以避免连接期间被插入恶意攻击码</p>\n<p>l  Ssh服务器提供的功能</p>\n<p>默认的ssh服务器提供两个服务器功能</p>\n<p>1、ssh服务</p>\n<p>类似telnet的远程连接，使用shell的服务器，可以用来管理服务器</p>\n<p>2、ftp服务</p>\n<p>类似ftp服务的sftp-server，可以用来远程上传和下载</p>\n<p>l  连接的加密技术</p>\n<p>当前常见的网络数据包加密技术主要是通过非对称秘钥系统来处理的，主要是通过两把不同的公钥（public key）和私钥（private key）来进行数据的加密与解密的，且在同一个方向上的连接中这两把钥匙是成对存在的。每台主机都应该有自己的秘钥（公钥和私钥），并且公钥用于加密而私钥用于解密</p>\n<p>1、公钥（public key）</p>\n<p>提供给远程主机进行数据加密的行为，所有客户端都能取得它进行数据加密</p>\n<p>2、私钥（private key）</p>\n<p>远程主机使用公钥加密的数据在本地就需要使用私钥进行解密了，其非常重要只能在自己的主机上</p>\n<p>l  Ssh服务器端与客户端的链接步骤</p>\n<p>1、服务器建立公钥文件</p>\n<p>系统安装完成时sshd会朱勇去计算出需要的公钥文件和自己需要的私钥文件，等下次再次启动sshd的时候该服务就会主动去找文件/etc/ssh/ssh_host*</p>\n<p>2、客户端主动链接</p>\n<p>需要使用客户端程序（如ssh）来连接</p>\n<p>3、服务器传送公钥文件给客户端</p>\n<p>服务器将将取得的公钥文件/etc/ssh/ssh_host*传送给客户端（由于公钥是给大家使用的，所以此时的传送是明文的）</p>\n<p>4、客户端记录并比对该公钥数据，然后计算出自己的公钥和私钥</p>\n<p>客户端在第一次连接该服务器后会将服务器的公钥数据记录到客户端的用户主目录下的~ /.ssh/known_hosts内，如果已经记录过该数据则客户端会去比对此次受到的公钥与之前的差异，若接受此次公钥数据那么会计算出客户端自己的公钥和私钥</p>\n<p>5、客户端将自己的公钥传送给服务器</p>\n<p>此时服务器端会有自己的私钥和客户端的公钥；而客户端会有服务器的公钥和自己的私钥，这时服务器与客户端的秘钥（公钥与私钥）是不一样的，所以才称之为非对称式秘钥系统</p>\n<p>6、服务器开始进行双向加解密</p>\n<p>1)   服务器传送数据到客户端</p>\n<p>将用户的公钥加密后进行发送，客户端接收后用自己的私钥解密</p>\n<p>2)   客户端传送数据到服务器</p>\n<p>将服务器的公钥加密后进行发送，服务器接受后用自己的私钥解密</p>\n<p>l  秘钥文件的建立</p>\n<p>1、服务器端启动ssh服务，以生成服务器端的公钥和私钥</p>\n<pre><code>[root@baobao ~]# /etc/init.d/sshd restart\n</code></pre><p>停止 sshd：                                                [确定]</p>\n<p>生成 SSH1 RSA 主机键：                                     [确定]</p>\n<p>生成 SSH2 RSA 主机键：                                     [确定]</p>\n<p>正在生成 SSH2 DSA 主机键：                                 [确定]</p>\n<p>正在启动 sshd：                                            [确定]</p>\n<p>2、客户端利用ssh连接服务器</p>\n<pre><code>[root@abao ~]# ssh 172.168.72.68\n\nThe authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n\nRSA key fingerprint is36:cf:9f:46:54:46:4b:b3:b0:48:4a:93:4d:14:81:56.\n\nAre you sure you want to continue connecting (yes/no)? yes\n\nWarning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n\nroot@172.168.72.68’s password:\n\nLast login: Sun Sep 28 15:37:10 2014 from localhost\n\n[root@baobao ~]# exit\n\nlogout\n\nConnection to 172.168.72.68 closed.\n</code></pre><p>3、删除客户端的秘钥文件</p>\n<pre><code>[root@abao ~]# rm /etc/ssh/ssh_host*\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key.pub”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_key”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_key.pub”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key.pub”？y\n</code></pre><p>4、重新启动客户端的sshd服务以查看秘钥文件的建立过程</p>\n<pre><code>[root@abao ~]# /etc/init.d/sshd restart\n\n停止 sshd：[确定]\n\n生成 SSH1 RSA 主机键： [确定]\n\n生成 SSH2 RSA 主机键： [确定]\n\n正在生成 SSH2 DSA 主机键： [确定]\n\n正在启动 sshd：[确定]\n</code></pre><p>l  Sshd服务的启动</p>\n<pre><code>[root@baobao ~]# /etc/init.d/sshd restart\n\n停止 sshd：[确定]\n\n正在启动 sshd：[确定]\n\n[root@baobao ~]# netstat -tlnp | grep ssh #注意ssh服务是tcp端口22\n\ntcp 0  0 0.0.0.0:22  0.0.0.0:*LISTEN 9262/sshd\n\ntcp 0  0:::22:::* LISTEN 9262/sshd\n</code></pre><p>在linux系统中默认就有ssh所需要的软件了，包括可以产生密码等协议的OpenSSL软件和OpenSSH软件，而且在当前的linux系统中都是默认启动ssh的。这个sshd可以同时提供shell与ftp，而且都是在tcp端口22</p>\n<p>l  Linux用户ssh客户端的连接程序</p>\n<p>Linux客户端默认情况下是可以正常使用ssh的而不必安装额外的软件，而且其默认是启动的</p>\n<p>1、 直接登录远程主机的指令ssh（可用作服务器管理）</p>\n<p>Ssh命令格式为：ssh [-f][-o参数项目][-p非标准端口][账号@]IP地址[命令]</p>\n<p>1)   Ssh命令参数介绍</p>\n<p>-f：     需要配合后面的[命令]，不登陆远程主机直接发送一个命令过去而已</p>\n<p>-o：     主要的参数有：ConnectTimeout=秒数：连接等到的秒数，减少等待的时间</p>\n<p>StrictHostKeyChecking=yes/no/ask：默认是ask，如果想要public key主动加入known_host这里设置为no</p>\n<p>-p：     如果sshd服务启动在非标准的端口需使用该项目[命令]，不登陆远程主机直接发送一个命令过去，但与-f意义不太相同</p>\n<p>2)   ssh使用范例</p>\n<p>A：直接登录到远程主机</p>\n<pre><code>[root@abao ~]# ssh 172.168.72.68\n\nThe authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n\nRSA key fingerprint is36:cf:9f:46:54:46:4b:b3:b0:48:4a:93:4d:14:81:56.   #远程服务器的公钥指纹码\n\nAre you sure you want to continue connecting (yes/no)? yes   #将上述指纹码写入服务器公钥记录文件~ /.ssh/known_hosts，等再次登录时就不会出现该指纹码提示了。一定要yes而不是y\n\nWarning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n\nroot@172.168.72.68’s password:#远程主机的root密码\n\nLast login: Sun Sep 28 15:37:10 2014 from localhost\n\n[root@baobao ~]# exit #退出远程连接\n\nlogout\n\nConnection to 172.168.72.68 closed.\n</code></pre><p>一般我们使用“ssh 账号 主机IP地址”的登录方式，如果不写账号的话那么会以本地计算机的当前账号来尝试登录远程主机</p>\n<p>B：再次登录远程主机</p>\n<pre><code>[root@abao ~]# ssh 172.168.72.68\n\nroot@172.168.72.68’s password:\n\nLast login: Sun Sep 28 16:42:05 2014 from aca84448.ipt.aol.com\n</code></pre><p>C：使用账号axing登录</p>\n<pre><code>[root@baobao ~]# ssh axing@172.168.72.68\n\nThe authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n\nRSA key fingerprint is 36:cf:9f:46:54:46:4b:b3:b0:48:4a:93:4d:14:81:56.\n\nAre you sure you want to continue connecting (yes/no)? yes\n\nWarning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n\naxing@172.168.72.68’s password:\n\n[axing@baobao ~]$   #远程登陆后身份变为axing\n</code></pre><p>D：远程登陆执行命令后立刻离开</p>\n<pre><code>[root@abao ~]# ssh axing@172.168.72.68 find / -name passwd  #既后面直接加命令\n\naxing@172.168.72.68’s password:\n</code></pre><p>卡在这里等待命令的执行完毕</p>\n<p>E：让远程主机自动运行命令而立刻回到本地端继续工作</p>\n<pre><code>[root@abao ~]# ssh -faxing@172.168.72.68 shutdown -h now\n\naxing@172.168.72.68’s password:\n</code></pre><p>F：自动加上公钥记录而不再询问</p>\n<pre><code>[root@abao ~]# rm ~/.ssh/known_hosts\n\nrm：是否删除普通文件 “/root/.ssh/known_hosts”？y\n\n[root@abao ~]# ssh -o StrictHostKeyChecking=no root@172.168.72.68#不在要求输入yes或no了\n\nWarning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n\nroot@172.168.72.68’s password:\n\nLast login: Mon Sep 29 14:00:28 2014 from aca84448.ipt.aol.com\n</code></pre><p>2、服务器公钥记录文件~ /.ssh/known_hosts</p>\n<p>当远程登陆服务器时本机会主动将从服务器收到的公钥服务器公钥记录文件~ /.ssh/known_hosts进行比对，如果服务器的公钥文件还没有记录那么就会主动询问是否记录（登陆时候的yes或no行为）；如果收到的公钥已经记录那么会比对记录是否相同，如果相同则继续登陆，如果不同就会离开登陆而返回。但是如果是服务器重新安装那么服务器的公钥就会经常变化，这样的话我们就无法正常远程登陆了</p>\n<p>A：模拟服务器重新安装后ssh登陆</p>\n<pre><code>[root@baobao ~]# rm /etc/ssh/ssh_host*\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_dsa_key.pub”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_key”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_key.pub”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key”？y\n\nrm：是否删除普通文件 “/etc/ssh/ssh_host_rsa_key.pub”？y\n\n[root@baobao ~]# /etc/init.d/sshd restart\n\n停止 sshd：[确定]\n\n生成 SSH1 RSA 主机键： [确定]\n\n生成 SSH2 RSA 主机键： [确定]\n\n正在生成 SSH2 DSA 主机键： [确定]\n\n正在启动 sshd：[确定]\n\n[root@baobao ~]# ssh 172.168.72.68\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n@WARNING: REMOTE HOSTIDENTIFICATION HAS CHANGED! @\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n\nSomeone could be eavesdropping on you right now(man-in-the-middle attack)!\n\nIt is also possible that the RSA host key has just been changed.\n\nThe fingerprint for the RSA key sent by the remote host is\n\n17:7e:8e:e9:fd:df:1c:e5:c9:9d:cd:30:31:5e:a6:45.\n\nPlease contact your system administrator.\n\nAdd correct host key in /root/.ssh/known_hosts to get rid ofthis message.\n\nOffending key in /root/.ssh/known_hosts:2#有问题的数据行号\n\nRSA host key for 172.168.72.68 has changed and you haverequested strict checking.\n\nHost key verification failed.\n</code></pre><p>B：上述现象解决方法</p>\n<pre><code>[root@baobao ~]# vim /root/.ssh/known_hosts  #清空该文件\n\n[root@baobao ~]# ssh 172.168.72.68\n\nThe authenticity of host ‘172.168.72.68 (172.168.72.68)’ can’tbe established.\n\nRSA key fingerprint is17:7e:8e:e9:fd:df:1c:e5:c9:9d:cd:30:31:5e:a6:45.\n\nAre you sure you want to continue connecting (yes/no)? yes#记录公钥\n\nWarning: Permanently added ‘172.168.72.68’ (RSA) to the list ofknown hosts.\n\nroot@172.168.72.68’s password:\n\nLast login: Mon Sep 29 14:28:46 2014 from aca84448.ipt.aol.com\n</code></pre><p>3、模拟FTP的文件传输之SFTP</p>\n<p>如果想要从远程服务器下载或上传文件就不能使用ssh了，而必须使用sftp或scp，这两个指令也是使用ssh的端口22，只是模拟成ftp与复制的操作而已</p>\n<p>1)   SFTP使用的命令</p>\n<p>Sftp使用的命令与ftp是一样的</p>\n<p>A：针对远程服务器的命令</p>\n<p>跟linux服务器命令相同</p>\n<p>B：针对本机的命令</p>\n<p>在基本命令前面加“l”即代表是针对本机的操作，例如sftp&gt; lcd /tmp进入本机的该目录</p>\n<p>C：针对资料的上传或下载的命令</p>\n<p>put [本地目录或文件][远程]或put [本地目录或文件]（这样会存储到远程主机的目录下）</p>\n<p>get [远程目录或文件][本机]或get [远程目录或文件]（这样会存储到当前本机所在目录）</p>\n<p>2)   Sftp的使用范例</p>\n<p>A：sftp的登陆于退出</p>\n<pre><code>[root@baobao ~]# sftp 172.168.72.68\n\nConnecting to 172.168.72.68…\n\nroot@172.168.72.68’s password:\n\nsftp&gt;\n\n或\n\n[root@baobao ~]# sftp axing@172.168.72.68\n\nConnecting to 172.168.72.68…\n\naxing@172.168.72.68’s password:\n\nsftp&gt; exit\n</code></pre><p>B：上传与下载</p>\n<pre><code>sftp&gt; pwd#查看当前在服务器的目录\n\nRemote working directory: /home/axing\n\nsftp&gt; lls /etc/hosts #查看本机是否有该文件\n\n/etc/hosts\n\nsftp&gt; put /etc/hosts #上传该文件到远程服务器\n\nUploading /etc/hosts to /home/axing/hosts#上传到服务器的默认目录\n\n/etc/hosts 100%  1580.2KB/s   00:00\n\nsftp&gt; ls\n\nhosts\n\nsftp&gt; ls –a  #查看服务器该目录下的隐藏文件\n\n.   ..  .bash_history   .bash_logout.bash_profile   .bashrc .emacs\n\n.gnome2.mozillahosts\n\nsftp&gt; lcd /tmp#切换到本地的目录/tmp下\n\nsftp&gt; get .bashrc #从服务器下载该文件\n\nFetching /home/axing/.bashrc to .bashrc\n\n/home/axing/.bashrc   100%  124 0.1KB/s  00:00\n\nsftp&gt; lls –a #确认是否下载成功\n\n……………………………………………\n\nbaoaj  .bashrc  guoal   guobe  guobx guocq  guodj  pulse-Fhzh5o9BSGRy\n\nsftp&gt; exit\n</code></pre><p>4、文件异地直接复制SCP</p>\n<p>当已经知道服务器上的文件名时可以使用该命令，该命令的上传和下载使用格式如下：</p>\n<p>上传：scp [-pr] [-l 速率] file [账号@]主机：目录名（：后没有空格）</p>\n<p>下载：scp [-pr] [-l 速率] [账号@]主机：file 目录名（file后有空格）</p>\n<p>1)   命令参数介绍</p>\n<p>-p：     保留文件的原有权限</p>\n<p>-r：     复制整个目录</p>\n<p>-l：     传输速率</p>\n<p>2)   Scp使用范例</p>\n<p>A：上传本地文件到远程服务器</p>\n<p><code>[root@baobao ~]# scp /etc/hosts* axing@172.168.72.68:~</code> #上传到服务器的用户主目录下</p>\n<p>axing@172.168.72.68’s password:</p>\n<p>hosts                100% 158     0.2KB/s   00:00</p>\n<p>hosts.allow          100% 370     0.4KB/s   00:00</p>\n<p>hosts.deny           100% 460     0.5KB/s   00:00</p>\n<p>B：从服务器下载文件到本地</p>\n<pre><code>[root@baobao ~]# scp axing@172.168.72.68:/etc/bashrc /tmp\n\naxing@172.168.72.68’s password:\n\nbashrc   100%2681 2.6KB/s   00:00\n</code></pre><p>l  windows用户ssh客户端的连接程序</p>\n<p>默认的windows并没有ssh的客户端程序，所以需要下载第三方软件才行，常见的有pietty、psftp和filezilla</p>\n<p>1、直接连接的pietty（可用作服务器管理）</p>\n<p>下载后安装即可使用，不过由于编码的问题中文会显示乱码需要设置该软件才行option—more options—features（右第二个打钩打开键盘数字）—connection—-ssh（右2only选择版本）</p>\n<p>option—font（脚本gb2312调整字符集支持中文）</p>\n<p>2、psftp</p>\n<p>下载后安装并启动，输入open172.168.72.68后连接即可</p>\n<p>3、filezilla</p>\n<p>下载后安装运行即可，是普通的中文界面ftp软件</p>\n<p>l  windows用户远程登陆管理服务器工具xshell（当前最好用的工具）</p>\n<p>1、xshell界面</p>\n<p>它是windows下当前最好用的远程管理软件，只需要你下载后安装即可使用，一般还有中文版，非常好用，以下是链接后的画面</p>\n<pre><code>Connecting to 172.168.72.68:22…\n\nConnection established.\n\nTo escape to local shell, press ‘Ctrl+Alt+]’.  #回到本地shell\n\nLast login: Tue Sep 30 08:55:23 2014 from aca80058.ipt.aol.com\n\n[root@baobao ~]# ls\n\n123baoae  cheng  last.list  lsrootaf   图片\n\nanaconda-ks.cfg  baoagguo.txt  lsrootaa regular_express.txt.1  下载\n\nbaoaa baoah  homelsrootab   xinzi.txt  音乐\n\nbaoab   baoai  homefile  lsrootac   公共的 桌面\n\n………………………………………………………\n\n[root@baobao ~]#\n</code></pre><p>2、xshell中文乱码解决法案</p>\n<p>Xshell是个非常不错的工具。但很多时候中文显示为乱码的问题，解决方法其实很简单的，即把xshell编码方式改成UTF-8即可：[文件]–&gt;[打开]–&gt;在打开的session中选择连接的那个然后右键点击[属性] -&gt; [终端]，编码选择为：Unicode(UTF-8)，然后重新连接服务器即可</p>\n<p>3、ssh远程登陆日志（重要）</p>\n<pre><code>[root@baobao ~]# cat /var/log/secure\n\nthenticationAgent, locale zh_CN.UTF-8)\n\nSep 30 08:55:23 baobao sshd[2916]: Accepted password for rootfrom 172.168.0.88 port 57853 ssh2\n\nSep 30 08:55:23 baobao sshd[2916]: pam_unix(sshd:session):session opened for user root by (uid=0)\n\nSep 30 09:21:21 baobao sshd[3331]: Accepted password for rootfrom 172.168.0.88 port 52386 ssh2\n\nSep 30 09:21:21 baobao sshd[3331]: pam_unix(sshd:session):session opened for user root by (uid=0)\n\nSep 30 09:21:55 baobao sshd[2916]: pam_unix(sshd:session):session closed for user root\n</code></pre><p>l  sshd服务器配置</p>\n<p>sshd服务器的详细配置都放在/etc/ssh/sshd_config配置文件里，只要是没有被注释的就是默认值</p>\n<pre><code>    [root@baobao ~]# vim /etc/ssh/sshd_config\n\n……………………………………………………\n\n#Port 22   #也可以设置多个端口只要添加一行然后重启即可（不建议）\n\n#ListenAddress 0.0.0.0 #默认监听所有网卡的接口，如果想指定后面直接写ip即可\n\nProtocol 2 #ssh的协议版本\n\n# HostKey for protocol version 1   #下面是不同协议版本的秘钥文件host key\n\n#HostKey /etc/ssh/ssh_host_key\n\n# HostKeys for protocol version 2\n\n#HostKey /etc/ssh/ssh_host_rsa_key\n\n#HostKey /etc/ssh/ssh_host_dsa_key\n\nSyslogFacility AUTHPRIV #ssh登陆记录，默认是/var/log/secure\n\n#LoginGraceTime 2m  #登陆超时设置\n\n#PermitRootLogin yes#是否允许root登陆，默认是允许的，建议设置为no\n\n#StrictModes yes#是否让sshd检查相关权限以免用户将某些权限设置错误\n\nPasswordAuthentication yes  #密码验证，当然需要了\n\n#PermitEmptyPasswords no#是否允许空密码登陆，当然是no了\n\n#IgnoreUserKnownHosts no#是否忽略用户主文件记录，当然是no了\n\n#IgnoreRhosts yes   #是否取消~/.ssh/.rhosts认证，当然yes了\n\nChallengeResponseAuthentication no  #该认证不安全，设置为no即可\n\nUsePAM yes#最好使用该认证模块记录与管理，所以yes\n\n#PrintLastLog yes #显示上次登陆的信息\n\n#TCPKeepAlive yes #网络不稳定时为了连接不中断可以设置为no\n\n#UsePrivilegeSeparation yes   #使用权限较低的程序来给用户操作\n\nDenyUsers #拒绝登陆的用户\n\nDenyGroups#拒绝登陆的组\n</code></pre><p>基本上ssh的默认设置已经就很安全了，不过还是建议将root的登陆权限取消，并将ssh的版本设置为2，而且通常这个文件不需要修改，如果修改了需要重启sshd</p>\n<p>l  制作不用密码接口登陆的ssh用户</p>\n<p>将客户端产生的key复制到服务器中，以后客户端再次登录的时候由于两者在ssh要连接的信号传递中已经比对过key了，所以不再需要输入密码了</p>\n<p>1、步骤一，客户端建立两把钥匙</p>\n<pre><code>[root@abao ~]# useradd abao\n\n[root@abao ~]# passwd abao\n\n更改用户 abao 的密码 。\n\n新的 密码：\n\n重新输入新的 密码：\n\npasswd： 所有的身份验证令牌已经成功更新。\n\n服务器上也做上面相同的用户配置\n\n[root@abao ~]# su – abao\n\n[abao@abao ~]$ ssh-keygen#默认以RSA建立两把钥匙\n\nGenerating public/private rsa key pair.\n\nEnter file in which to save the key (/home/abao/.ssh/id_rsa): 回车\n\nCreated directory ‘/home/abao/.ssh’. #建立主目录\n\nEnter passphrase (empty for no passphrase): 回车\n\nEnter same passphrase again: 回车\n\nYour identification has been saved in /home/abao/.ssh/id_rsa.   #私钥文件\n\nYour public key has been saved in /home/abao/.ssh/id_rsa.pub.   #公钥文件\n\nThe key fingerprint is:\n\n89:1e:87:c9:a8:68:69:df:bd:75:a4:df:54:37:70:f1 abao@abao\n\nThe key’s randomart image is:\n\n+–[ RSA 2048]—-+\n\n|   . |\n\n|o|\n\n| . .E|\n\n| o + .o  |\n\n|. * S  .   o.|\n\n| … . o  o   . o|\n\n|.+.   .  o . .  |\n\n|o . . . . o o|\n\n|   . . o.  . .   |\n\n+—————–+\n\n[abao@abao ~]$ ls -ld ~/.ssh; ls -l ~/.ssh\n\ndrwx——. 2 abao abao 4096 9月  30 11:56 /home/abao/.ssh\n\n总用量 8\n\n-rw——-. 1 abao abao1675 9月  30 11:56 id_rsa\n\n-rw-r–r–. 1 abao abao  391 9月  3011:56 id_rsa.pub\n</code></pre><p>默认情况下建立私钥后权限和文件名放置位置都是正确的。身份必须是abao，当执行ssh-keygen的时候才会在用户主目录下生成两把钥匙，需要注意的是~/.ssh/目录必有700的权限，而且私钥文件的权限必须是-rw——-且属于abao才行，否则在秘钥比对中会被误判为危险而无法成功的以公私钥成对文件的机制实现连接</p>\n<p>2、步骤二，将公钥文件数据上传到服务器</p>\n<pre><code>[root@baobao ~]# useradd abao  #先在ssh服务器端建立上传文件账户abao\n[root@baobao ~]# passwd abao\n更改用户 abao 的密码 。\n新的 密码：\n重新输入新的 密码：\npasswd： 所有的身份验证令牌已经成功更新。\n[abao@abao ~]$ scp ~/.ssh/id_rsa.pub abao@172.168.72.68:~\n\nabao@172.168.72.68’s password:\n\nid_rsa.pub100%  3910.4KB/s   00:00\n</code></pre><p>3、步骤三，蒋公钥放置到服务器端的正确目录与文件名</p>\n<p>1)   服务器上建立文件~/.ssh</p>\n<pre><code>[root@baobao ~]# su – abao\n\n[abao@baobao ~]$ ls -ld .ssh\n\nls: 无法访问.ssh: 没有那个文件或目录\n\n[abao@baobao ~]$ mkdir .ssh; chmod 700 .ssh  #注意其权限必须是700\n\n[abao@baobao ~]$ ls -ld .ssh\n\ndrwx——. 2 abao abao 4096 9月  3012:30 .ssh\n</code></pre><p>2)   将公钥文件内的数据使用cat转存到authorized_keys内</p>\n<pre><code>[abao@baobao ~]$ ls -l *pub\n\n-rw-r–r–. 1 abao abao 391 9月  3012:26 id_rsa.pub\n\n[abao@baobao ~]$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys\n\n[abao@baobao ~]$ chmod 644 .ssh/authorized_keys\n\n[abao@baobao ~]$ ls -l .ssh\n\n总用量 4\n\n-rw-r–r–. 1 abao abao 391 9月  3012:39 authorized_keys\n</code></pre><p>总结：客户端必须制作出两把钥匙，其中私钥必须放到~/.ssh内；而公钥必须上传到服务器端并且放置到用户主目录下的~/.ssh/authorized_keys，同时目录的权限必须是700,而文件权限必须是644</p>\n<p>4、步骤四，验证</p>\n<pre><code>[root@abao ~]# ssh abao@172.168.72.68\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\n@WARNING: REMOTE HOSTIDENTIFICATION HAS CHANGED! @\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n\nSomeone could be eavesdropping on you right now(man-in-the-middle attack)!\n\nIt is also possible that the RSA host key has just been changed.\n\nThe fingerprint for the RSA key sent by the remote host is\n\n17:7e:8e:e9:fd:df:1c:e5:c9:9d:cd:30:31:5e:a6:45.\n\nPlease contact your system administrator.\n\nAdd correct host key in /root/.ssh/known_hosts to get rid ofthis message.\n\nOffending key in /root/.ssh/known_hosts:1\n\nRSA host key for 172.168.72.68 has changed and you haverequested strict checking.\n\nHost key verification failed.\n\n[root@abao ~]##看不再需要密码了\n\n[root@abao ~]# ifconfig   #查看服务器IP地址\n\neth0  Linkencap:Ethernet  HWaddr00:0C:29:59:D9:E6\n\ninet addr:172.168.68.72  Bcast:172.168.255.255  Mask:255.255.0.0\n\ninet6 addr:fe80::20c:29ff:fe59:d9e6/64 Scope:Link\n\nUP BROADCASTRUNNING MULTICAST  MTU:1500  Metric:1\n\nRXpackets:239668 errors:0 dropped:0 overruns:0 frame:0\n\nTX packets:855errors:0 dropped:0 overruns:0 carrier:0\n\ncollisions:0txqueuelen:1000\n\nRXbytes:18091942 (17.2 MiB)  TX bytes:71093(69.4 KiB)\n</code></pre><p>l  Ssh的安全设置</p>\n<p>Sshd所谓的安全其实指的是它的数据加密功能，而对于sshd本身这个服务来说是很不安全的，所以如果不是特别需要请尽量限制在小范围内的几个ip或主机名即可</p>\n<p>1、 服务器本身的设置强化/etc/ssh/sshd——config</p>\n<pre><code>[root@baobao ~]# vim /etc/ssh/sshd_config\n</code></pre><p>1)   禁止root账号使用sshd服务</p>\n<pre><code>PermitRootLogin no                         #去掉注释并修改为no\n</code></pre><p>2)   禁止nossh这个组的用户使用sshd服务</p>\n<pre><code>DenyGroups nosh\n</code></pre><p>3)   禁止用户testssh使用sshd服务</p>\n<pre><code>DenyUsers testssh\n\n[root@abao ~]# /etc/init.d/sshd restart\n\n停止 sshd：[确定]\n\n正在启动 sshd：[确定]\n\n[root@abao ~]# cat /var/log/secure #验证上述用户不能登陆后查看其日志\n</code></pre><p>2、TCP Wrapper的使用</p>\n<pre><code>[root@baobao ~]# vim /etc/host.allow  #只允许内网和本机可以远程登陆\n\nsshd: 127.0.0.1 192.168.1.0/255.255.255.0192.168.10.0/255.255.255.0\n\n[root@baobao ~]# vim /etc/host.deny\n\nsshd: all\n</code></pre><p>3、iptables数据包过滤防火墙</p>\n<pre><code>[root@baobao ~]# iptables -A INPUT -i eth0 -s 192.168.1.0/24 -p tcp –dport 22 -j ACCEPT\n\n[root@baobao ~]# iptables -A INPUT -i eth0 -s 192.168.10.0/24 -p tcp –dport 22 -j ACCEPT\n\n[root@baobao ~]# /etc/init.d/iptables save\n\n[root@baobao ~]# /etc/init.d/iptables restart\n</code></pre><p>注意不要开放ssh的登陆权限给Internet上面的所有用户或主机，只开放给适当的部分用户或主机即可，否则会很不安全</p>"},{"title":"zabbix2.6安装","date":"2016-09-02T06:19:28.812Z","_content":"\n\n1. 安装lnmp架构\n `yum -y install gcc gcc-c++ autoconf httpd php mysql mysql-server php-mysql httpd-manual mod_ssl mod_perl mod_auth_mysql php-gd php-xml php-mbstring php-ldap php-pear php-xmlrpc php-bcmath mysql-connector-odbc mysql-devel libdbi-dbd-mysql net-snmp-devel curl-devel`\n2. 启动服务\n    service mysqld start\n    service httpd start\n<!--more-->\n\n3. 创建zabbix用户和组\n    groupadd zabbix\n    useradd zabbix -g zabbix\n4. 进入mysql创建数据库\n    create database zabbix character set utf8;\n    grant all on zabbix.* to zabbix@localhost identified by ‘jszj201501’;\n5. 解压zabbix.tar包\n    > tar zxf zabbix-2.4.tar.gz\n    > cd zabbix-2.4.5/database/mysql/\n6. 导入数据库\n    mysql -uzabbix -pjszj201501 zabbix <schema.sql\n    mysql -uzabbix -pjszj201501 zabbix <images.sql\n7. 进行编译安装\n    cd ../..\n    ./configure –prefix=/usr/local/zabbix –enable-server –enable-agent –with-mysql –with-net-snmp –with-libcurl\n    make&&make install\n8. 添加zabbix服务对应的端口\n    cat >>/etc/services<<EOF\n    zabbix-agent 10050/tcp Zabbix Agent\n    zabbix-agent 10050/udp Zabbix Agent\n    zabbix-trapper 10051/tcp Zabbix Trapper\n    zabbix-trapper 10051/udp Zabbix Trapper\n    EOF\n9. 修改zabbix server 配置文件\n    vim /usr/local/zabbix/etc/zabbix_server.conf\n    LogFile=/tmp/zabbix_server.log ##日志位置，根据需求修改；\n    PidFile=/tmp/zabbix_server.pid ##PID 所在位置\n    DBHost=localhost ##如果不是在本机，请修改\n    DBName=zabbix ##数据库名称\n    DBUser=zabbix ##数据库用户名\n    DBPassword=redhat ##数据库密码\n10. 安装启动脚本,添加可执行权限\n    cp misc/init.d/fedora/core/zabbix_server /etc/init.d\n    chmod +x /etc/init.d/zabbix_server\n11. 查找zabbix_server.conf位置复制\n\n    find / -name zabbix_server.conf\n12. 修改启动脚本，启动zabbix server\n    vim /etc/init.d/zabbix_server\n    BASEDIR=/usr/local/zabbix ##修改这个，zabbix 的安装目录\n    CONFILE=$BASEDIR/etc/zabbix_server.conf ##添加这一行，定义配置文件位置\n    #搜索start,修改启动选项，默认是去/etc 下去找配置文件的\n    action $”Starting $BINARY_NAME: ” $FULLPATH -c $CONFILE\n    service zabbix_server start\n13. 安装邮件服务\n    yum install mailx\n    vi /etc/mail.rc\n    set from=xxx@163.com smtp=smtp.163.com\n    set smtp-auth-user=xxx@163.com smtp-auth-password=123456\n    set smtp-auth=login\n    :wq! #保存退出\n    echo “zabbix test mail” |mail -s “zabbix” yyy@163.com\n    linux客户端\n    mkdir /usr/local/zabbix\n    tar zxf zabbix_agents_2.0.6.linux2_6.amd64.tar.gz -C /usr/local/zabbix\n14. 编辑配置文件\n    find / -name zabbix_agentd.conf\n    vim zabbix_agentd.conf\n    LogFile=/tmp/zabbix_agentd.log\n    Server=202.108.1.52 ##服务器IP\n    ServerActive=202.108.1.52 ##主动模式服务器IP\n    Hostname=202.108.1.51 ##设定主机名\n    #加入mysql配置\n15. 安装修改启动脚本\n    scp misc/init.d/fedora/core/zabbix_agentd 202.108.1.51:/etc/init.d\n    vim /etc/init.d/zabbix_agentd\n    BASEDIR=/usr/local/zabbix ##修改这个\n    CONFILE=$BASEDIR/etc/zabbix_agentd.conf ##添加这行，搜索start 添加-c $CONFILE\n    action $”Starting $BINARY_NAME: ” $FULLPATH -c $CONFILE\n    service zabbix_agentd start\n16. 创建用户和用户组\n    groupadd zabbix\n    useradd zabbix -g zabbix\n    windows客户端\n    cmd\n    d:\\zabbix_agentd.exe -i -c d:\\zabbix\\zabbix_agentd.conf\n    services.msc\n17. 禁用内部邮件服务\n    service sendmail stop #关闭\n    chkconfig sendmail off #禁止开机启动\n    service postfix stop\n    chkconfig postfix off\n18. 事件触发器配置：\n    名称：Action-Email\n    默认接收人：故障{TRIGGER.STATUS},服务器:{HOSTNAME1}发生: {TRIGGER.NAME}故障!\n    默认信息：\n    告警主机:{HOSTNAME1}\n    告警时间:{EVENT.DATE} {EVENT.TIME}\n    告警等级:{TRIGGER.SEVERITY}\n    告警信息: {TRIGGER.NAME}\n    告警项目:{TRIGGER.KEY1}\n    问题详情:{ITEM.NAME}:{ITEM.VALUE}\n    当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1}\n    事件ID:{EVENT.ID}\n    恢复信息：打钩\n    恢复主旨：恢复{TRIGGER.STATUS}, 服务器:{HOSTNAME1}: {TRIGGER.NAME}已恢复!\n    恢复信息：\n    告警主机:{HOSTNAME1}\n    告警时间:{EVENT.DATE} {EVENT.TIME}\n    告警等级:{TRIGGER.SEVERITY}\n    告警信息: {TRIGGER.NAME}\n    告警项目:{TRIGGER.KEY1}\n    问题详情:{ITEM.NAME}:{ITEM.VALUE}\n    当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1}\n    事件ID:{EVENT.ID}\n    已启用：打钩\n19. 解决乱码和附件问题\n    vim /usr/local/zabbix/share/zabbix/alertscripts/sendmail.sh\n    #!/bin/bash\n    #export.UTF-8 //解决发送的中文变成了乱码的问题\n    FILE=/tmp/mailtmp.txt\n    echo “$3” >$FILE\n    dos2unix -k $FILE  //解决了发送的邮件内容变成附件的问题。\n    /bin/mail -s “$2” $1 < $FILE\n    touch /tmp/mailtmp.txt\n    chown  zabbix.zabbix /tmp/mailtmp.txt\n20. zabbix  mysql客户端\n    find / -name userparameter_mysql.conf\n    vi /usr/local/zabbixvim/etc/zabbix_agent.conf\n    Include=/usr/local/zabbix/conf/zabbix_agentd/ #加入mysql配置(find查找的路径)\n    vi /usr/local/zabbix/etc/zabbix_agentd.conf\n    Include=/usr/local/zabbix/conf/zabbix_agentd/ #加入mysql配置\n    mkdir /etc/zabbix\n    touch /etc/zabbix/.my.cnf\n    vim /etc/zabbix/.my.cnf\n    [mysql]\n    host = localhost\n    user = mysqlcheck\n    password = mysqlcheck\n    socket = /var/lib/mysql/mysql.sock(mysql.sock的位置)\n    [mysqladmin]\n    host = localhost\n    user = mysqlcheck\n    password = mysqlchechk\n    socket = /var/lib/mysql/mysql.sock(mysql.sock的位置)\n    vim userparameter_mysql.conf\n    UserParameter=mysql.status[*],echo “show global status where Variable_name=’$1′;” | mysql -uzabbix -pjszj201501 -N | awk ‘{print $$2}’ #取mysql状态\n    UserParameter=mysql.size[*],echo “select sum($(case “$3″ in both|””) echo “data_length+index_length”;; data|index) echo “$3_length”;; free) echo “data_free”;; esac)) from information_schema.tables$([[ “$1” = “all” || ! “$1″ ]] || echo ” where table_schema=’$1′”)$([[ “$2” = “all” || ! “$2” ]] || echo “and table_name=’$2′”);” | mysql -uzabbix -pjszj201501 -N\n     #取mysql操作状态\n    UserParameter=mysql.ping,HOME=/etc/zabbix mysqladmin -uzabbix -ppassword | grep -c alive\n    UserParameter=mysql.version,mysql -V #取mysql版本\n    chmod 777 userparameter_mysql.conf\n    service zabbix_agentd restart\n21. Zabbix配置email报警\n一、              使用msmtp这个命令行MUA\n    (1)./configure –prefix=/usr/local/msmtp\n    (2)make\n    (3)make install\n    (4)mkdir /usr/local/msmtp/etc\n    (5)touch /usr/local/msmtp/etc/msmtprc\n    (6)在/usr/local/msmtp/etc/msmtprc中写入如下内容：\n    defaults\n    account michael_zhou\n    host mail.chinadba.com\n    domain chinadba.com\n    from michael_zhou@chinadba.com\n    auth login\n    user michael_zhou@chinadba.com\n        password your_password\n    account default:michael_zhou\n    logfile /var/log/maillog\n    (7)测试一下：/usr/local/msmtp/bin/msmtp i@chinadba.com，输入内容后按ctrl+D发出。\n二、    在实际测试中发现直接使用msmtp命令发出去的邮件会看不到发件人和主题，只能看到邮件内容，所以我使用mutt挂接在msmtp上，mutt默认会安装，如果没有安装请yum install mutt*\n    (1)修改mutt的配置文件/etc/Muttrc, 不是/etc/muttrc  ，M要大写\n    1．set sendmail=”/usr/local/msmtp/bin/msmtp”\n    2．set use_from=yes\n    3．set realname=michael_zhou@chinadba.com  #发件人邮箱地址\n    4．set editor=”vi”\n    5．保存退出\n    (2)测试一下：echo “邮件报警测试” | mutt -s “测试” i@chinadba.com  #收件人地址\n三、    创建 zabbix用于发送邮件的脚本,脚本放在什么位置随便，但是要保证zabbix能找到！\n(1)vim /usr/bin/baojing,并写入如下内容：\n#!/bin/bash\necho “$3” | mutt -s “$2” $1       # $3表示邮件内容、$2表示邮件标题、$1表示收件人\n(2)chmod a+x /usr/bin/baojing\n四、    zabbix配置\n(1)创建meida types\n1．登录到zabbix，进入“Administration” >> ”Media types”，点击右上角“Create Media Type”。 Description填”mediatype-baojing”或其它名称，Type选择”Script”，Script填”baojing”。\n2．点击save保存\n(2)创建actions\n1.登录到zabbix，进入”Configation” >> “Actions”，点击右上角”Create Actions”。输入Name “action-baojing” ，其它都默认点击右侧“Action Operations”下的”New”按钮，”Operation Type”选择”Send message”，”Send Message to”选择一个或多个要发送消息的用户组，”Send only to”选择我们之前新增的mediatype-baojing。\n2.点击save保存\n(3) zabbix用户配置\n登录到zabbix, 进入”Adimistration” >> “Users”，在之前选定要发送消息的组里的Members栏位里选择一个用户，例如选择Admin用户。\n在用户信息修改界面最下方的”Media”处点击”Add”按钮。\nType选择”mediatype-baojing”，Send to填入收件人地址，点击Add添加。\n点击”Save”保存配置。\n至此配置完成，测试！\n不光是zabbix,nagios等监控平台的邮件报警都可以这样配置。当然转到139邮箱的话可以收到短信的，会更加及时的收到报警。\nzabbix企业应用之服务器硬件信息监控\nhttp://dl528888.blog.51cto.com/2382721/1403893\nzabbix企业应用之Mysql主从监控\nhttp://dl528888.blog.51cto.com/2382721/1434263\nZabbix监控MySQL数据库状态\nhttp://www.linuxidc.com/Linux/2015-04/116304.htm\nZabbix使用微信接口实现微信报警功能\nhttp://lcbk.net/zabbix/2022.html\nhttp://www.cnyunwei.com/thread-29593-1-1.html","source":"_posts/zabbix2.6安装.md","raw":"---\ntitle: zabbix2.6安装\ndate: \ntags:\n---\n\n\n1. 安装lnmp架构\n `yum -y install gcc gcc-c++ autoconf httpd php mysql mysql-server php-mysql httpd-manual mod_ssl mod_perl mod_auth_mysql php-gd php-xml php-mbstring php-ldap php-pear php-xmlrpc php-bcmath mysql-connector-odbc mysql-devel libdbi-dbd-mysql net-snmp-devel curl-devel`\n2. 启动服务\n    service mysqld start\n    service httpd start\n<!--more-->\n\n3. 创建zabbix用户和组\n    groupadd zabbix\n    useradd zabbix -g zabbix\n4. 进入mysql创建数据库\n    create database zabbix character set utf8;\n    grant all on zabbix.* to zabbix@localhost identified by ‘jszj201501’;\n5. 解压zabbix.tar包\n    > tar zxf zabbix-2.4.tar.gz\n    > cd zabbix-2.4.5/database/mysql/\n6. 导入数据库\n    mysql -uzabbix -pjszj201501 zabbix <schema.sql\n    mysql -uzabbix -pjszj201501 zabbix <images.sql\n7. 进行编译安装\n    cd ../..\n    ./configure –prefix=/usr/local/zabbix –enable-server –enable-agent –with-mysql –with-net-snmp –with-libcurl\n    make&&make install\n8. 添加zabbix服务对应的端口\n    cat >>/etc/services<<EOF\n    zabbix-agent 10050/tcp Zabbix Agent\n    zabbix-agent 10050/udp Zabbix Agent\n    zabbix-trapper 10051/tcp Zabbix Trapper\n    zabbix-trapper 10051/udp Zabbix Trapper\n    EOF\n9. 修改zabbix server 配置文件\n    vim /usr/local/zabbix/etc/zabbix_server.conf\n    LogFile=/tmp/zabbix_server.log ##日志位置，根据需求修改；\n    PidFile=/tmp/zabbix_server.pid ##PID 所在位置\n    DBHost=localhost ##如果不是在本机，请修改\n    DBName=zabbix ##数据库名称\n    DBUser=zabbix ##数据库用户名\n    DBPassword=redhat ##数据库密码\n10. 安装启动脚本,添加可执行权限\n    cp misc/init.d/fedora/core/zabbix_server /etc/init.d\n    chmod +x /etc/init.d/zabbix_server\n11. 查找zabbix_server.conf位置复制\n\n    find / -name zabbix_server.conf\n12. 修改启动脚本，启动zabbix server\n    vim /etc/init.d/zabbix_server\n    BASEDIR=/usr/local/zabbix ##修改这个，zabbix 的安装目录\n    CONFILE=$BASEDIR/etc/zabbix_server.conf ##添加这一行，定义配置文件位置\n    #搜索start,修改启动选项，默认是去/etc 下去找配置文件的\n    action $”Starting $BINARY_NAME: ” $FULLPATH -c $CONFILE\n    service zabbix_server start\n13. 安装邮件服务\n    yum install mailx\n    vi /etc/mail.rc\n    set from=xxx@163.com smtp=smtp.163.com\n    set smtp-auth-user=xxx@163.com smtp-auth-password=123456\n    set smtp-auth=login\n    :wq! #保存退出\n    echo “zabbix test mail” |mail -s “zabbix” yyy@163.com\n    linux客户端\n    mkdir /usr/local/zabbix\n    tar zxf zabbix_agents_2.0.6.linux2_6.amd64.tar.gz -C /usr/local/zabbix\n14. 编辑配置文件\n    find / -name zabbix_agentd.conf\n    vim zabbix_agentd.conf\n    LogFile=/tmp/zabbix_agentd.log\n    Server=202.108.1.52 ##服务器IP\n    ServerActive=202.108.1.52 ##主动模式服务器IP\n    Hostname=202.108.1.51 ##设定主机名\n    #加入mysql配置\n15. 安装修改启动脚本\n    scp misc/init.d/fedora/core/zabbix_agentd 202.108.1.51:/etc/init.d\n    vim /etc/init.d/zabbix_agentd\n    BASEDIR=/usr/local/zabbix ##修改这个\n    CONFILE=$BASEDIR/etc/zabbix_agentd.conf ##添加这行，搜索start 添加-c $CONFILE\n    action $”Starting $BINARY_NAME: ” $FULLPATH -c $CONFILE\n    service zabbix_agentd start\n16. 创建用户和用户组\n    groupadd zabbix\n    useradd zabbix -g zabbix\n    windows客户端\n    cmd\n    d:\\zabbix_agentd.exe -i -c d:\\zabbix\\zabbix_agentd.conf\n    services.msc\n17. 禁用内部邮件服务\n    service sendmail stop #关闭\n    chkconfig sendmail off #禁止开机启动\n    service postfix stop\n    chkconfig postfix off\n18. 事件触发器配置：\n    名称：Action-Email\n    默认接收人：故障{TRIGGER.STATUS},服务器:{HOSTNAME1}发生: {TRIGGER.NAME}故障!\n    默认信息：\n    告警主机:{HOSTNAME1}\n    告警时间:{EVENT.DATE} {EVENT.TIME}\n    告警等级:{TRIGGER.SEVERITY}\n    告警信息: {TRIGGER.NAME}\n    告警项目:{TRIGGER.KEY1}\n    问题详情:{ITEM.NAME}:{ITEM.VALUE}\n    当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1}\n    事件ID:{EVENT.ID}\n    恢复信息：打钩\n    恢复主旨：恢复{TRIGGER.STATUS}, 服务器:{HOSTNAME1}: {TRIGGER.NAME}已恢复!\n    恢复信息：\n    告警主机:{HOSTNAME1}\n    告警时间:{EVENT.DATE} {EVENT.TIME}\n    告警等级:{TRIGGER.SEVERITY}\n    告警信息: {TRIGGER.NAME}\n    告警项目:{TRIGGER.KEY1}\n    问题详情:{ITEM.NAME}:{ITEM.VALUE}\n    当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1}\n    事件ID:{EVENT.ID}\n    已启用：打钩\n19. 解决乱码和附件问题\n    vim /usr/local/zabbix/share/zabbix/alertscripts/sendmail.sh\n    #!/bin/bash\n    #export.UTF-8 //解决发送的中文变成了乱码的问题\n    FILE=/tmp/mailtmp.txt\n    echo “$3” >$FILE\n    dos2unix -k $FILE  //解决了发送的邮件内容变成附件的问题。\n    /bin/mail -s “$2” $1 < $FILE\n    touch /tmp/mailtmp.txt\n    chown  zabbix.zabbix /tmp/mailtmp.txt\n20. zabbix  mysql客户端\n    find / -name userparameter_mysql.conf\n    vi /usr/local/zabbixvim/etc/zabbix_agent.conf\n    Include=/usr/local/zabbix/conf/zabbix_agentd/ #加入mysql配置(find查找的路径)\n    vi /usr/local/zabbix/etc/zabbix_agentd.conf\n    Include=/usr/local/zabbix/conf/zabbix_agentd/ #加入mysql配置\n    mkdir /etc/zabbix\n    touch /etc/zabbix/.my.cnf\n    vim /etc/zabbix/.my.cnf\n    [mysql]\n    host = localhost\n    user = mysqlcheck\n    password = mysqlcheck\n    socket = /var/lib/mysql/mysql.sock(mysql.sock的位置)\n    [mysqladmin]\n    host = localhost\n    user = mysqlcheck\n    password = mysqlchechk\n    socket = /var/lib/mysql/mysql.sock(mysql.sock的位置)\n    vim userparameter_mysql.conf\n    UserParameter=mysql.status[*],echo “show global status where Variable_name=’$1′;” | mysql -uzabbix -pjszj201501 -N | awk ‘{print $$2}’ #取mysql状态\n    UserParameter=mysql.size[*],echo “select sum($(case “$3″ in both|””) echo “data_length+index_length”;; data|index) echo “$3_length”;; free) echo “data_free”;; esac)) from information_schema.tables$([[ “$1” = “all” || ! “$1″ ]] || echo ” where table_schema=’$1′”)$([[ “$2” = “all” || ! “$2” ]] || echo “and table_name=’$2′”);” | mysql -uzabbix -pjszj201501 -N\n     #取mysql操作状态\n    UserParameter=mysql.ping,HOME=/etc/zabbix mysqladmin -uzabbix -ppassword | grep -c alive\n    UserParameter=mysql.version,mysql -V #取mysql版本\n    chmod 777 userparameter_mysql.conf\n    service zabbix_agentd restart\n21. Zabbix配置email报警\n一、              使用msmtp这个命令行MUA\n    (1)./configure –prefix=/usr/local/msmtp\n    (2)make\n    (3)make install\n    (4)mkdir /usr/local/msmtp/etc\n    (5)touch /usr/local/msmtp/etc/msmtprc\n    (6)在/usr/local/msmtp/etc/msmtprc中写入如下内容：\n    defaults\n    account michael_zhou\n    host mail.chinadba.com\n    domain chinadba.com\n    from michael_zhou@chinadba.com\n    auth login\n    user michael_zhou@chinadba.com\n        password your_password\n    account default:michael_zhou\n    logfile /var/log/maillog\n    (7)测试一下：/usr/local/msmtp/bin/msmtp i@chinadba.com，输入内容后按ctrl+D发出。\n二、    在实际测试中发现直接使用msmtp命令发出去的邮件会看不到发件人和主题，只能看到邮件内容，所以我使用mutt挂接在msmtp上，mutt默认会安装，如果没有安装请yum install mutt*\n    (1)修改mutt的配置文件/etc/Muttrc, 不是/etc/muttrc  ，M要大写\n    1．set sendmail=”/usr/local/msmtp/bin/msmtp”\n    2．set use_from=yes\n    3．set realname=michael_zhou@chinadba.com  #发件人邮箱地址\n    4．set editor=”vi”\n    5．保存退出\n    (2)测试一下：echo “邮件报警测试” | mutt -s “测试” i@chinadba.com  #收件人地址\n三、    创建 zabbix用于发送邮件的脚本,脚本放在什么位置随便，但是要保证zabbix能找到！\n(1)vim /usr/bin/baojing,并写入如下内容：\n#!/bin/bash\necho “$3” | mutt -s “$2” $1       # $3表示邮件内容、$2表示邮件标题、$1表示收件人\n(2)chmod a+x /usr/bin/baojing\n四、    zabbix配置\n(1)创建meida types\n1．登录到zabbix，进入“Administration” >> ”Media types”，点击右上角“Create Media Type”。 Description填”mediatype-baojing”或其它名称，Type选择”Script”，Script填”baojing”。\n2．点击save保存\n(2)创建actions\n1.登录到zabbix，进入”Configation” >> “Actions”，点击右上角”Create Actions”。输入Name “action-baojing” ，其它都默认点击右侧“Action Operations”下的”New”按钮，”Operation Type”选择”Send message”，”Send Message to”选择一个或多个要发送消息的用户组，”Send only to”选择我们之前新增的mediatype-baojing。\n2.点击save保存\n(3) zabbix用户配置\n登录到zabbix, 进入”Adimistration” >> “Users”，在之前选定要发送消息的组里的Members栏位里选择一个用户，例如选择Admin用户。\n在用户信息修改界面最下方的”Media”处点击”Add”按钮。\nType选择”mediatype-baojing”，Send to填入收件人地址，点击Add添加。\n点击”Save”保存配置。\n至此配置完成，测试！\n不光是zabbix,nagios等监控平台的邮件报警都可以这样配置。当然转到139邮箱的话可以收到短信的，会更加及时的收到报警。\nzabbix企业应用之服务器硬件信息监控\nhttp://dl528888.blog.51cto.com/2382721/1403893\nzabbix企业应用之Mysql主从监控\nhttp://dl528888.blog.51cto.com/2382721/1434263\nZabbix监控MySQL数据库状态\nhttp://www.linuxidc.com/Linux/2015-04/116304.htm\nZabbix使用微信接口实现微信报警功能\nhttp://lcbk.net/zabbix/2022.html\nhttp://www.cnyunwei.com/thread-29593-1-1.html","slug":"zabbix2.6安装","published":1,"updated":"2016-09-02T06:13:42.000Z","_id":"cisldejkn000ekgpvj3n1yc0y","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li>安装lnmp架构<br><code>yum -y install gcc gcc-c++ autoconf httpd php mysql mysql-server php-mysql httpd-manual mod_ssl mod_perl mod_auth_mysql php-gd php-xml php-mbstring php-ldap php-pear php-xmlrpc php-bcmath mysql-connector-odbc mysql-devel libdbi-dbd-mysql net-snmp-devel curl-devel</code></li>\n<li><p>启动服务<br> service mysqld start<br> service httpd start</p>\n<a id=\"more\"></a>\n</li>\n<li><p>创建zabbix用户和组<br> groupadd zabbix<br> useradd zabbix -g zabbix</p>\n</li>\n<li>进入mysql创建数据库<br> create database zabbix character set utf8;<br> grant all on zabbix.* to zabbix@localhost identified by ‘jszj201501’;</li>\n<li>解压zabbix.tar包<blockquote>\n<p>tar zxf zabbix-2.4.tar.gz<br>cd zabbix-2.4.5/database/mysql/</p>\n</blockquote>\n</li>\n<li>导入数据库<br> mysql -uzabbix -pjszj201501 zabbix &lt;schema.sql<br> mysql -uzabbix -pjszj201501 zabbix &lt;images.sql</li>\n<li>进行编译安装<br> cd ../..<br> ./configure –prefix=/usr/local/zabbix –enable-server –enable-agent –with-mysql –with-net-snmp –with-libcurl<br> make&amp;&amp;make install</li>\n<li>添加zabbix服务对应的端口<br> cat &gt;&gt;/etc/services&lt;&lt;EOF<br> zabbix-agent 10050/tcp Zabbix Agent<br> zabbix-agent 10050/udp Zabbix Agent<br> zabbix-trapper 10051/tcp Zabbix Trapper<br> zabbix-trapper 10051/udp Zabbix Trapper<br> EOF</li>\n<li>修改zabbix server 配置文件<br> vim /usr/local/zabbix/etc/zabbix_server.conf<br> LogFile=/tmp/zabbix_server.log ##日志位置，根据需求修改；<br> PidFile=/tmp/zabbix_server.pid ##PID 所在位置<br> DBHost=localhost ##如果不是在本机，请修改<br> DBName=zabbix ##数据库名称<br> DBUser=zabbix ##数据库用户名<br> DBPassword=redhat ##数据库密码</li>\n<li>安装启动脚本,添加可执行权限<br>cp misc/init.d/fedora/core/zabbix_server /etc/init.d<br>chmod +x /etc/init.d/zabbix_server</li>\n<li><p>查找zabbix_server.conf位置复制</p>\n<p>find / -name zabbix_server.conf</p>\n</li>\n<li>修改启动脚本，启动zabbix server<br>vim /etc/init.d/zabbix_server<br>BASEDIR=/usr/local/zabbix ##修改这个，zabbix 的安装目录<br>CONFILE=$BASEDIR/etc/zabbix_server.conf ##添加这一行，定义配置文件位置<br>#搜索start,修改启动选项，默认是去/etc 下去找配置文件的<br>action $”Starting $BINARY_NAME: ” $FULLPATH -c $CONFILE<br>service zabbix_server start</li>\n<li>安装邮件服务<br>yum install mailx<br>vi /etc/mail.rc<br>set from=xxx@163.com smtp=smtp.163.com<br>set smtp-auth-user=xxx@163.com smtp-auth-password=123456<br>set smtp-auth=login<br>:wq! #保存退出<br>echo “zabbix test mail” |mail -s “zabbix” yyy@163.com<br>linux客户端<br>mkdir /usr/local/zabbix<br>tar zxf zabbix_agents_2.0.6.linux2_6.amd64.tar.gz -C /usr/local/zabbix</li>\n<li>编辑配置文件<br>find / -name zabbix_agentd.conf<br>vim zabbix_agentd.conf<br>LogFile=/tmp/zabbix_agentd.log<br>Server=202.108.1.52 ##服务器IP<br>ServerActive=202.108.1.52 ##主动模式服务器IP<br>Hostname=202.108.1.51 ##设定主机名<br>#加入mysql配置</li>\n<li>安装修改启动脚本<br>scp misc/init.d/fedora/core/zabbix_agentd 202.108.1.51:/etc/init.d<br>vim /etc/init.d/zabbix_agentd<br>BASEDIR=/usr/local/zabbix ##修改这个<br>CONFILE=$BASEDIR/etc/zabbix_agentd.conf ##添加这行，搜索start 添加-c $CONFILE<br>action $”Starting $BINARY_NAME: ” $FULLPATH -c $CONFILE<br>service zabbix_agentd start</li>\n<li>创建用户和用户组<br>groupadd zabbix<br>useradd zabbix -g zabbix<br>windows客户端<br>cmd<br>d:\\zabbix_agentd.exe -i -c d:\\zabbix\\zabbix_agentd.conf<br>services.msc</li>\n<li>禁用内部邮件服务<br>service sendmail stop #关闭<br>chkconfig sendmail off #禁止开机启动<br>service postfix stop<br>chkconfig postfix off</li>\n<li>事件触发器配置：<br>名称：Action-Email<br>默认接收人：故障{TRIGGER.STATUS},服务器:{HOSTNAME1}发生: {TRIGGER.NAME}故障!<br>默认信息：<br>告警主机:{HOSTNAME1}<br>告警时间:{EVENT.DATE} {EVENT.TIME}<br>告警等级:{TRIGGER.SEVERITY}<br>告警信息: {TRIGGER.NAME}<br>告警项目:{TRIGGER.KEY1}<br>问题详情:{ITEM.NAME}:{ITEM.VALUE}<br>当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1}<br>事件ID:{EVENT.ID}<br>恢复信息：打钩<br>恢复主旨：恢复{TRIGGER.STATUS}, 服务器:{HOSTNAME1}: {TRIGGER.NAME}已恢复!<br>恢复信息：<br>告警主机:{HOSTNAME1}<br>告警时间:{EVENT.DATE} {EVENT.TIME}<br>告警等级:{TRIGGER.SEVERITY}<br>告警信息: {TRIGGER.NAME}<br>告警项目:{TRIGGER.KEY1}<br>问题详情:{ITEM.NAME}:{ITEM.VALUE}<br>当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1}<br>事件ID:{EVENT.ID}<br>已启用：打钩</li>\n<li>解决乱码和附件问题<br>vim /usr/local/zabbix/share/zabbix/alertscripts/sendmail.sh<br>#!/bin/bash<br>#export.UTF-8 //解决发送的中文变成了乱码的问题<br>FILE=/tmp/mailtmp.txt<br>echo “$3” &gt;$FILE<br>dos2unix -k $FILE  //解决了发送的邮件内容变成附件的问题。<br>/bin/mail -s “$2” $1 &lt; $FILE<br>touch /tmp/mailtmp.txt<br>chown  zabbix.zabbix /tmp/mailtmp.txt</li>\n<li>zabbix  mysql客户端<br>find / -name userparameter_mysql.conf<br>vi /usr/local/zabbixvim/etc/zabbix_agent.conf<br>Include=/usr/local/zabbix/conf/zabbix_agentd/ #加入mysql配置(find查找的路径)<br>vi /usr/local/zabbix/etc/zabbix_agentd.conf<br>Include=/usr/local/zabbix/conf/zabbix_agentd/ #加入mysql配置<br>mkdir /etc/zabbix<br>touch /etc/zabbix/.my.cnf<br>vim /etc/zabbix/.my.cnf<br>[mysql]<br>host = localhost<br>user = mysqlcheck<br>password = mysqlcheck<br>socket = /var/lib/mysql/mysql.sock(mysql.sock的位置)<br>[mysqladmin]<br>host = localhost<br>user = mysqlcheck<br>password = mysqlchechk<br>socket = /var/lib/mysql/mysql.sock(mysql.sock的位置)<br>vim userparameter_mysql.conf<br>UserParameter=mysql.status[<em>],echo “show global status where Variable_name=’$1′;” | mysql -uzabbix -pjszj201501 -N | awk ‘{print $$2}’ #取mysql状态<br>UserParameter=mysql.size[</em>],echo “select sum($(case “$3″ in both|””) echo “data_length+index_length”;; data|index) echo “$3_length”;; free) echo “data_free”;; esac)) from information_schema.tables$([[ “$1” = “all” || ! “$1″ ]] || echo ” where table_schema=’$1′”)$([[ “$2” = “all” || ! “$2” ]] || echo “and table_name=’$2′”);” | mysql -uzabbix -pjszj201501 -N<br> #取mysql操作状态<br>UserParameter=mysql.ping,HOME=/etc/zabbix mysqladmin -uzabbix -ppassword | grep -c alive<br>UserParameter=mysql.version,mysql -V #取mysql版本<br>chmod 777 userparameter_mysql.conf<br>service zabbix_agentd restart</li>\n<li>Zabbix配置email报警<br>一、              使用msmtp这个命令行MUA<br>(1)./configure –prefix=/usr/local/msmtp<br>(2)make<br>(3)make install<br>(4)mkdir /usr/local/msmtp/etc<br>(5)touch /usr/local/msmtp/etc/msmtprc<br>(6)在/usr/local/msmtp/etc/msmtprc中写入如下内容：<br>defaults<br>account michael_zhou<br>host mail.chinadba.com<br>domain chinadba.com<br>from michael_zhou@chinadba.com<br>auth login<br>user michael_zhou@chinadba.com<pre><code>password your_password\n</code></pre>account default:michael_zhou<br>logfile /var/log/maillog<br>(7)测试一下：/usr/local/msmtp/bin/msmtp i@chinadba.com，输入内容后按ctrl+D发出。<br>二、    在实际测试中发现直接使用msmtp命令发出去的邮件会看不到发件人和主题，只能看到邮件内容，所以我使用mutt挂接在msmtp上，mutt默认会安装，如果没有安装请yum install mutt*<br>(1)修改mutt的配置文件/etc/Muttrc, 不是/etc/muttrc  ，M要大写<br>1．set sendmail=”/usr/local/msmtp/bin/msmtp”<br>2．set use_from=yes<br>3．set realname=michael_zhou@chinadba.com  #发件人邮箱地址<br>4．set editor=”vi”<br>5．保存退出<br>(2)测试一下：echo “邮件报警测试” | mutt -s “测试” i@chinadba.com  #收件人地址<br>三、    创建 zabbix用于发送邮件的脚本,脚本放在什么位置随便，但是要保证zabbix能找到！<br>(1)vim /usr/bin/baojing,并写入如下内容：<br>#!/bin/bash<br>echo “$3” | mutt -s “$2” $1       # $3表示邮件内容、$2表示邮件标题、$1表示收件人<br>(2)chmod a+x /usr/bin/baojing<br>四、    zabbix配置<br>(1)创建meida types<br>1．登录到zabbix，进入“Administration” &gt;&gt; ”Media types”，点击右上角“Create Media Type”。 Description填”mediatype-baojing”或其它名称，Type选择”Script”，Script填”baojing”。<br>2．点击save保存<br>(2)创建actions<br>1.登录到zabbix，进入”Configation” &gt;&gt; “Actions”，点击右上角”Create Actions”。输入Name “action-baojing” ，其它都默认点击右侧“Action Operations”下的”New”按钮，”Operation Type”选择”Send message”，”Send Message to”选择一个或多个要发送消息的用户组，”Send only to”选择我们之前新增的mediatype-baojing。<br>2.点击save保存<br>(3) zabbix用户配置<br>登录到zabbix, 进入”Adimistration” &gt;&gt; “Users”，在之前选定要发送消息的组里的Members栏位里选择一个用户，例如选择Admin用户。<br>在用户信息修改界面最下方的”Media”处点击”Add”按钮。<br>Type选择”mediatype-baojing”，Send to填入收件人地址，点击Add添加。<br>点击”Save”保存配置。<br>至此配置完成，测试！<br>不光是zabbix,nagios等监控平台的邮件报警都可以这样配置。当然转到139邮箱的话可以收到短信的，会更加及时的收到报警。<br>zabbix企业应用之服务器硬件信息监控<br><a href=\"http://dl528888.blog.51cto.com/2382721/1403893\" target=\"_blank\" rel=\"external\">http://dl528888.blog.51cto.com/2382721/1403893</a><br>zabbix企业应用之Mysql主从监控<br><a href=\"http://dl528888.blog.51cto.com/2382721/1434263\" target=\"_blank\" rel=\"external\">http://dl528888.blog.51cto.com/2382721/1434263</a><br>Zabbix监控MySQL数据库状态<br><a href=\"http://www.linuxidc.com/Linux/2015-04/116304.htm\" target=\"_blank\" rel=\"external\">http://www.linuxidc.com/Linux/2015-04/116304.htm</a><br>Zabbix使用微信接口实现微信报警功能<br><a href=\"http://lcbk.net/zabbix/2022.html\" target=\"_blank\" rel=\"external\">http://lcbk.net/zabbix/2022.html</a><br><a href=\"http://www.cnyunwei.com/thread-29593-1-1.html\" target=\"_blank\" rel=\"external\">http://www.cnyunwei.com/thread-29593-1-1.html</a></li>\n</ol>\n","excerpt":"<ol>\n<li>安装lnmp架构<br><code>yum -y install gcc gcc-c++ autoconf httpd php mysql mysql-server php-mysql httpd-manual mod_ssl mod_perl mod_auth_mysql php-gd php-xml php-mbstring php-ldap php-pear php-xmlrpc php-bcmath mysql-connector-odbc mysql-devel libdbi-dbd-mysql net-snmp-devel curl-devel</code></li>\n<li><p>启动服务<br> service mysqld start<br> service httpd start</p>","more":"</li>\n<li><p>创建zabbix用户和组<br> groupadd zabbix<br> useradd zabbix -g zabbix</p>\n</li>\n<li>进入mysql创建数据库<br> create database zabbix character set utf8;<br> grant all on zabbix.* to zabbix@localhost identified by ‘jszj201501’;</li>\n<li>解压zabbix.tar包<blockquote>\n<p>tar zxf zabbix-2.4.tar.gz<br>cd zabbix-2.4.5/database/mysql/</p>\n</blockquote>\n</li>\n<li>导入数据库<br> mysql -uzabbix -pjszj201501 zabbix &lt;schema.sql<br> mysql -uzabbix -pjszj201501 zabbix &lt;images.sql</li>\n<li>进行编译安装<br> cd ../..<br> ./configure –prefix=/usr/local/zabbix –enable-server –enable-agent –with-mysql –with-net-snmp –with-libcurl<br> make&amp;&amp;make install</li>\n<li>添加zabbix服务对应的端口<br> cat &gt;&gt;/etc/services&lt;&lt;EOF<br> zabbix-agent 10050/tcp Zabbix Agent<br> zabbix-agent 10050/udp Zabbix Agent<br> zabbix-trapper 10051/tcp Zabbix Trapper<br> zabbix-trapper 10051/udp Zabbix Trapper<br> EOF</li>\n<li>修改zabbix server 配置文件<br> vim /usr/local/zabbix/etc/zabbix_server.conf<br> LogFile=/tmp/zabbix_server.log ##日志位置，根据需求修改；<br> PidFile=/tmp/zabbix_server.pid ##PID 所在位置<br> DBHost=localhost ##如果不是在本机，请修改<br> DBName=zabbix ##数据库名称<br> DBUser=zabbix ##数据库用户名<br> DBPassword=redhat ##数据库密码</li>\n<li>安装启动脚本,添加可执行权限<br>cp misc/init.d/fedora/core/zabbix_server /etc/init.d<br>chmod +x /etc/init.d/zabbix_server</li>\n<li><p>查找zabbix_server.conf位置复制</p>\n<p>find / -name zabbix_server.conf</p>\n</li>\n<li>修改启动脚本，启动zabbix server<br>vim /etc/init.d/zabbix_server<br>BASEDIR=/usr/local/zabbix ##修改这个，zabbix 的安装目录<br>CONFILE=$BASEDIR/etc/zabbix_server.conf ##添加这一行，定义配置文件位置<br>#搜索start,修改启动选项，默认是去/etc 下去找配置文件的<br>action $”Starting $BINARY_NAME: ” $FULLPATH -c $CONFILE<br>service zabbix_server start</li>\n<li>安装邮件服务<br>yum install mailx<br>vi /etc/mail.rc<br>set from=xxx@163.com smtp=smtp.163.com<br>set smtp-auth-user=xxx@163.com smtp-auth-password=123456<br>set smtp-auth=login<br>:wq! #保存退出<br>echo “zabbix test mail” |mail -s “zabbix” yyy@163.com<br>linux客户端<br>mkdir /usr/local/zabbix<br>tar zxf zabbix_agents_2.0.6.linux2_6.amd64.tar.gz -C /usr/local/zabbix</li>\n<li>编辑配置文件<br>find / -name zabbix_agentd.conf<br>vim zabbix_agentd.conf<br>LogFile=/tmp/zabbix_agentd.log<br>Server=202.108.1.52 ##服务器IP<br>ServerActive=202.108.1.52 ##主动模式服务器IP<br>Hostname=202.108.1.51 ##设定主机名<br>#加入mysql配置</li>\n<li>安装修改启动脚本<br>scp misc/init.d/fedora/core/zabbix_agentd 202.108.1.51:/etc/init.d<br>vim /etc/init.d/zabbix_agentd<br>BASEDIR=/usr/local/zabbix ##修改这个<br>CONFILE=$BASEDIR/etc/zabbix_agentd.conf ##添加这行，搜索start 添加-c $CONFILE<br>action $”Starting $BINARY_NAME: ” $FULLPATH -c $CONFILE<br>service zabbix_agentd start</li>\n<li>创建用户和用户组<br>groupadd zabbix<br>useradd zabbix -g zabbix<br>windows客户端<br>cmd<br>d:\\zabbix_agentd.exe -i -c d:\\zabbix\\zabbix_agentd.conf<br>services.msc</li>\n<li>禁用内部邮件服务<br>service sendmail stop #关闭<br>chkconfig sendmail off #禁止开机启动<br>service postfix stop<br>chkconfig postfix off</li>\n<li>事件触发器配置：<br>名称：Action-Email<br>默认接收人：故障{TRIGGER.STATUS},服务器:{HOSTNAME1}发生: {TRIGGER.NAME}故障!<br>默认信息：<br>告警主机:{HOSTNAME1}<br>告警时间:{EVENT.DATE} {EVENT.TIME}<br>告警等级:{TRIGGER.SEVERITY}<br>告警信息: {TRIGGER.NAME}<br>告警项目:{TRIGGER.KEY1}<br>问题详情:{ITEM.NAME}:{ITEM.VALUE}<br>当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1}<br>事件ID:{EVENT.ID}<br>恢复信息：打钩<br>恢复主旨：恢复{TRIGGER.STATUS}, 服务器:{HOSTNAME1}: {TRIGGER.NAME}已恢复!<br>恢复信息：<br>告警主机:{HOSTNAME1}<br>告警时间:{EVENT.DATE} {EVENT.TIME}<br>告警等级:{TRIGGER.SEVERITY}<br>告警信息: {TRIGGER.NAME}<br>告警项目:{TRIGGER.KEY1}<br>问题详情:{ITEM.NAME}:{ITEM.VALUE}<br>当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1}<br>事件ID:{EVENT.ID}<br>已启用：打钩</li>\n<li>解决乱码和附件问题<br>vim /usr/local/zabbix/share/zabbix/alertscripts/sendmail.sh<br>#!/bin/bash<br>#export.UTF-8 //解决发送的中文变成了乱码的问题<br>FILE=/tmp/mailtmp.txt<br>echo “$3” &gt;$FILE<br>dos2unix -k $FILE  //解决了发送的邮件内容变成附件的问题。<br>/bin/mail -s “$2” $1 &lt; $FILE<br>touch /tmp/mailtmp.txt<br>chown  zabbix.zabbix /tmp/mailtmp.txt</li>\n<li>zabbix  mysql客户端<br>find / -name userparameter_mysql.conf<br>vi /usr/local/zabbixvim/etc/zabbix_agent.conf<br>Include=/usr/local/zabbix/conf/zabbix_agentd/ #加入mysql配置(find查找的路径)<br>vi /usr/local/zabbix/etc/zabbix_agentd.conf<br>Include=/usr/local/zabbix/conf/zabbix_agentd/ #加入mysql配置<br>mkdir /etc/zabbix<br>touch /etc/zabbix/.my.cnf<br>vim /etc/zabbix/.my.cnf<br>[mysql]<br>host = localhost<br>user = mysqlcheck<br>password = mysqlcheck<br>socket = /var/lib/mysql/mysql.sock(mysql.sock的位置)<br>[mysqladmin]<br>host = localhost<br>user = mysqlcheck<br>password = mysqlchechk<br>socket = /var/lib/mysql/mysql.sock(mysql.sock的位置)<br>vim userparameter_mysql.conf<br>UserParameter=mysql.status[<em>],echo “show global status where Variable_name=’$1′;” | mysql -uzabbix -pjszj201501 -N | awk ‘{print $$2}’ #取mysql状态<br>UserParameter=mysql.size[</em>],echo “select sum($(case “$3″ in both|””) echo “data_length+index_length”;; data|index) echo “$3_length”;; free) echo “data_free”;; esac)) from information_schema.tables$([[ “$1” = “all” || ! “$1″ ]] || echo ” where table_schema=’$1′”)$([[ “$2” = “all” || ! “$2” ]] || echo “and table_name=’$2′”);” | mysql -uzabbix -pjszj201501 -N<br> #取mysql操作状态<br>UserParameter=mysql.ping,HOME=/etc/zabbix mysqladmin -uzabbix -ppassword | grep -c alive<br>UserParameter=mysql.version,mysql -V #取mysql版本<br>chmod 777 userparameter_mysql.conf<br>service zabbix_agentd restart</li>\n<li>Zabbix配置email报警<br>一、              使用msmtp这个命令行MUA<br>(1)./configure –prefix=/usr/local/msmtp<br>(2)make<br>(3)make install<br>(4)mkdir /usr/local/msmtp/etc<br>(5)touch /usr/local/msmtp/etc/msmtprc<br>(6)在/usr/local/msmtp/etc/msmtprc中写入如下内容：<br>defaults<br>account michael_zhou<br>host mail.chinadba.com<br>domain chinadba.com<br>from michael_zhou@chinadba.com<br>auth login<br>user michael_zhou@chinadba.com<pre><code>password your_password\n</code></pre>account default:michael_zhou<br>logfile /var/log/maillog<br>(7)测试一下：/usr/local/msmtp/bin/msmtp i@chinadba.com，输入内容后按ctrl+D发出。<br>二、    在实际测试中发现直接使用msmtp命令发出去的邮件会看不到发件人和主题，只能看到邮件内容，所以我使用mutt挂接在msmtp上，mutt默认会安装，如果没有安装请yum install mutt*<br>(1)修改mutt的配置文件/etc/Muttrc, 不是/etc/muttrc  ，M要大写<br>1．set sendmail=”/usr/local/msmtp/bin/msmtp”<br>2．set use_from=yes<br>3．set realname=michael_zhou@chinadba.com  #发件人邮箱地址<br>4．set editor=”vi”<br>5．保存退出<br>(2)测试一下：echo “邮件报警测试” | mutt -s “测试” i@chinadba.com  #收件人地址<br>三、    创建 zabbix用于发送邮件的脚本,脚本放在什么位置随便，但是要保证zabbix能找到！<br>(1)vim /usr/bin/baojing,并写入如下内容：<br>#!/bin/bash<br>echo “$3” | mutt -s “$2” $1       # $3表示邮件内容、$2表示邮件标题、$1表示收件人<br>(2)chmod a+x /usr/bin/baojing<br>四、    zabbix配置<br>(1)创建meida types<br>1．登录到zabbix，进入“Administration” &gt;&gt; ”Media types”，点击右上角“Create Media Type”。 Description填”mediatype-baojing”或其它名称，Type选择”Script”，Script填”baojing”。<br>2．点击save保存<br>(2)创建actions<br>1.登录到zabbix，进入”Configation” &gt;&gt; “Actions”，点击右上角”Create Actions”。输入Name “action-baojing” ，其它都默认点击右侧“Action Operations”下的”New”按钮，”Operation Type”选择”Send message”，”Send Message to”选择一个或多个要发送消息的用户组，”Send only to”选择我们之前新增的mediatype-baojing。<br>2.点击save保存<br>(3) zabbix用户配置<br>登录到zabbix, 进入”Adimistration” &gt;&gt; “Users”，在之前选定要发送消息的组里的Members栏位里选择一个用户，例如选择Admin用户。<br>在用户信息修改界面最下方的”Media”处点击”Add”按钮。<br>Type选择”mediatype-baojing”，Send to填入收件人地址，点击Add添加。<br>点击”Save”保存配置。<br>至此配置完成，测试！<br>不光是zabbix,nagios等监控平台的邮件报警都可以这样配置。当然转到139邮箱的话可以收到短信的，会更加及时的收到报警。<br>zabbix企业应用之服务器硬件信息监控<br><a href=\"http://dl528888.blog.51cto.com/2382721/1403893\">http://dl528888.blog.51cto.com/2382721/1403893</a><br>zabbix企业应用之Mysql主从监控<br><a href=\"http://dl528888.blog.51cto.com/2382721/1434263\">http://dl528888.blog.51cto.com/2382721/1434263</a><br>Zabbix监控MySQL数据库状态<br><a href=\"http://www.linuxidc.com/Linux/2015-04/116304.htm\">http://www.linuxidc.com/Linux/2015-04/116304.htm</a><br>Zabbix使用微信接口实现微信报警功能<br><a href=\"http://lcbk.net/zabbix/2022.html\">http://lcbk.net/zabbix/2022.html</a><br><a href=\"http://www.cnyunwei.com/thread-29593-1-1.html\">http://www.cnyunwei.com/thread-29593-1-1.html</a></li>\n</ol>"},{"title":"搭建WordPress","date":"2016-09-02T06:19:28.813Z","_content":"\n1.搭建LAMP环境\n<!--more-->\n    service iptables stop\n    setenforce 0\n    yum install httpd mysql mysql-server php php-mysql php-gd php-xml\n    service httpd start\n    service mysqld start\n    chkconfig httpd on //开机启动\n    chkconfig –list |grep httpd\n    chkconfig mysqld on\n    chkconfig –list |grep mysql\n    mysqladmin -u root -p password ‘123’ //为mysql设置用户和密码\n    Enter password: //此处回车即可。\n    mysql -u root -p\n    create database wordpress; //创建wordpress数据库，为下面安装wordpress做准备。\n    show databases;\n\n2.安装WordPress\n\n    unzip wordpress-3.9-zh_CN.zip //解压缩\n    mv wordpress /var/www/html/\n    cd /var/www/html/wordpress/\n    vim wp-config.php","source":"_posts/搭建WordPress.md","raw":"---\ntitle: 搭建WordPress\ndate: \ntags:\n---\n\n1.搭建LAMP环境\n<!--more-->\n    service iptables stop\n    setenforce 0\n    yum install httpd mysql mysql-server php php-mysql php-gd php-xml\n    service httpd start\n    service mysqld start\n    chkconfig httpd on //开机启动\n    chkconfig –list |grep httpd\n    chkconfig mysqld on\n    chkconfig –list |grep mysql\n    mysqladmin -u root -p password ‘123’ //为mysql设置用户和密码\n    Enter password: //此处回车即可。\n    mysql -u root -p\n    create database wordpress; //创建wordpress数据库，为下面安装wordpress做准备。\n    show databases;\n\n2.安装WordPress\n\n    unzip wordpress-3.9-zh_CN.zip //解压缩\n    mv wordpress /var/www/html/\n    cd /var/www/html/wordpress/\n    vim wp-config.php","slug":"搭建WordPress","published":1,"updated":"2016-09-02T06:16:42.000Z","_id":"cisldejl1000fkgpv616dc0dx","comments":1,"layout":"post","photos":[],"link":"","content":"<p>1.搭建LAMP环境<br><a id=\"more\"></a><br>    service iptables stop<br>    setenforce 0<br>    yum install httpd mysql mysql-server php php-mysql php-gd php-xml<br>    service httpd start<br>    service mysqld start<br>    chkconfig httpd on //开机启动<br>    chkconfig –list |grep httpd<br>    chkconfig mysqld on<br>    chkconfig –list |grep mysql<br>    mysqladmin -u root -p password ‘123’ //为mysql设置用户和密码<br>    Enter password: //此处回车即可。<br>    mysql -u root -p<br>    create database wordpress; //创建wordpress数据库，为下面安装wordpress做准备。<br>    show databases;</p>\n<p>2.安装WordPress</p>\n<pre><code>unzip wordpress-3.9-zh_CN.zip //解压缩\nmv wordpress /var/www/html/\ncd /var/www/html/wordpress/\nvim wp-config.php\n</code></pre>","excerpt":"<p>1.搭建LAMP环境<br>","more":"<br>    service iptables stop<br>    setenforce 0<br>    yum install httpd mysql mysql-server php php-mysql php-gd php-xml<br>    service httpd start<br>    service mysqld start<br>    chkconfig httpd on //开机启动<br>    chkconfig –list |grep httpd<br>    chkconfig mysqld on<br>    chkconfig –list |grep mysql<br>    mysqladmin -u root -p password ‘123’ //为mysql设置用户和密码<br>    Enter password: //此处回车即可。<br>    mysql -u root -p<br>    create database wordpress; //创建wordpress数据库，为下面安装wordpress做准备。<br>    show databases;</p>\n<p>2.安装WordPress</p>\n<pre><code>unzip wordpress-3.9-zh_CN.zip //解压缩\nmv wordpress /var/www/html/\ncd /var/www/html/wordpress/\nvim wp-config.php\n</code></pre>"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}